<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++ Template - Why C++ templates are usually put in header files?</title>
    <link href="/2025/05/21/cpp-templates/"/>
    <url>/2025/05/21/cpp-templates/</url>
    
    <content type="html"><![CDATA[<p>Think about how C++ programs are typically built:</p><ol><li><p><strong>Separate Compilation (Translation Units)</strong>:</p><ul><li>Each <code>.cpp</code> file (along with the headers it includes after preprocessing) is called a “translation unit.”</li><li>The C++ compiler processes each translation unit <em>independently</em> of all other <code>.cpp</code> files. When the compiler is working on <code>MyCode.cpp</code>, it doesn’t know or care about the contents of <code>YourCode.cpp</code> or <code>TemplateDefinition.cpp</code> <em>at that specific moment of compiling <code>MyCode.cpp</code></em>.</li><li>For each translation unit, the compiler generates an “object file” (e.g., <code>.o</code> or <code>.obj</code>). This object file contains the compiled machine code for the functions and data defined in that translation unit, along with symbols (names of functions, variables, etc.) that it defines or needs from elsewhere.</li></ul></li><li><p><strong>Linking</strong>:</p><ul><li>After all <code>.cpp</code> files are compiled into object files, the “linker” takes over.</li><li>The linker’s job is to combine all these object files, along with any necessary library code, into a single executable program. It resolves references between object files (e.g., if <code>MyCode.o</code> calls a function defined in <code>YourCode.o</code>, the linker connects them).</li></ul></li></ol><p><strong>Now, let’s consider templates in this context:</strong></p><p>Templates are essentially blueprints. When the compiler sees you use a template with specific types, like <code>std::vector&lt;int&gt; myVector;</code> in <code>MyCode.cpp</code>, it needs the <em>full definition</em> of the <code>std::vector&lt;T&gt;</code> template (not just its declaration) to generate the actual code for a <code>std::vector&lt;int&gt;</code> class. This code generation process is called <strong>instantiation</strong>, and it happens <em>during the compilation of <code>MyCode.cpp</code></em>.</p><p><strong>So, why doesn’t putting the definition in a separate <code>.cpp</code> file work by default?</strong></p><p>Let’s say we have:</p><ul><li><p><code>template.h</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myFunction</span><span class="hljs-params">(T value)</span></span>; <span class="hljs-comment">// Declaration</span><br></code></pre></td></tr></table></figure></li><li><p><code>template.cpp</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;template.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myFunction</span><span class="hljs-params">(T value)</span> </span>&#123; <span class="hljs-comment">// Definition</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-comment">// NO explicit instantiation here for now</span><br></code></pre></td></tr></table></figure></li><li><p><code>main.cpp</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;template.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">myFunction</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// Wants to use myFunction&lt;int&gt;</span><br>    <span class="hljs-built_in">myFunction</span>(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// Wants to use myFunction&lt;double&gt;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>Here’s what happens:</p><ol><li><p><strong>Compiling <code>main.cpp</code></strong>:</p><ul><li>The compiler sees <code>myFunction(10)</code>. It knows from <code>template.h</code> that <code>myFunction</code> is a template.</li><li>To generate the code for <code>myFunction&lt;int&gt;</code>, it needs the <em>definition</em> of <code>myFunction&lt;T&gt;</code>.</li><li>However, that definition is in <code>template.cpp</code>, which is a <em>separate translation unit</em>. The compiler working on <code>main.cpp</code> does <strong>not</strong> look inside <code>template.cpp</code> at this time.</li><li>Since the compiler can’t see the definition, it cannot generate the code for <code>myFunction&lt;int&gt;</code> (or <code>myFunction&lt;double&gt;</code>) within <code>main.o</code>. It might just leave a note for the linker saying “I need these functions.”</li></ul></li><li><p><strong>Compiling <code>template.cpp</code></strong>:</p><ul><li>The compiler sees the definition of <code>myFunction&lt;T&gt;</code>.</li><li>However, <code>template.cpp</code> itself doesn’t <em>use</em> <code>myFunction&lt;int&gt;</code> or <code>myFunction&lt;double&gt;</code>. So, the compiler has no reason to instantiate those specific versions of the template here. It just compiles the template definition itself as a blueprint, but no concrete code for specific types is generated into <code>template.o</code> (unless you use explicit instantiation, which is a different technique).</li></ul></li><li><p><strong>Linking</strong>:</p><ul><li>The linker tries to combine <code>main.o</code> and <code>template.o</code>.</li><li><code>main.o</code> says it needs <code>myFunction&lt;int&gt;</code> and <code>myFunction&lt;double&gt;</code>.</li><li><code>template.o</code> doesn’t contain these compiled functions (because they weren’t instantiated when <code>template.cpp</code> was compiled).</li><li>Result: <strong>Linker error</strong> (e.g., “undefined reference to <code>void myFunction&lt;int&gt;(int)</code>”).</li></ul></li></ol><p><strong>Why putting definitions in header files works:</strong></p><p>If we put the definition of <code>myFunction&lt;T&gt;</code> directly into <code>template.h</code> (or a file included by <code>template.h</code>):</p><ul><li><p><code>template.h</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> <span class="hljs-comment">// Needed for std::cout</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myFunction</span><span class="hljs-params">(T value)</span> </span>&#123; <span class="hljs-comment">// Definition is now in the header</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>Now, when <code>main.cpp</code> is compiled:</p><ol><li>It includes <code>template.h</code>.</li><li>When the compiler sees <code>myFunction(10)</code>, it has the <em>full definition</em> of <code>myFunction&lt;T&gt;</code> right there (because it was included).</li><li>It can therefore generate the code for <code>myFunction&lt;int&gt;</code> and place it directly into <code>main.o</code>. Same for <code>myFunction&lt;double&gt;</code>.</li><li>The linker then finds these definitions in <code>main.o</code> and is happy.</li></ol><p><strong>In summary:</strong></p><p>It’s not that the compiler <em>never</em> sees the <code>.cpp</code> file containing the definition. It’s that during the compilation of a <em>specific translation unit</em> (like <code>main.cpp</code>) that <em>uses</em> the template, the compiler needs the template’s definition <em>at that moment</em> to generate the code for the specific instantiation. If that definition is tucked away in another <code>.cpp</code> file that isn’t part of the current translation unit’s preprocessing output, the compiler processing the <em>usage site</em> can’t access it to perform the instantiation.</p><p>Placing template definitions in headers ensures that any <code>.cpp</code> file that uses the template has access to the full definition when it’s being compiled, allowing instantiation to occur in that translation unit.</p><p>There are ways around this default behavior, like <strong>explicit instantiation definitions</strong> in the <code>.cpp</code> file:</p><ul><li>In <code>template.cpp</code>, you could add:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// ... (template definition as before) ...</span><br><span class="hljs-keyword">template</span> <span class="hljs-type">void</span> <span class="hljs-built_in">myFunction</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-type">int</span>);       <span class="hljs-comment">// Explicitly tells the compiler to generate code for int</span><br><span class="hljs-keyword">template</span> <span class="hljs-type">void</span> <span class="hljs-built_in">myFunction</span>&lt;<span class="hljs-type">double</span>&gt;(<span class="hljs-type">double</span>); <span class="hljs-comment">// Explicitly tells the compiler to generate code for double</span><br></code></pre></td></tr></table></figure>Now <code>template.o</code> <em>will</em> contain the compiled code for these specific types, and the linker can find them. This approach is sometimes used to control code bloat or hide implementation details, but it requires you to know in advance all the types for which the template will be used.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Programming</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[object Object]</title>
    <link href="/2025/05/08/volumetric-clouds/"/>
    <url>/2025/05/08/volumetric-clouds/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graphics Interview Review 2</title>
    <link href="/2025/04/06/interview-review2/"/>
    <url>/2025/04/06/interview-review2/</url>
    
    <content type="html"><![CDATA[<p>I initially decided to put all reviews in one blog, but as I added more and more contents, it seemd to become too long for a single blog. Therefore, I sperate the cpp part (maybe also the computer network and os part? Let’s see if we have enough room for these two parts in this blog, or we need another new blog for them …). Anyway, let’s review cpp basics. Again, this is for interviews in Chinese, so I’ll use English only when it’s necessary.</p><h1 id="c-basics">C++ Basics</h1><h2 id="1-多态虚函数">1. 多态/虚函数</h2><p>虚函数表解决了基类和派生类的继承问题和类中成员函数的覆盖问题，当用基类的指针来操作一个派生类的时候，这张虚函数表就指明了实际应该调用的函数。</p><h3 id="1-多态">(1) 多态</h3><ul><li>定义：同一个接口可以表现出不同行为</li><li>分类：<ul><li>静态多态（编译时）：函数重载、模板函数</li><li>动态多态（运行时）：虚函数机制 + 基类指针调用</li></ul></li><li>动态多态原理：<ul><li>在派生类中重写基类中声明的虚函数，这样使用基类指针或引用指向派生类对象时，可以调用到派生类中重写的函数，从而实现多态。具体见下方虚函数实现原理。</li><li>必须满足条件：<ul><li>基类需要有虚函数<ul><li>PS: 用派生类的指针去访问/调用虚函数时，实际上并未发生动态多态，因为编译时就能确定对象类型为派生类型，然后直接生成调用派生类虚函数的代码即可，这种叫做静态绑定。这里静态绑定是指编译时就能确定函数调用地址，而动态绑定是指在运行时根据对象实际类型，通过 vptr-&gt;vtable 确定调用地址。</li></ul></li><li>子类使用 override 显式重写</li><li>通过<strong>基类</strong>指针或引用调用</li></ul></li></ul></li><li>模板函数多态：根据传递参数的不同类型，自动生成相应类型的函数代码。</li><li>重载函数多态：具体见下方</li></ul><h3 id="2-虚函数实现原理">(2) 虚函数实现原理</h3><p>参考：<br><a href="https://www.geeksforgeeks.org/vtable-and-vptr-in-cpp/">https://www.geeksforgeeks.org/vtable-and-vptr-in-cpp/</a><br><a href="https://csguide.cn/cpp/object_oriented/virtual_function.html#%E5%8A%A8%E6%80%81%E5%A4%9A%E6%80%81%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86">https://csguide.cn/cpp/object_oriented/virtual_function.html#动态多态底层原理</a></p><p>虚函数的实现依赖于虚函数表（vtable）机制。</p><ul><li>当一个类中包含一个虚函数时，编译器会为该类创建一个虚函数表（Virtual Table）。这个表存储着该类的虚函数指针，这些指针指向实际实现该虚函数（most derived function）的代码地址。虚函数表实际类似一个虚函数指针数组。</li><li>每个对象实例（object）都隐含一个指向该类的虚函数表的指针（类成员），这个指针在对象创建时被初始化，通常是作为对象的第一个成员变量。注意仅当该类中有虚函数或继承了虚函数时，才会生成这个 <code>_vptr</code>。</li><li>当调用一个虚函数时，编译器会<strong>通过对象的虚函数指针查找到该对象所属的类的虚函数表</strong>，并<strong>根据函数的索引值（通常是函数在表中的位置，编译时就能确定）来找到对应的虚函数地址</strong>。然后将控制转移到该地址，实际执行该函数的代码。</li><li>对于派生类，其虚函数表通常是在基类的虚函数表的基础上扩展而来的。在派生类中，如果重写了基类的虚函数，那么该函数在派生类的虚函数表中的地址会被更新为指向派生类中实际实现该函数的代码地址。</li></ul><h3 id="3-虚表指针什么时候产生虚函数表如何生成是和类还是对象绑定创建-10-个实例有几个虚函数表">(3) 虚表指针什么时候产生？虚函数表如何生成？是和类还是对象绑定？创建 10 个实例有几个虚函数表？</h3><ul><li><p><strong>虚表指针</strong>什么时候产生？</p><ul><li>在<strong>对象创建时由构造函数自动写入</strong>。编译器会在每个含虚函数的类对象中插入一个隐藏成员指针 vptr，并赋值指向所属类的虚函数表。</li></ul></li><li><p>虚函数表如何生成？</p><ul><li>在<strong>编译时</strong>由编译器为每个含虚函数的类生成。每个含虚函数的<strong>类</strong>对应一个虚表。更准确地说，是编译器在分析了类的声明和继承关系后确定了 vtable 的结构和内容，然后在链接期 (link-time) 将这些信息整合并最终确定。</li><li>表中列出所有虚函数的实际地址，放在编译器生成的<strong>常量区</strong>（.rodata）</li></ul></li><li><p>虚函数表和类/对象的关系？</p><ul><li>vtable 类级别唯一，每个含虚函数的类有且仅有一张 vtable。每个类的虚函数表在内存中是全局唯一的，<strong>所有该类的对象共享同一个虚函数表</strong>。</li><li>vptr 对象级别 每个对象都存一份 vptr，指向对应类的 vtable</li></ul></li><li><p>创建 10 个实例，会有几个虚函数表？</p><ul><li>只有 1 个虚函数表，但每个对象各有 1 个 vptr（通常是 8 字节）</li><li>所有 vptr 都指向同一个类的 vtable</li></ul></li></ul><h3 id="4-虚函数表怎么构建的内存空间连续吗">(4) 虚函数表怎么构建的？内存空间连续吗？</h3><ul><li><p>虚函数表怎么构建的？</p><ul><li>构建方式 (编译器的工作):<ul><li>识别虚函数: 编译器首先扫描类的声明，找出所有被声明为 virtual 的成员函数。</li><li>确定布局: 对于一个没有基类的类，或者一个继承链的顶端基类，其 vtable 通常<strong>按照虚函数在类中声明的顺序，依次存放这些虚函数的地址</strong>。对于派生类，会继承其基类的 vtable 布局。<ul><li>如果派生类重写 (override) 了基类中的某个虚函数，那么在派生类的 vtable 中，对应<strong>基类虚函数的位置会被替换为派生类重写版本的函数地址</strong>。</li><li>如果派生类没有重写某个基类的虚函数，那么该 vtable 条目将继续指向基类中该虚函数的实现（即继承了基类的实现）。</li><li>如果派生类定义了新的虚函数（基类中没有的），这些新虚函数的地址通常会追加到从基类继承的 vtable 条目之后。</li><li>多重继承:<br>如果一个类从多个基类继承（且这些基类都有虚函数），情况会更复杂。对象内部可能包含多个 vptr，分别指向对应基类部分的 vtable；或者只有一个 vptr 指向一个组合式的 vtable，其中包含了处理不同基类虚函数所需的信息和可能的调整“垫片 (thunks)”。</li><li>虚拟继承:<br>虚拟继承使得 vtable 的结构更加复杂，vtable 中可能还需要存储用于<strong>定位共享虚拟基类子对象的偏移量</strong>。</li><li>纯虚函数: vtable 中对应纯虚函数的条目可能指向一个特殊的运行时错误处理函数（例如，在 GCC/Clang 中是 __cxa_pure_virtual），如果意外调用了未被重写的纯虚函数，就会触发这个错误。或者该条目可能为 nullptr。</li></ul></li></ul></li></ul></li><li><p>内存空间连续吗？</p></li></ul><p>是的，单个类的 vtable 本身通常是一个连续的内存块，它本质上是一个函数指针数组（以及可能包含的其他数据）。这种连续性对于通过索引/偏移量快速查找虚函数地址至关重要。</p><ul><li>虚函数表除了虚函数地址还存了什么？<br>除了虚函数地址，虚函数表可能还包含以下内容：<ul><li>类型信息：某些编译器会在虚函数表中存储类型信息（如 <strong>RTTI</strong>，Run-Time Type Information），用于支持动态类型检查（如 dynamic_cast）。</li><li>析构函数地址：虚函数表中通常会包含类的析构函数地址，以确保<strong>通过基类指针删除派生类对象时能够正确调用派生类的析构函数</strong>。</li><li>虚拟基类相关的偏移量: 在使用虚拟继承时，为了能够从派生类对象中正确地定位到共享的虚拟基类子对象的实例，vtable 中可能包含相关的偏移量信息。</li><li>到对象顶部的偏移量: 在某些 ABI 中（如 Itanium C++ ABI，vtable[-1]），vtable 可能包含一个值，表示从当前 vptr 指向的 vtable 位置到对象完整实例起始地址的偏移量。这在多重继承或虚拟继承的情况下，当 vptr 可能不指向对象开头时，对于 dynamic_cast 等操作非常有用。</li></ul></li></ul><h3 id="4-如果一个基类函数不标明为-virtual子类重写了这个函数那指向子类对象的基类指针调用该函数会发生什么">(4) 如果一个基类函数不标明为 virtual，子类重写了这个函数，那指向子类对象的基类指针调用该函数会发生什么？</h3><p>调用的将是基类版本的函数，而不是子类版本的函数。这是因为对<strong>于非虚函数，编译器在编译时就确定了要调用哪个函数版本</strong>。这个决定是基于指针或引用的静态类型 (compile-time type)，而不是它在运行时实际指向的对象的动态类型 (run-time type)，即静态绑定。当派生类中定义了一个与基类中非虚函数同名（且通常参数列表也相同，或者满足隐藏规则）的函数时，派生类的函数会隐藏 (hide) 基类的同名函数。</p><h3 id="5-不实现虚函数会报错吗什么错">(5) 不实现虚函数会报错吗？什么错？</h3><ul><li>不是所有虚函数不实现都会报错，但纯虚函数（= 0）如果不实现，会报错。<ul><li>普通虚函数未被派生类重写，如果基类指针调用虚函数的话就直接调用基类中的实现。</li><li>纯虚函数（= 0）表示类是抽象的，必须在派生类中重写，否则派生类也成为抽象类，不能实例化。<br>如果你试图实例化未重写纯虚函数的类，会在编译时报“无法实例化抽象类”的错误。</li></ul></li></ul><h3 id="6-纯虚函数">(6) 纯虚函数</h3><ul><li>令普通的虚函数=0，从而得到特殊的虚函数，它没有实现，只声明接口，目的是强制派生类必须重写它。</li><li>一个类中 只要有一个纯虚函数，那么这个类就成为了一个 抽象类（abstract class）。<ul><li><strong>抽象类不能实例化对象</strong></li><li>通常用于定义接口或基础模板行为</li><li>继承它的子类需要提供纯虚函数的实现，才能生成对象。如果子类没有实现基类中的纯虚函数，会导致子类本身也成为一个抽象类。这种情况下，子类无法被实例化。如果试图实例化一个没有实现所有纯虚函数的子类对象，编译器会报错提示该类是抽象类，不能实例化。</li></ul></li><li>作用：<ul><li>抽象出一个接口（函数签名）</li><li>不能在该类中实现逻辑（除非你显式写定义，定义后仍不能实例化，但可以在派生类里调用）</li><li>必须在派生类中实现，否则派生类也变成抽象类，不能被实例化</li></ul></li></ul><h3 id="7-哪些函数不能是虚函数">(7) 哪些函数不能是虚函数</h3><p>构造、内联、静态成员、lamda 函数</p><h3 id="8-重载重写隐藏的区别">(8) 重载/重写/隐藏的区别</h3><ul><li>重载（Overload）<ul><li>相同作用域(比如命名空间或者同一个类)内，拥有相同的方法名，但具有不同的参数类型和/或参数数量的方法，返回类型可以相同或不同。</li><li>编译期允许根据所提供的参数不同来调用不同的函数。</li></ul></li><li>重写（Override）<ul><li>重写是指在派生类中，用相同签名实现基类中的虚函数。</li><li>当派生类需要改变或扩展基类方法的功能时，就需要用到重写。</li><li>重写的条件包括：<ul><li>方法具有相同的名称。</li><li>方法具有相同的参数类型和数量。</li><li>方法具有相同的返回类型。</li></ul></li></ul></li><li>隐藏（name hiding）<ul><li>隐藏是指在派生类中声明了一个与基类同名的函数（不管参数/返回类型是否相同），会遮蔽基类中所有同名函数，使其在派生类作用域中不可见。</li><li>怎么解决隐藏？<ul><li>使用 using 声明将基类函数重新引入派生类作用域：</li></ul></li></ul></li></ul><h3 id="9-多继承菱形继承虚继承的影响">(9) 多继承/菱形继承/虚继承的影响</h3><ul><li><p>多继承</p><ul><li><p>每个带虚函数的基类会生成自己的 vtable</p></li><li><p><strong>派生类对象中有多个 vptr</strong></p></li><li><p>派生类的<strong>各个基类子对象在内存中排列是有偏移的</strong>，因此当派生类指针转换为基类指针时，编译器会插入偏移调整逻辑，确保指针准确指向该基类的子对象。<strong>指针偏移（pointer adjustment）</strong> 是 C++ 为了正确支持多态行为而做的底层处理之一。<br>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">fa</span><span class="hljs-params">()</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A::fa()\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">fb</span><span class="hljs-params">()</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;B::fb()\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> : <span class="hljs-keyword">public</span> A, <span class="hljs-keyword">public</span> B &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fa</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;C::fa()\n&quot;</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fb</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;C::fb()\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    C c;<br>    A* ap = &amp;c;  <span class="hljs-comment">// A 是第一个基类，无需偏移</span><br>    B* bp = &amp;c;  <span class="hljs-comment">// B 是第二个基类，bp != &amp;c，发生了偏移！</span><br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Address of c:  &quot;</span> &lt;&lt; &amp;c &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;A* points to:  &quot;</span> &lt;&lt; ap &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;B* points to:  &quot;</span> &lt;&lt; bp &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设输出类似（64 位地址）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Address</span> of c:  <span class="hljs-number">0</span>x7ffeefbff4b0<br><span class="hljs-attribute">A</span>* points to:  <span class="hljs-number">0</span>x7ffeefbff4b0<br><span class="hljs-attribute">B</span>* points to:  <span class="hljs-number">0</span>x7ffeefbff4b8<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><code>&amp;c</code> 是 <code>C</code> 对象的起始地址</li><li><code>A*</code> 是第一个基类，子对象从偏移 <code>0</code> 开始</li><li><code>B*</code> 是第二个基类，子对象从偏移 <code>8</code> 开始（因为 vptr + 对象成员）</li></ul><p>所以：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">B* bp = <span class="hljs-built_in">static_cast</span>&lt;B*&gt;(&amp;c);  <span class="hljs-comment">// 实际是: (void*)((char*)&amp;c + 8)</span><br></code></pre></td></tr></table></figure><p>这就是<strong>指针偏移</strong>，为了使 <code>B*</code> 指针指向 <code>B</code> 部分的子对象，确保访问到正确的 vptr / 成员变量。否则：</p><ul><li>虚函数调用找不到对应 vtable</li><li>成员访问可能读取错误地址</li></ul><p>对象内存布局（简化）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[C object]</span><br>┌──────────────┐<br>│ vptr_A       │ ← <span class="hljs-selector-tag">A</span> 子对象（起始地址）<br>└──────────────┘<br>┌──────────────┐<br>│ vptr_B       │ ← <span class="hljs-selector-tag">B</span> 子对象（偏移 +<span class="hljs-number">8</span>）<br>└──────────────┘<br></code></pre></td></tr></table></figure><ul><li><code>A*</code> 指向 <code>vptr_A</code></li><li><code>B*</code> 指向 <code>vptr_B</code></li></ul></li></ul></li><li><p>菱形继承（diamond inheritance）</p><ul><li><p>总结：菱形继承会导致基类出现多份拷贝，引发资源冗余和二义性。通过 虚继承（为解决多重继承中的菱形继承问题而设计的机制）保证<strong>只保留一份虚基类子对象</strong>（确保基类只会被继承一次，不管有多少条继承路径），并通过额外的虚基偏移表与多层虚表结构，保证在运行时仍可正确解析虚函数。这会增加对象的内部结构复杂度，但是支持多态继承的关键技术。</p></li><li><p>菱形继承就是派生类 D 的两个基类 B 和 C 都继承自同一个基类 A，也就是说 D 有两份 A 的拷贝。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A::f\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> : <span class="hljs-keyword">public</span> A &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> : <span class="hljs-keyword">public</span> A &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> : <span class="hljs-keyword">public</span> B, <span class="hljs-keyword">public</span> C &#123;&#125;;<br></code></pre></td></tr></table></figure><p>PS：类的继承有 3 种方式，对应基类成员在派生类中的访问级别变化（派生类中如何公开基类的成员访问权限给外部）。</p><ul><li>public：保持原有访问权限不变</li><li>protected：public-&gt;protected</li><li>private：public/protected-&gt;private</li></ul></li><li><p>非虚继承下的影响</p><ul><li>D 对象中有 两份 A 的子对象</li><li>每份 A 都有独立的 vptr 和 vtable</li><li>D 对象体积变大，访问 A 成员/虚函数有二义性<br>例如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">D d;<br>d.<span class="hljs-built_in">f</span>(); <span class="hljs-comment">// 编译报错：二义性（B::A 和 C::A 都有 f()）</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>解决方案：虚继承</p><ul><li>实现<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> A &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> A &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> : <span class="hljs-keyword">public</span> B, <span class="hljs-keyword">public</span> C &#123;&#125;;<br></code></pre></td></tr></table></figure><ul><li>D 中只保留 一份 A 子对象</li><li>B 和 C 中的 A 不再独立拥有 vptr</li><li>A 成为一个共享的虚基类（virtual base）</li><li>然而，不同于非虚继承的指针偏移是固定的，虚继承需在运行时动态调整偏移</li></ul></li><li>虚继承下 vtable 的特殊布局<ul><li>虚基类的子对象可能不在派生类开头</li><li>编译器会生成一个特殊的 “虚基偏移表”（virtual base offset table，通常被实现为一个<strong>偏移量数组</strong>），这个表存储在每个含有虚继承的类的虚表（vtable）中，它是编译器在编译含有虚继承的类（如上例中的 B/C）时为该类生成的。注意这里没有单独存在的“虚基表对象”，而是在类的 vtable 中预留了指向虚基类偏移的槽位表中每个条目对应一个虚基类，条目的值是<strong>从派生类对象的起始位置到虚基类子对象起始位置的字节偏移量</strong>。实际的偏移值是由最底层的派生类（如 D）决定的。VBOT 在<strong>运行时</strong>用于动态调整指针，以便访问虚基类的成员。当指向派生类的指针被转换为指向虚基类的指针时，编译器使用 VBOT 来计算基类子对象的正确地址，确保指针指向内存中的正确位置。如果一个类使用了虚继承，则编译期在构造其对象时会自动插入一个隐藏成员虚基表指针（vbptr），在构造函数中另指针指向类的虚基偏移表。注意区别“表”是绑定类的，“指针”是绑定对象实例的。</li><li>内存结构示意：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[D object]</span><br>├── <span class="hljs-selector-tag">B</span> subobject<br>│   └── vptr_B → vtable_B<br>│             → <span class="hljs-attribute">offset</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">A</span><br>├── C subobject<br>│   └── vptr_C → vtable_C<br>│             → <span class="hljs-attribute">offset</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">A</span><br>├── shared <span class="hljs-selector-tag">A</span> subobject<br>│   └── vptr_A → vtable_A<br></code></pre></td></tr></table></figure></li><li><strong>不同于非虚继承，虚继承不能用固定指针偏移，必须运行时查表确定偏移</strong>。这是因为虚基类的内存位置在派生类中是“不固定”的。虚继承支持多路径继承、深度继承、多个派生类共享同一个虚基类，所以编译器不能在某个类定义时就固定虚基类的地址，只能等到最底层派生类生成对象时再确定。<br>对于非虚继承：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-type">int</span> a; &#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">B</span> : <span class="hljs-keyword">public</span> A &#123; <span class="hljs-type">int</span> b; &#125;;<br>B b;<br>A* p = &amp;b;  <span class="hljs-comment">// 偏移是 0（编译期已知 A 在 B 起始位置），直接赋值，无需查表，无运行时开销</span><br></code></pre></td></tr></table></figure>而在上面例子的菱形继承+虚继承中，编译时 B/C 的 vtable 中生成偏移槽（虚基表项）；链接时/最终派生类构建时（如 D），编译器根据 D 的布局计算偏移量，并填入这些槽中；所以最终 D 实例的虚表中就含有完整的偏移信息。</li></ul></li></ul></li></ul></li></ul><h3 id="10-构造函数和析构函数能不能为虚函数">(10) 构造函数和析构函数能不能为虚函数？</h3><ul><li><p>构造函数不能声明为虚函数：</p><ul><li>对象尚未完全构建:虚函数调用的核心在于通过对象的虚函数表指针 (vptr) 找到相应的虚函数表 (vtable)，从而在<strong>运行时</strong>确定调用哪个版本的函数（基类的还是派生类的）。这个 vptr 是在对象构造过程中由构造函数设置的。具体来说，当一个对象的<strong>构造函数开始执行时，vptr 会被设置为指向该类自己的 vtable</strong>。如果存在继承链，<strong>基类的构造函数会先执行</strong>，将其 vptr 指向基类的 vtable；然后派生类的构造函数执行，再将其 vptr 更新为指向派生类的 vtable。如果构造函数本身是虚函数，那么在调用构造函数来创建对象时，对象本身还不存在或者说还没有完成初始化，vptr 尚未被正确设置到指向“最终”派生类型的 vtable。那么，系统将无法确定应该调用哪个“虚拟”版本的构造函数。这就形成了一个“鸡生蛋还是蛋生鸡”的问题：你需要一个完整的对象（包含有效的 vptr）来进行虚函数调用，但构造函数的目的正是去创建和初始化这个对象。</li><li>类型在构造时已确定:当创建一个对象时，我们显式地指定了要创建的对象的具体类型。编译器在编译时就已经确切知道应该调用哪个类的构造函数。虚函数机制是为了<strong>解决通过基类指针或引用调用派生类重写方法时的动态分派问题</strong>——即在编译时不知道指针/引用所指向对象的具体动态类型。但在对象创建的那一刻，类型是明确的，不需要动态分派来选择构造函数。</li></ul></li><li><p>析构函数一般声明为虚函数：析构函数定义成虚函数是为了防止内存泄漏，因为当基类的指针或者引用指向或绑定到派生类的对象时，如果<strong>未将基类的析构函数定义成虚函数 或 子类析构函数未实现</strong>，则会调用基类的析构函数，那么只能将基类的成员所占的空间释放掉，派生类中特有的就会无法释放内存空间导致内存泄漏。</p></li></ul><p>PS: 然而类中默认的析构函数并不是虚函数，这是因为：</p><ul><li>虚函数有运行时成本，需要<strong>额外的内存开销</strong>（生成 vtable、vptr）</li><li>编译器无法知道类是否会被当作基类使用</li><li>所以默认不会加 virtual，只有显式声明或继承虚函数时才会虚化</li></ul><h3 id="11-一个类既不继承也不是子类内部也没有虚函数那它的析构函数需要声明为虚函数吗">(11) 一个类既不继承也不是子类，内部也没有虚函数，那它的析构函数需要声明为虚函数吗？</h3><ul><li>虚析构函数是为了解决“通过基类指针删除派生类对象”时，能正确调用派生类的析构函数。</li><li>题述没有多态行为，也就不会通过基类指针删除派生类对象</li><li>使用虚析构函数的代价<ul><li>虚函数会增加 vtable（虚函数表）和 vptr（虚函数指针），增加内存开销</li><li>调用析构函数时，会有额外的虚表查找开销。</li></ul></li><li>保持非虚析构函数可以减少对象大小和函数调用开销</li></ul><h2 id="2-智能指针">2. 智能指针</h2><ul><li>指针管理的困难<ul><li>资源释放了，指针没有置空。即 p = new … ; delete p; 然后未使 p = nullptr，会造成结果：<ul><li>野指针 （资源释放了指针未置空）</li><li>指针悬挂（多个指针指向同一块内存，资源释放掉之后置空了一个指针，但其他指针不知道）（悬空指针：指向已释放的内存）</li><li>踩内存 （上述两种情况都可能踩内存，就是资源已经释放了，原来的内存变成了别的东西，但仍然试图用野指针去操作它）</li></ul></li><li>没有释放资源，产生内存泄露（忘记释放动态分配的内存）<ul><li>忘记 delete</li><li>if 判断后 return 在 delete 之前</li><li>delete 在抛出异常之后</li></ul></li><li>重复释放资源，引发 coredump</li></ul></li></ul><p>解决指针管理的困难就是使用 RAII 或者 智能指针。</p><p>RAII (Resource Acquisition Is Initialization) ensures that <strong>resources are properly acquired when an object is created and automatically released when the object goes out of scope or is destroyed</strong>.</p><p>简而言之，变量出了作用范围就调用析构函数，从而实现自动管理生命周期。</p><h3 id="1-智能指针类型及各自原理">(1) 智能指针类型及各自原理</h3><p>主要有三种，位于<code>&lt;memory&gt;</code>头文件中。</p><ul><li><p><code>std::unique_ptr&lt;T&gt;</code></p><ul><li>独占所有权</li><li>没有拷贝构造函数所以不允许拷贝，但是使用移动语义，允许移动（std::move）。也就是说不允许 <code>b = a</code>，但允许 <code>b = std::move(a)</code>。这样做就意味着 unique_ptr 一定是独占所有权的。</li><li>适用于独占资源管理（如文件、网络连接）、工厂函数返回值、pImpl (指向实现的指针) 模式</li><li>析构函数中自动删除所管理的对象</li><li>用  <code>std::make_unique&lt;T&gt;(args...)</code>  创建（C++14+）</li></ul></li><li><p><code>std::shared_ptr&lt;T&gt;</code></p><ul><li>共享所有权</li><li>采用<strong>引用计数</strong>，多个 shared_ptr 可共享同一对象（多个指针指向同一个资源），引用计数为 0 时调用析构函数，即最后一个销毁时释放资源</li><li>public 成员函数 use_count() 返回当前引用计数。这个函数是线程安全的因为 use_count 是原子地更新的。</li><li>存在<strong>循环引用</strong>风险，可配合  std::weak_ptr  解决</li><li>用  <code>std::make_shared&lt;T&gt;(args...)</code>  创建，减少内存分配开销</li></ul></li><li><p><code>std::weak_ptr&lt;T&gt;</code></p><ul><li><p>弱引用</p></li><li><p>依赖 shared_ptr，<strong>允许拷贝</strong>，但<strong>不会增加引用计数</strong>（没有 use_count() 函数）</p></li><li><p>用于解决 shared_ptr  循环引用问题，缓存中防止指针悬挂</p></li><li><p>可通过 lock() 获取 shared_ptr，判断对象是否仍然有效</p><ul><li>weak_ptr 是观察者，不拥有对象，不增加引用计数</li><li>如果原对象还活着，lock()返回有效 shared_ptr</li><li>如果对象已经被销毁，lock()返回空指针</li><li>避免了悬空指针访问，非常适用于缓存、监听器、资源管理等场景</li><li>始终使用 lock() 访问 weak_ptr 指向的对象，并检查返回值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">greet</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Hello from MyClass!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::weak_ptr&lt;MyClass&gt; weakRef;<br><br>    &#123;<br>        <span class="hljs-comment">// 创建一个 shared_ptr</span><br>        std::shared_ptr&lt;MyClass&gt; sharedRef = std::<span class="hljs-built_in">make_shared</span>&lt;MyClass&gt;();<br><br>        <span class="hljs-comment">// 赋值给 weak_ptr（不增加引用计数）</span><br>        weakRef = sharedRef;<br><br>        <span class="hljs-comment">// 尝试通过 lock() 安全访问对象</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> locked = weakRef.<span class="hljs-built_in">lock</span>()) &#123;  <span class="hljs-comment">// 返回 shared_ptr</span><br>            locked-&gt;<span class="hljs-built_in">greet</span>();  <span class="hljs-comment">// 输出：Hello from MyClass!</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Object already destroyed!&quot;</span> &lt;&lt; std::endl;<br>        &#125;<br><br>        <span class="hljs-comment">// sharedRef 作用域结束后，对象会被销毁</span><br>    &#125;<br><br>    <span class="hljs-comment">// 再次尝试访问已释放的对象</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> locked = weakRef.<span class="hljs-built_in">lock</span>()) &#123;<br>        locked-&gt;<span class="hljs-built_in">greet</span>();  <span class="hljs-comment">// 不会执行</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Object already destroyed!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>观察者模式</p><ul><li>一种常用的设计模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。当一个对象（称为主题）改变状态时，所有依赖于它的对象（称为观察者）都会得到通知并自动更新。</li><li>这种模式的主要优点是:<ul><li>它支持松耦合。主题不需要知道观察者的具体类，只需要知道它们实现了 Observer 接口。</li><li>它允许动态地添加或移除观察者，而无需修改主题。</li></ul></li><li>潜在的问题：<ul><li>如果观察者过多，通知所有观察者可能会带来性能问题。</li><li>如果观察者和主题之间有循环依赖，可能会导致系统崩溃。</li><li>在多线程环境中使用时，需要特别注意同步问题。</li></ul></li></ul></li><li><p><code>weak_ptr::expired()</code> 来检查判断你观察的对象是否已经被销毁（返回 bool）。只想检测是否过期可以用 expired()，想获取对象 + 安全检查 可以用 lock()。</p></li></ul></li></ul><h3 id="2-shared_ptr-的代码实现主要是构造-赋值和析构">(2) shared_ptr 的代码实现（主要是构造、赋值和析构）</h3><p>源码见：<br><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/include/bits/shared_ptr.h">https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/include/bits/shared_ptr.h</a><br><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/shared_ptr_base.h">https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/shared_ptr_base.h</a><br><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/shared_ptr_atomic.h">https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/shared_ptr_atomic.h</a></p><p>参考：<br><a href="https://medium.com/analytics-vidhya/c-shared-ptr-and-how-to-write-your-own-d0d385c118ad">https://medium.com/analytics-vidhya/c-shared-ptr-and-how-to-write-your-own-d0d385c118ad</a><br><a href="https://zhuanlan.zhihu.com/p/384894475">https://zhuanlan.zhihu.com/p/384894475</a><br><a href="https://csguide.cn/cpp/memory/shared_ptr.html#%E6%89%8B%E5%86%99-shared-ptr">https://csguide.cn/cpp/memory/shared_ptr.html#手写-shared-ptr</a></p><p>内部实现原理</p><ul><li>包含两个指针：一个指向对象，一个指向控制块</li><li>控制块包含引用计数和删除器</li><li>当 shared_ptr 被销毁（例如通过析构函数）或重置（通过 reset 方法）时，计数器减少。</li><li>当引用计数降为 0 时，删除对象和控制块</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySharedPtr</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// MySharedPtr&lt;int&gt; a(new int(100));</span><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MySharedPtr</span><span class="hljs-params">(T* ptr = <span class="hljs-literal">nullptr</span>)</span></span><br><span class="hljs-function">        : _m_ptr(ptr), _m_refcount(new size_t(<span class="hljs-number">1</span>)) &#123;</span>&#125;<br><br>    <span class="hljs-comment">// 拷贝构造</span><br>    <span class="hljs-built_in">MySharedPtr</span>(<span class="hljs-type">const</span> MySharedPtr&amp; other)<br>        : _m_ptr(other._m_ptr), _m_refcount(other._m_refcount) &#123;<br>        ++(*_m_refcount);<br>    &#125;<br><br>    <span class="hljs-comment">// 拷贝赋值</span><br>    MySharedPtr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> MySharedPtr&amp; other) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;other) &#123;<br>            <span class="hljs-built_in">release</span>();<br>            _m_ptr = other._m_ptr;<br>            _m_refcount = other._m_refcount;<br>            ++(*_m_refcount);<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动构造</span><br>    <span class="hljs-built_in">MySharedPtr</span>(MySharedPtr&amp;&amp; other) <span class="hljs-keyword">noexcept</span><br>        : _m_ptr(other._m_ptr), _m_refcount(other._m_refcount) &#123;<br>        other._m_ptr = <span class="hljs-literal">nullptr</span>;<br>        other._m_refcount = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动赋值</span><br>    <span class="hljs-comment">// MySharedPtr&amp; operator=(MySharedPtr&amp;&amp; other) noexcept &#123;</span><br>    <span class="hljs-comment">//     if (this != &amp;other) &#123;</span><br>    <span class="hljs-comment">//         release();</span><br>    <span class="hljs-comment">//         _m_ptr = other._m_ptr;</span><br>    <span class="hljs-comment">//         _m_refcount = other._m_refcount;</span><br>    <span class="hljs-comment">//         other._m_ptr = nullptr;</span><br>    <span class="hljs-comment">//         other._m_refcount = nullptr;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     return *this;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 使用 swap 的移动赋值</span><br>    MySharedPtr&amp; <span class="hljs-keyword">operator</span>=(MySharedPtr&amp;&amp; other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">MySharedPtr</span>(std::<span class="hljs-built_in">move</span>(other)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">MySharedPtr</span>() &#123;<br>        <span class="hljs-built_in">release</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 返回裸指针</span><br>    <span class="hljs-function">T* <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _m_ptr;<br>    &#125;<br><br>    <span class="hljs-comment">// 释放当前资源，并可选替换为新对象</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(T* new_ptr = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>        <span class="hljs-built_in">release</span>();  <span class="hljs-comment">// 释放旧资源</span><br>        <span class="hljs-keyword">if</span> (new_ptr) &#123;<br>            _m_ptr = new_ptr;<br>            _m_refcount = <span class="hljs-keyword">new</span> <span class="hljs-built_in">size_t</span>(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _m_ptr = <span class="hljs-literal">nullptr</span>;<br>            _m_refcount = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>    T&amp; <span class="hljs-keyword">operator</span>*() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> *_m_ptr; &#125;<br>    T* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> _m_ptr; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">use_count</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _m_refcount ? *_m_refcount : <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// swap 成员函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(MySharedPtr&amp; other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        std::<span class="hljs-built_in">swap</span>(_m_ptr, other._m_ptr);<br>        std::<span class="hljs-built_in">swap</span>(_m_refcount, other._m_refcount);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    T* _m_ptr = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">size_t</span>* _m_refcount = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">release</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (_m_refcount_ &amp;&amp; --(*_m_refcount_) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">delete</span> _m_ptr;<br>            <span class="hljs-keyword">delete</span> _m_refcount;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><p><strong>解析</strong>：</p><ul><li><p>explicit 用于修饰（单参数）构造函数或转换函数，防止它们被隐式调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A constructed with &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(A a)</span> </span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">foo</span>(<span class="hljs-number">42</span>);  <span class="hljs-comment">// 错误：不允许隐式转换</span><br>    <span class="hljs-built_in">foo</span>(<span class="hljs-built_in">A</span>(<span class="hljs-number">42</span>));  <span class="hljs-comment">// 明确构造才允许</span><br>&#125;<br><br><span class="hljs-comment">// explicit 也可以用于修饰转换函数</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">bool</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>&#125;;<br><br>B b;<br><span class="hljs-keyword">if</span> (b) &#123; ... &#125;          <span class="hljs-comment">// 可以</span><br><span class="hljs-type">bool</span> x = b;             <span class="hljs-comment">// 错误，不能隐式转换</span><br></code></pre></td></tr></table></figure><ul><li>使用 explicit 修饰 shared_ptr 的构造函数是因为：<ul><li>阻止隐式构造：避免误用裸指针构造，必须显式创建智能指针</li><li>明确表达所有权转移：让开发者明确知道“我把这块资源交给 shared_ptr 管了”</li><li>与 std::shared_ptr 行为一致</li></ul></li></ul></li><li><p>GCC 的源码（尤其是 libstdc++）中，经常会看到变量名像 _M_ptr, _M_refcount, _M_impl，这是习惯的命名风格：</p><ul><li><em>M</em> Member variable，表示类的私有成员</li><li><em>S</em> Static variable，表示静态成员变量</li><li>这样命名的好处可以在复杂实现中清晰地区分公共接口 vs 内部字段，避免变量名冲突</li></ul></li><li><p>构造函数中，使用<code>_m_refcount(new size_t(1))</code>而不是<code>_m_refcount(1)</code>，是因为要在<strong>堆</strong>上分配一块内存来存储引用计数，而不是把引用计数存在栈或对象内部。如果是后者，那 <code>_m_refcount</code> 是一个对象的成员变量本身（栈或类内存储），每个 MySharedPtr 对象都有自己独立的一份 refcount，这就不能实现多个智能指针共享同一个计数。当前代码中 <code>_m_refcount</code> 是一个指针(new 返回的是指向内存的指针)，指向共享控制块中的引用计数，当多个 MySharedPtr 拷贝构造或赋值时，共享同一块引用计数内存，这才实现了多个智能指针指向同一个资源时，它们共享引用计数，且能正确地一起控制释放资源。在真正的标准库实现中，会把强引用计数（多少个 shared_ptr）、弱引用计数(多少个 weak_ptr)、deleter 封装在一个控制块（control block）里，并且这块内存和被管理对象可能是一起分配的（如 make_shared）。当强引用计数减到 0 时，被管理的对象会被删除，控制块中的弱引用计数减到 0 时，控制块本身会被删除。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MySharedPtr</span><span class="hljs-params">(T* ptr = <span class="hljs-literal">nullptr</span>)</span></span><br><span class="hljs-function">      : _m_ptr(ptr), _m_refcount(new size_t(<span class="hljs-number">1</span>)) &#123;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当前代码里的引用计数不是线程安全的，但<code>std::shared_ptr</code>中的引用计数是线程安全的，其中使用了<code>_Atomic_word</code>类型来计数（The type _Atomic_word is a signed integral type supporting atomic operations）。然而，尽管引用计数是线程安全的，其中存储的裸指针并不是线程安全的。也即，<strong>多个线程增减 shared_ptr 的引用计数是线程安全的，但多个线程修改 shared_ptr 指向的对象不是线程安全的（除非对象本身被设计为线程安全的）</strong>。<code>std::shared_ptr</code>的核心职责是管理对象的生命周期（通过共享所有权和引用计数），它确保只要至少有一个 shared_ptr 指向对象，对象就不会被删除。它并不负责同步对<strong>被管理对象本身成员</strong>的访问。</p></li><li><p>当前的简化实现里赋值运算符先调用了 release 释放现有资源。为什么 std::shared_ptr 源代码(<a href="https://gcc.gnu.org/onlinedocs/gcc-11.1.0/libstdc++/api/a00605_source.html">https://gcc.gnu.org/onlinedocs/gcc-11.1.0/libstdc++/api/a00605_source.html</a>)的赋值运算符不删除原有指针？不会有内存泄漏吗？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Yp&gt;<br>_Assignable&lt;_Yp&gt;<br><span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> __shared_ptr&lt;_Yp, _Lp&gt;&amp; __r) <span class="hljs-keyword">noexcept</span><br>&#123;<br>  _M_ptr = __r._M_ptr;    <span class="hljs-comment">//这里不会内存泄露？</span><br>  _M_refcount = __r._M_refcount;<br>  <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br>__shared_ptr(__shared_ptr&amp;&amp; __r) <span class="hljs-keyword">noexcept</span><br>     : _M_ptr(__r._M_ptr), _M_refcount()<br>     &#123;<br>       _M_refcount._M_swap(__r._M_refcount);<br>       __r._M_ptr = <span class="hljs-literal">nullptr</span>;  <span class="hljs-comment">//这里不会内存泄露？</span><br>     &#125;<br></code></pre></td></tr></table></figure><p>这是因为，裸指针的生命周期是由引用计数器控制的, 所以在<code>__shared_ptr</code>的其他地方就不需要管理它了。当引用计数器被回收时指针才被销毁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Ptr, _Lock_policy _Lp&gt;<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">_Sp_counted_ptr</span> <span class="hljs-keyword">final</span> : <span class="hljs-keyword">public</span> _Sp_counted_base&lt;_Lp&gt;<br>  &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">explicit</span><br>    _Sp_counted_ptr(_Ptr __p) <span class="hljs-keyword">noexcept</span><br>    : _M_ptr(__p) &#123; &#125; <span class="hljs-comment">//指针最后是存在了这里</span><br><br>    <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span><br>    _M_dispose() <span class="hljs-keyword">noexcept</span><br>    &#123; <span class="hljs-keyword">delete</span> _M_ptr; &#125; <span class="hljs-comment">//引用计数器回收的时候, 指针才会被删除掉</span><br>    ...<br>  &#125;<br></code></pre></td></tr></table></figure><p>另：为什么拷贝构造里不需要考虑释放资源？因为拷贝构造（<code>T b = a;</code> 或 <code>T b(a);</code>）和拷贝赋值（<code>T a; a = b;</code>）调用的时机不同。</p></li><li><p>移动构造/赋值中被移动的对象要被清空，对于 shared_ptr 是这样的，但对于其他的类不一定（如：<code>std::string</code>）。</p></li><li><p>为什么使用 swap+move 实现移动赋值而不是使用被注释掉的方式？当前的赋值运算符是这样实现的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">MySharedPtr&amp; <span class="hljs-keyword">operator</span>=(MySharedPtr&amp;&amp; other) <span class="hljs-keyword">noexcept</span> &#123;<br>  <span class="hljs-built_in">MySharedPtr</span>(std::<span class="hljs-built_in">move</span>(other)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);  <span class="hljs-comment">// 临时对象构造 + swap</span><br>  <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>即：</p><ul><li>构造一个临时的 shared_ptr（从右值中移动而来）</li><li>与当前对象 swap()：交换所有权</li><li><strong>临时对象离开作用域，原来的资源会被析构释放</strong>。std::move(other) 本身是一个 xvalue（将亡值），MySharedPtr(std::move(other)) 是一个 prvalue（纯右值），它不绑定任何名称，是临时对象。</li></ul><p>这种实现是参考了 gcc 源码的（<a href="https://gcc.gnu.org/onlinedocs/gcc-11.1.0/libstdc++/api/a00605_source.html%EF%BC%89%E3%80%82%E8%BF%99%E6%A0%B7%E5%81%9A%E6%8F%90%E4%BE%9B%E4%BA%86%E5%BC%BA%E5%BC%82%E5%B8%B8%E5%AE%89%E5%85%A8%EF%BC%88%E8%A6%81%E4%B9%88%E6%93%8D%E4%BD%9C%E6%88%90%E5%8A%9F%EF%BC%8C%E8%A6%81%E4%B9%88%E5%AF%B9%E8%B1%A1%E4%B8%8D%E5%8F%98%EF%BC%9A%E6%89%80%E6%9C%89%E6%93%8D%E4%BD%9C%E9%83%BD%E5%9C%A8%E6%9E%84%E9%80%A0%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E6%97%B6%E5%AE%8C%E6%88%90%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%8F%91%E7%94%9F%E5%BC%82%E5%B8%B8%EF%BC%8Cthis">https://gcc.gnu.org/onlinedocs/gcc-11.1.0/libstdc++/api/a00605_source.html）。这样做提供了强异常安全（要么操作成功，要么对象不变：所有操作都在构造临时变量时完成，如果发生异常，this</a> 对象仍然保持原样；一旦临时构造成功，再通过 swap() 原子性地交换资源（不可能失败））保证，避免手动资源释放引发状态不一致，并符合 RAII 和 copy-and-swap 设计风格。<br>另：源码中移动构造函数的实现类似，这里用<code>_M_swap</code>是因为<code>_M_refcount</code>是一个复杂的类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">shared_ptr</span>(shared_ptr&amp;&amp; __r) <span class="hljs-keyword">noexcept</span><br>: _M_ptr(__r._M_ptr), _M_refcount() &#123;<br>    _M_refcount._M_swap(__r._M_refcount);<br>    __r._M_ptr = <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当前的实现并不完整，它缺少了很多 std::shared_ptr 的高级功能，例如<code>shared_ptr&lt;T[]&gt;</code>数组支持、自定义删除器（deleter）、std::make_shared() 和 std::allocate_shared() 函数以及引用计数的线程安全性等。</p></li></ul><hr><p>PS: weak_ptr 的实现？<br>下面代码来自 ChatGPT 尚未经过测试，仅提供一个思路。这里的核心思想就是加入一个弱引用计数<code>weak_count</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span>  <span class="hljs-comment">// for std::swap</span></span><br><br><span class="hljs-comment">// 控制块结构</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ControlBlock</span> &#123;<br>    <span class="hljs-type">size_t</span> shared_count = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">size_t</span> weak_count = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 前置声明</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWeakPtr</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySharedPtr</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MySharedPtr</span><span class="hljs-params">(T* ptr = <span class="hljs-literal">nullptr</span>)</span></span><br><span class="hljs-function">        : _m_ptr(ptr), _m_ctrl(ptr ? new ControlBlock() : nullptr) &#123;</span>&#125;<br><br>    <span class="hljs-comment">// 拷贝构造</span><br>    <span class="hljs-built_in">MySharedPtr</span>(<span class="hljs-type">const</span> MySharedPtr&amp; other)<br>        : _m_ptr(other._m_ptr), _m_ctrl(other._m_ctrl) &#123;<br>        <span class="hljs-keyword">if</span> (_m_ctrl) _m_ctrl-&gt;shared_count++;<br>    &#125;<br><br>    <span class="hljs-comment">// 拷贝赋值</span><br>    MySharedPtr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> MySharedPtr&amp; other) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;other) &#123;<br>            MySharedPtr <span class="hljs-built_in">tmp</span>(other);<br>            <span class="hljs-built_in">swap</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动构造</span><br>    <span class="hljs-built_in">MySharedPtr</span>(MySharedPtr&amp;&amp; other) <span class="hljs-keyword">noexcept</span><br>        : _m_ptr(other._m_ptr), _m_ctrl(other._m_ctrl) &#123;<br>        other._m_ptr = <span class="hljs-literal">nullptr</span>;<br>        other._m_ctrl = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动赋值（使用 swap 技巧）</span><br>    MySharedPtr&amp; <span class="hljs-keyword">operator</span>=(MySharedPtr&amp;&amp; other) <span class="hljs-keyword">noexcept</span> &#123;<br>        <span class="hljs-built_in">MySharedPtr</span>(std::<span class="hljs-built_in">move</span>(other)).<span class="hljs-built_in">swap</span>(*<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">MySharedPtr</span>() &#123;<br>        <span class="hljs-built_in">release</span>();<br>    &#125;<br><br>    T&amp; <span class="hljs-keyword">operator</span>*() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> *_m_ptr; &#125;<br>    T* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> _m_ptr; &#125;<br><br>    <span class="hljs-function">T* <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> _m_ptr; &#125;<br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">use_count</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> _m_ctrl ? _m_ctrl-&gt;shared_count : <span class="hljs-number">0</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(T* new_ptr = <span class="hljs-literal">nullptr</span>)</span> </span>&#123;<br>        <span class="hljs-built_in">release</span>();<br>        <span class="hljs-keyword">if</span> (new_ptr) &#123;<br>            _m_ptr = new_ptr;<br>            _m_ctrl = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ControlBlock</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            _m_ptr = <span class="hljs-literal">nullptr</span>;<br>            _m_ctrl = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(MySharedPtr&amp; other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        std::<span class="hljs-built_in">swap</span>(_m_ptr, other._m_ptr);<br>        std::<span class="hljs-built_in">swap</span>(_m_ctrl, other._m_ctrl);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> U&gt; <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWeakPtr</span>;<br><br>    T* _m_ptr = <span class="hljs-literal">nullptr</span>;<br>    ControlBlock* _m_ctrl = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">release</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (_m_ctrl) &#123;<br>            <span class="hljs-keyword">if</span> (--_m_ctrl-&gt;shared_count == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">delete</span> _m_ptr;<br>                _m_ptr = <span class="hljs-literal">nullptr</span>;<br>                <span class="hljs-keyword">if</span> (_m_ctrl-&gt;weak_count == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">delete</span> _m_ctrl;<br>            &#125;<br>        &#125;<br>        _m_ptr = <span class="hljs-literal">nullptr</span>;<br>        _m_ctrl = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 弱指针</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWeakPtr</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyWeakPtr</span>() = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-comment">// 构造：从 shared_ptr 构造 weak_ptr</span><br>    <span class="hljs-built_in">MyWeakPtr</span>(<span class="hljs-type">const</span> MySharedPtr&lt;T&gt;&amp; shared)<br>        : _m_ptr(shared._m_ptr), _m_ctrl(shared._m_ctrl) &#123;<br>        <span class="hljs-keyword">if</span> (_m_ctrl) _m_ctrl-&gt;weak_count++;<br>    &#125;<br><br>    <span class="hljs-comment">// 拷贝构造</span><br>    <span class="hljs-built_in">MyWeakPtr</span>(<span class="hljs-type">const</span> MyWeakPtr&amp; other)<br>        : _m_ptr(other._m_ptr), _m_ctrl(other._m_ctrl) &#123;<br>        <span class="hljs-keyword">if</span> (_m_ctrl) _m_ctrl-&gt;weak_count++;<br>    &#125;<br><br>    <span class="hljs-comment">// 拷贝赋值</span><br>    MyWeakPtr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> MyWeakPtr&amp; other) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;other) &#123;<br>            MyWeakPtr <span class="hljs-built_in">tmp</span>(other);<br>            <span class="hljs-built_in">swap</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 析构</span><br>    ~<span class="hljs-built_in">MyWeakPtr</span>() &#123;<br>        <span class="hljs-built_in">release</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(MyWeakPtr&amp; other)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>        std::<span class="hljs-built_in">swap</span>(_m_ptr, other._m_ptr);<br>        std::<span class="hljs-built_in">swap</span>(_m_ctrl, other._m_ctrl);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">use_count</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _m_ctrl ? _m_ctrl-&gt;shared_count : <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">expired</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> !_m_ctrl || _m_ctrl-&gt;shared_count == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function">MySharedPtr&lt;T&gt; <span class="hljs-title">lock</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">expired</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">MySharedPtr</span>&lt;T&gt;(*<span class="hljs-keyword">this</span>);  <span class="hljs-comment">// 调用私有构造</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">MySharedPtr</span>&lt;T&gt;();<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySharedPtr</span>&lt;T&gt;;<br><br>    T* _m_ptr = <span class="hljs-literal">nullptr</span>;<br>    ControlBlock* _m_ctrl = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">release</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (_m_ctrl) &#123;<br>            <span class="hljs-keyword">if</span> (--_m_ctrl-&gt;weak_count == <span class="hljs-number">0</span> &amp;&amp; _m_ctrl-&gt;shared_count == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">delete</span> _m_ctrl;<br>            &#125;<br>        &#125;<br>        _m_ptr = <span class="hljs-literal">nullptr</span>;<br>        _m_ctrl = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 供 shared_ptr(lock) 使用的私有构造</span><br>    <span class="hljs-function">MySharedPtr&lt;T&gt; <span class="hljs-title">make_shared</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">MySharedPtr</span>&lt;T&gt;(*<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 允许 lock() 构造 shared_ptr</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySharedPtr</span>&lt;T&gt;;<br><br>    <span class="hljs-comment">// 私有构造 shared_ptr from weak_ptr</span><br>    <span class="hljs-built_in">MySharedPtr</span>(<span class="hljs-type">const</span> MyWeakPtr&lt;T&gt;&amp; weak)<br>        : _m_ptr(weak._m_ptr), _m_ctrl(weak._m_ctrl) &#123;<br>        <span class="hljs-keyword">if</span> (_m_ctrl) _m_ctrl-&gt;shared_count++;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-stdmake_shared相比stdshared_ptrlttgtnew-targs-有什么好处">(3) <code>std::make_shared</code>相比<code>std::shared_ptr&lt;T&gt;(new T(args...))</code>  有什么好处？</h3><p>参考：<br><a href="https://www.geeksforgeeks.org/std-make-shared-in-cpp/">https://www.geeksforgeeks.org/std-make-shared-in-cpp/</a></p><p>当我们创建一个指向已存在对象的共享指针时，会发生 3 次不同的内存分配。一次用于控制块，一次用于对象，一次用于 shared_ptr 本身。但是使用 std::make_shared()，只有两次内存分配。一次用于 shared_ptr，另一次用于控制块和对象。这比传统的共享指针效率更高。</p><ul><li>避免额外的内存分配+提高缓存命中率：<code>std::make_shared</code>会在一次内存分配中把对象本体和控制块(引用计数)放在一个内存块里，只调用一次 new，而<code>std::shared_ptr&lt;T&gt;(new T(args...))</code>需要两次分别分配。这不仅减少了 malloc/free 的开销，还能提高缓存命中率（前者控制块和对象连续）。</li><li>减少异常安全问题：<code>std::shared_ptr&lt;T&gt;(new T(args...))</code>是两个独立的操作，new T(args…)  可能会抛出异常，造成对象已构造，控制块未构造，从而内存泄漏的结果。<code>std::make_shared</code>进行的是原子操作，先分配统一内存，再构造对象和控制块，构造失败直接回滚，不存在这个问题。</li><li>代码更简洁：<code>auto ptr = std::make_shared&lt;T&gt;(args...)</code>比<code>auto ptr = std::shared_ptr&lt;T&gt;(new T(args...))</code>更简短，可读性更好。前者还避免了手写 new。</li></ul><h3 id="4-shared_ptr-线程安全">(4) shared_ptr 线程安全</h3><p>std::shared_ptr 的线程安全性由内部引用计数的原子操作来保证（类似<code>std::atomic&lt;size_t&gt;</code>的无锁原子操作完成，不需要全局或 mutex 加锁）。</p><ul><li>shared_ptr 的引用计数递增/递减是线程安全的<ul><li>多个 shared_ptr 拷贝同一个对象(增/减引用计数是线程安全的)</li><li>多个 shared_ptr 同时析构(引用计数为 0 时释放资源只发生一次)</li></ul></li><li>每个 shared_ptr 实例是非线程安全的，不要在多个线程中同时修改同一个对象(需加锁)</li></ul><h3 id="5-shared_ptr-怎么实现多指针指向同一个地址引用计数如何保证不同类实例的指针之间共享同步">(5) shared_ptr 怎么实现多指针指向同一个地址/引用计数如何保证不同类实例的指针之间共享同步</h3><p>所有共享同一个对象的 shared_ptr 实例内部都持有指向同一个控制块的<strong>指针</strong>。</p><h3 id="6-循环引用会在什么情况下产生如何解决解决的原理">(6) 循环引用会在什么情况下产生，如何解决，解决的原理</h3><ul><li><strong>循环引用</strong>是指多个对象通过智能指针互相引用，导致引用计数永远不为零，进而导致内存泄漏。</li><li><strong><code>std::shared_ptr</code></strong> 的引用计数机制导致循环引用问题。</li><li>使用 <strong><code>std::weak_ptr</code></strong> 可以打破循环引用，因为它不会增加引用计数，从而避免了内存泄漏。</li></ul><p>如下例，假设有两个类 <code>A</code> 和 <code>B</code>，它们互相持有对方的 <code>std::shared_ptr</code>，形成了循环引用。当 <code>main</code> 函数返回时，<code>a</code> 和 <code>b</code> 虽然超出了作用域，但因为两者仍通过智能指针互相引用，导致引用计数无法归零，因此它们的析构函数不会被调用，不会释放相应的内存，导致内存泄漏。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>;  <span class="hljs-comment">// 前向声明</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    std::shared_ptr&lt;B&gt; ptrB;  <span class="hljs-comment">// A 持有 B 的智能指针</span><br>    <span class="hljs-built_in">A</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A created\n&quot;</span>; &#125;<br>    ~<span class="hljs-built_in">A</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A destroyed\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    std::shared_ptr&lt;A&gt; ptrA;  <span class="hljs-comment">// B 持有 A 的智能指针</span><br>    <span class="hljs-built_in">B</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;B created\n&quot;</span>; &#125;<br>    ~<span class="hljs-built_in">B</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;B destroyed\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::shared_ptr&lt;A&gt; a = std::<span class="hljs-built_in">make_shared</span>&lt;A&gt;();<br>    std::shared_ptr&lt;B&gt; b = std::<span class="hljs-built_in">make_shared</span>&lt;B&gt;();<br><br>    a-&gt;ptrB = b;  <span class="hljs-comment">// A 持有 B</span><br>    b-&gt;ptrA = a;  <span class="hljs-comment">// B 持有 A</span><br><br>    <span class="hljs-comment">// 到这里，a 和 b 形成了循环引用</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>循环引用的解决方案是引入 <strong><code>std::weak_ptr</code></strong>。<code>std::weak_ptr</code> 是一种<strong>非拥有</strong>（non-owning）的智能指针，它不增加引用计数，仅仅作为对所指对象的一个弱引用。</li></ul><p>如下所示将上例中 <code>B</code> 中的 <code>ptrA</code> 修改为 <code>std::weak_ptr</code>，就可以打破循环引用。<code>B</code> 持有 <code>A</code> 的 <code>std::weak_ptr</code>，这不会增加 <code>A</code> 的引用计数，因此，当 <code>a</code> 和 <code>b</code> 超出作用域后，它们的引用计数会归零，从而正常析构，避免了内存泄漏。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>;  <span class="hljs-comment">// 前向声明</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    std::shared_ptr&lt;B&gt; ptrB;  <span class="hljs-comment">// A 持有 B 的智能指针</span><br>    <span class="hljs-built_in">A</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A created\n&quot;</span>; &#125;<br>    ~<span class="hljs-built_in">A</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;A destroyed\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    std::weak_ptr&lt;A&gt; ptrA;  <span class="hljs-comment">// B 持有 A 的弱引用</span><br>    <span class="hljs-built_in">B</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;B created\n&quot;</span>; &#125;<br>    ~<span class="hljs-built_in">B</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;B destroyed\n&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::shared_ptr&lt;A&gt; a = std::<span class="hljs-built_in">make_shared</span>&lt;A&gt;();<br>    std::shared_ptr&lt;B&gt; b = std::<span class="hljs-built_in">make_shared</span>&lt;B&gt;();<br><br>    a-&gt;ptrB = b;  <span class="hljs-comment">// A 持有 B</span><br>    b-&gt;ptrA = a;  <span class="hljs-comment">// B 通过 weak_ptr 持有 A</span><br><br>    <span class="hljs-comment">// 循环引用已被打破，内存将正常释放</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-智能指针构造与析构时间">(7) 智能指针构造与析构时间</h3><p>智能指针的构造时间 = 创建时（或从另一个智能指针拷贝/移动时）<br>智能指针的析构时间 = 作用域结束 或 手动 reset() / = nullptr 时</p><p>但注意：<br>智能指针的析构 不等于 管理的对象立即被释放。</p><ul><li>如果是 unique_ptr，不共享资源所以只要自身析构就立刻释放资源；</li><li>如果是 shared_ptr，管理的对象/资源只有在 最后一个 shared_ptr 析构时才释放；</li></ul><h3 id="8-野指针-悬挂指针的产生原因解决方法">(8) 野指针、悬挂指针的产生原因，解决方法</h3><ul><li>野指针（wild pointer）：指针指向一块未初始化或非法的内存（垃圾地址）<ul><li>解决：<ul><li>定义指针立刻初始化</li><li>尽量用智能指针</li></ul></li></ul></li><li>悬挂指针（dangling pointer）：指针曾经指向合法对象，但该对象已经被销毁或释放<ul><li>产生原因：<ul><li>释放对象后还尝试使用指针<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">delete</span> p;<br>*p = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 悬挂指针：访问已释放内存</span><br></code></pre></td></tr></table></figure></li><li>函数返回局部变量地址返回给外部使用<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">return</span> &amp;x;  <span class="hljs-comment">// 出作用域后 x 已经销毁</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>容器元素引用被无效化（如 vector 扩容重新分配内存）</li></ul></li><li>解决：<ul><li>删除对象后立即把指针置空<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">delete</span> p<br>p = <span class="hljs-literal">nullptr</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="9-gc-语义">(9) GC 语义</h3><p>GC 语义（Garbage Collection Semantics，垃圾回收语义）是指一种自动内存管理机制，用于自动跟踪和释放程序中不再使用的内存资源。与手动内存管理（如 C++中的<code>new</code>/<code>delete</code>）不同，具有 GC 语义的编程语言通过垃圾回收器（Garbage Collector，GC）来自动处理内存回收，从而减少内存泄漏和悬挂指针的风险。</p><ul><li><p>GC 语义的核心概念：</p><ul><li>自动内存管理：垃圾回收器会自动识别那些不再被程序使用的对象，并回收它们占用的内存，而无需程序员显式释放。</li><li>可达性分析：GC 通过追踪哪些对象仍然可以通过变量或其他对象访问来判断对象是否“活跃”（仍然被使用）。无法访问的对象被视为不再需要，可以被回收。</li><li>内存回收：当 GC 检测到某些对象不再被引用时，它会回收这些对象所占的内存，从而避免内存泄漏。</li></ul></li><li><p>常见的 GC 算法：</p><ul><li><strong>标记-清除算法</strong>：GC 首先标记出所有可达的对象，然后清除未被标记的对象，从而回收它们占用的内存。</li><li><strong>引用计数法</strong>：通过维护一个引用计数，每当有一个指针指向对象时，计数增加；当指针不再指向时，计数减少。如果对象的引用计数为零，则可以回收。</li><li><strong>标记-压缩算法</strong>：在标记-清除的基础上，还会进行内存压缩以减少内存碎片。</li><li><strong>分代回收算法</strong>：将内存划分为“新生代”和“老年代”，新分配的对象在新生代进行回收操作，存活较久的对象则移到老年代。</li></ul></li><li><p>GC 语义的优缺点：</p><ul><li>优点：<ul><li><strong>减少内存管理的复杂性</strong>：程序员无需显式地管理内存的分配和释放，降低了手动释放内存时可能出现的错误。</li><li><strong>减少内存泄漏</strong>：通过自动回收内存，降低了内存泄漏的概率。</li><li><strong>避免悬挂指针</strong>：当对象被回收时，GC 会确保它不再被访问，避免了悬挂指针（访问已被释放的内存）。</li></ul></li><li>缺点：<ul><li><strong>性能开销</strong>：GC 的运行会消耗 CPU 资源，有时会导致程序性能下降，尤其是在 GC 暂停程序执行进行内存回收的时候（即“GC 停顿”）。</li><li><strong>不可控性</strong>：程序员无法完全控制内存回收的时间点，可能导致内存使用高峰时 GC 延迟，增加内存消耗。</li></ul></li></ul></li><li><p>常见具有 GC 语义的编程语言：</p><ul><li>Java</li><li>C#：.NET 框架中提供了内置的 GC 机制。</li><li>Python：Python 使用<em>引用计数和标记-清除</em>的 GC 方法。</li></ul></li></ul><h2 id="3-类型转换static_cast-dynamic_cast-const_cast-reinterpret_cast">3. 类型转换：static_cast / dynamic_cast / const_cast / reinterpret_cast</h2><h3 id="1-static_castlttgtexpr">(1) <code>static_cast&lt;T&gt;(expr)</code></h3><ul><li>编译时静态类型转换，主要用于：<ul><li>已知安全的类型转换（如基本数据类型的转换，例如 int 转为 float）。它比 C 风格 (T)value 更加安全，具有更明确的语义，并在编译时进行类型检查。</li><li>子类转换为父类（向上转换）。这是因为子类中继承父类所有的成员，转换时只需要切割掉不需要的部分。</li><li>void 指针与其他类型指针转换</li><li>禁止转换 const 属性</li></ul></li><li>不推荐将父类转为子类（向下转换）。如果子类中有父类中没有的成员，后续使用时将无法正常访问成员。</li><li>编译期转换，不做运行时检查，转换成功与否完全靠人负责。</li></ul><h3 id="2-dynamic_castlttgtexpr">(2) <code>dynamic_cast&lt;T&gt;(expr)</code></h3><ul><li>运行时安全类型转换（<strong>仅适用于有虚函数的多态类型</strong>），用于多态继承体系中 安全地将基类指针/引用转换为派生类类型。向下转换时，会做 RTTI（运行时类型信息）检查。</li><li>要求：<ul><li>类型必须是多态类型（即基类有至少一个虚函数）</li><li>失败时返回 nullptr（指针）或抛出 std::bad_cast（引用）</li></ul></li><li>特点：<ul><li>安全但慢，有运行时开销</li><li>适用于运行时需要判断类型的场景（如事件系统、脚本接口）</li></ul></li></ul><h3 id="3-const_castlttgtexpr">(3) <code>const_cast&lt;T&gt;(expr)</code></h3><ul><li><p>不涉及类型变换，只是对类型的修饰属性进行调整，用于添加或移除 const/volatile 限定符。</p></li><li><p>用于移除 const 进行非常量操作（<strong>要保证源对象非 const</strong>否则是未定义行为）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 正确示例：原变量非const（https://mp.weixin.qq.com/s/F8DOLpP6oaZE0V5ay-84jA）</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span> </span>&#123;    <span class="hljs-comment">// 修改非 const 字符数组是安全的    </span><br>  <span class="hljs-type">char</span>* p = <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(str);   <br>  p[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;H&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <br>  <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;hello&quot;</span>;    <br>  <span class="hljs-built_in">modify</span>(str);   <br>  std::cout &lt;&lt; <span class="hljs-string">&quot;Modified string: &quot;</span> &lt;&lt; str &lt;&lt; std::endl;  <span class="hljs-comment">// 输出：Hello    </span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-reinterpret_castlttgtexpr">(4) <code>reinterpret_cast&lt;T&gt;(expr)</code></h3><ul><li>底层位级别强制转换（最危险）。</li><li>在不同类型的指针/整数间强制转换。<ul><li>正确用法如把<code>int*</code>转为<code>char*</code></li><li>错误用法如把<code>int*</code>转为<code>double*</code>(以<code>double*</code>方式访问内存，可能破坏内存布局)</li></ul></li><li>不安全，可能破坏类型系统。避免在普通程序中滥用，通常用于特殊用途（内存布局、设备驱动等）。</li></ul><h2 id="4-move">4. move</h2><h3 id="1-左值右值">(1) 左值右值</h3><ul><li><p>值语义和引用语义</p><ul><li>值语义通常应用在基础类型（如<code>int</code>、<code>double</code>）和自定义类型（如类和结构体，如果类没有进行特殊处理（如自定义拷贝构造函数和赋值运算符），默认情况下会进行成员逐一拷贝）中。对象在赋值或传递给函数时，会进行深拷贝，新的对象有自己<strong>独立的内存空间</strong>，修改该对象不会影响原始对象。值语义的优势在于它能避免副作用，修改副本不会影响原始对象。但是它也有性能开销，尤其是当对象较大时，频繁的深拷贝可能会影响效率。</li><li>引用语义意味着对象只是共享某个值或资源的引用（地址），多个变量指向同一份数据。例如，裸指针，shared_ptr 等。避免大对象拷贝的开销，实现共享状态、多对象同步等。</li><li>值语义表示对象是值本身，复制即独立；引用语义表示对象共享数据，修改互相影响。</li></ul></li><li><p>左值（Lvalue）</p><ul><li>有名字，具有地址，存储在内存中</li><li>可以出现在赋值号  =  的左侧</li><li>可以取地址  &amp;</li><li>变量、对象、数组元素都是左值。</li></ul></li><li><p>右值（Rvalue）</p><ul><li>通常没有地址，存储在寄存器或临时内存中</li><li>不能出现在赋值号  =  的左侧</li><li>不能取地址  &amp;（除非绑定到  const  左值引用）</li><li>字面量、表达式计算结果都是右值。</li><li>纯右值（PRvalue）：真正的右值，如  10, x + y</li><li>亡值（Xvalue）：即将销毁但仍占有资源的对象，如  std::move(obj)</li></ul></li><li><p>左值引用 (<code>T&amp;</code>)</p><ul><li>左值引用绑定到一个可以明确命名、且存在生命周期的对象，即所谓的“左值”。</li><li>特点：<ul><li>可以修改所引用的对象。</li><li>必须引用一个已存在的变量，且该变量有确定的内存地址。</li></ul></li><li>示例：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; ref = x; <span class="hljs-comment">// 左值引用绑定到变量 x</span><br>ref = <span class="hljs-number">20</span>;     <span class="hljs-comment">// 修改 ref 相当于修改 x</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>右值引用 (<code>T&amp;&amp;</code>)</p><ul><li>右值引用专门用于绑定到右值，右值通常是没有名字的临时对象，其生命周期短暂。例如，表达式<code>5</code>或返回的临时值就是右值。</li><li>特点：<ul><li>右值引用允许对临时对象进行操作，如修改或移动。</li><li>主要用于实现，从而提高程序的性能<ul><li><strong>移动语义</strong></li><li><strong>避免不必要的拷贝</strong>.<code>std::move</code>用于<strong>将左值强制转换为右值引用</strong>，从而触发移动语义而非拷贝。<ul><li><code>newString = std::move(origString) &lt;-&gt; newString = std::static_cast&lt;std::string&amp;&amp;&gt;(origString)</code></li></ul></li><li><strong>完美转发</strong>. 将函数参数精确地传递给另一个函数，无论它是左值还是右值。通过结合<code>std::forward</code>和模板，能够编写泛型函数，避免不必要的拷贝。</li></ul></li></ul></li><li>示例：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>&amp;&amp; rref = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 右值引用可以绑定到临时右值</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>判断左/右值引用：std::is_rvalue_reference() / std::is_lvalue_reference()</p></li></ul><h3 id="2-move-原理-移动语义的概念和优势">(2) move 原理 / 移动语义的概念和优势</h3><ul><li><p><code>std::move</code>  的底层原理</p><ul><li><code>std::move()</code>  只是显式地将左值转换为右值，从而触发移动构造或移动赋值，<code>static_cast&lt;T&amp;&amp;&gt;</code>，不会改变对象的生命周期。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">typename</span> std::remove_reference&lt;T&gt;::<span class="hljs-function">type&amp;&amp; <span class="hljs-title">move</span><span class="hljs-params">(T&amp;&amp; t)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">typename</span> std::remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>std::move(a)</code>  只是告诉编译器把对象变成右值（“我允许你偷走这个对象的资源”），但不会修改对象本身。实际移动操作是移动构造函数或移动赋值运算符完成的。</li><li>用完 std::move 的对象还可以用，但状态不再可靠（比如数据被置空），只能销毁或重新赋值。</li></ul></li><li><p><code>std::move</code>的作用</p><ul><li>将左值转换为右值，以触发移动语义</li><li>不会真正“移动”数据，只是改变对象的属性</li><li>用于触发移动构造和移动赋值，避免深拷贝，提高性能。</li></ul></li><li><p><code>std::move_if_noexcept</code> 是 C++ 标准库中的一种安全优化工具，用于在移动构造可能抛异常的情况下，优先选择拷贝构造。常用于 STL 容器实现中，以保证容器在扩容/搬移元素过程中具有强异常安全性。</p></li></ul><h3 id="3-引用折叠">(3) 引用折叠</h3><p><code>std::forward&lt;T&gt;(arg)</code>  通过  <em>引用折叠</em>（Reference Collapsing）和  <em>类型推导</em>  来决定参数是否应该保留右值特性</p><p>例如，通过引用折叠，T&amp;&amp; 自动变成合适的左值引用或右值引用。根据引用折叠规则，只有 T 是非引用类型时，T&amp;&amp; 才真正是右值引用。</p><ul><li><p>如果传左值，T = int&amp;，T&amp;&amp; = int&amp; &amp;&amp;，折叠为 int&amp;；</p></li><li><p>如果传右值，T = int，T&amp;&amp; = int&amp;&amp;</p></li><li><p>std::move(x) 总是转成右值引用 强制“偷资源”（移动语义）；<code>std::forward&lt;T&gt;(x)</code> 保留 T 的值类别（左值或右值）实现完美转发。</p></li></ul><h3 id="4-完美转发-使用场景">(4) 完美转发 (使用场景)</h3><ul><li><p>完美转发 是指在泛型模板函数中，以参数的原始形式（左值或右值）传递给目标函数，从而避免不必要的拷贝或移动操作。<br>如下例，在<code>forwarder</code>函数中，参数<code>T&amp;&amp; arg</code>是一个<strong>万能引用</strong>，可以同时接受左值和右值。如果不用 forward，所有右值都会被当成左值，导致额外拷贝或移动。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span>  <span class="hljs-comment">// for std::forward</span></span><br><br><span class="hljs-comment">// 普通的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; x)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Lvalue reference: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;&amp; x)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Rvalue reference: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-comment">// 模板函数，使用完美转发</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">forwarder</span><span class="hljs-params">(T&amp;&amp; arg)</span> </span>&#123;<br>    <span class="hljs-comment">// std::forward 保持 arg 的原始值类别</span><br>    <span class="hljs-built_in">process</span>(std::forward&lt;T&gt;(arg));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><br>    forwarder(a);        <span class="hljs-comment">// 传递左值</span><br>    forwarder(<span class="hljs-number">10</span>);       <span class="hljs-comment">// 传递右值</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>应用场景：完美转发用于模板函数中，需要将函数参数原样传递给另一个函数（如构造函数、重载函数、系统接口等）。</p><ul><li><p>封装底层系统调用或资源对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... Args&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">log_call</span><span class="hljs-params">(Args&amp;&amp;... args)</span> </span>&#123;<br>    <span class="hljs-built_in">actual_api</span>(std::forward&lt;Args&gt;(args)...); <span class="hljs-comment">// 避免额外构造/拷贝</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><ul><li>封装 OpenGL/DirectX 调用</li><li>CUDA kernel 参数</li><li>网络接口封装器等</li></ul></li><li><p>转发到重载函数（如上述 process()的例子）/ std 函数对象</p></li><li><p>传递构造函数参数（继承构造或成员构造）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>(<span class="hljs-type">int</span>&amp;&amp;);   <span class="hljs-comment">// 移动构造</span><br>    <span class="hljs-built_in">Base</span>(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp;); <span class="hljs-comment">// 拷贝构造</span><br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Derived</span>(Args&amp;&amp;... args) : <span class="hljs-built_in">Base</span>(std::forward&lt;Args&gt;(args)...) &#123;&#125; <span class="hljs-comment">// 转发给父类构造函数</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>意义</p><ul><li><strong>避免不必要的拷贝和移动</strong>：通过完美转发，我们可以根据参数的实际类型（左值或右值）来决定如何处理，从而避免不必要的对象拷贝或移动操作，提升程序性能。</li><li><strong>提升泛型函数的灵活性</strong>：完美转发使得模板函数能够接受各种类型的参数，并且在不影响效率的前提下将参数传递给其他函数。</li></ul></li></ul><h3 id="5-拷贝构造函数和移动构造函数的区别">(5) 拷贝构造函数和移动构造函数的区别？</h3><ul><li>定义方式：拷贝构造 T(const T&amp; other)，移动构造 T(T&amp;&amp; other)</li><li>参数类型：拷贝构造接收左值引用（const T&amp;），移动构造接收右值引用（T&amp;&amp;）</li><li>调用时机：拷贝构造用已有对象初始化新对象，移动构造用临时对象 / 将亡值初始化新对象</li><li>行为：拷贝构造是复制所有资源，而移动构造是资源转移（偷取资源，避免复制）</li><li>例：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">A</span>(<span class="hljs-type">const</span> A&amp; other) &#123;<br>      data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*other.data); <span class="hljs-comment">// 深拷贝</span><br>  &#125;<br>  <span class="hljs-built_in">A</span>(A&amp;&amp; other) <span class="hljs-keyword">noexcept</span> &#123; <span class="hljs-comment">// 如果是 const A&amp;&amp;，就不能修改 other 的内容，那就无法移动，只能拷贝</span><br>      data = other.data;       <span class="hljs-comment">// 直接“偷走”指针</span><br>      other.data = <span class="hljs-literal">nullptr</span>;    <span class="hljs-comment">// 置空原始对象</span><br>  &#125;<br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span>* data;<br>&#125;;<br></code></pre></td></tr></table></figure>PS: noexcept 是用于声明一个函数不会抛出异常的关键字，用来告诉编译器：“这个函数保证不会抛出异常”。那为什么移动构造函数/移动赋值函数要加 noexcept？因为标准容器（如 std::vector）在扩容时优先使用 noexcept 的移动构造函数。例如当执行 push_back(A)时，会优先用移动构造，如果这里移动构造不是 noexcept，退而求其次才会用拷贝构造。</li></ul><h2 id="5-哈希冲突">5. 哈希冲突</h2><p>STL 中的 <code>std::unordered_map</code>, <code>std::unordered_set</code>, <code>std::unordered_multimap</code>, <code>std::unordered_multiset</code>底层使用哈希表实现的，可能会发生哈希冲突。哈希冲突是哈希表这种数据结构在实际应用中几乎不可避免的现象。</p><ul><li><p><strong>为什么会发生哈希冲突</strong></p><ul><li><strong>哈希函数的特性</strong>：哈希函数的作用是<strong>将任意长度的键 (key) 映射为一个固定大小的整数（哈希值）</strong>。理想情况下，不同的键会映射到不同的哈希值，但实际上很难找到一个“完美”的哈希函数能够对所有可能的输入都产生唯一的哈希值，尤其是当键的可能取值范围非常大，而哈希值的范围（通常对应内部桶数组的索引）相对有限时。</li><li><strong>桶数量有限</strong>：<code>std::unordered_map</code> 内部使用一个数组（称为<strong>桶数组</strong>）来存储元素。这个数组的大小是有限的。哈希值通常会通过取模运算（<code>hash_value % bucket_count</code>）转换成桶数组的索引。不同的哈希值在取模后可能得到相同的索引。</li><li><strong>鸽巢原理 (Pigeonhole Principle)</strong>：当要存储的键的数量超过了哈希表内部桶 (bucket) 的数量时，根据鸽巢原理，必然至少有两个键会映射到同一个桶，从而产生冲突。即使键的数量少于桶的数量，由于哈希函数分布的不完美，也可能发生冲突。</li></ul></li><li><p><strong>如果发生了哈希冲突，<code>std::unordered_map</code> 如何解决？</strong></p></li></ul><p>目前主流的 C++ 标准库实现（如 libstdc++/GCC, libc++/Clang, MSVC STL）通常采用<strong>拉链法 (Separate Chaining)</strong> 来解决哈希冲突：</p><ul><li><p><strong>拉链法 (Separate Chaining)</strong>：</p><ul><li><strong>原理</strong>：在拉链法中，哈希表的每个“桶” (bucket) 并<strong>不直接存储单个元素，而是存储一个指向数据结构（通常是链表 (linked list)）的指针或头部</strong>。所有<strong>哈希到同一个桶索引的键值对 (key-value pair) 都会被存储在该桶对应的链表中</strong>。</li></ul></li><li><p><strong>负载因子 (Load Factor) 与动态扩容 (Rehashing)</strong>：</p><ul><li>虽然拉链法可以处理任意数量的冲突，但<strong>如果单个链表过长，查找效率就会从 O(1) 退化到 O(N)（其中 N 是链表长度，最坏情况下是所有元素都在一个链表里）</strong>。</li><li>为了维持较好的平均性能，<code>std::unordered_map</code> 会监控其<strong>负载因子 (load factor)</strong>。负载因子定义为：<code>元素数量 / 桶的数量</code>。</li><li>当负载因子超过一个阈值（可以通过 <code>max_load_factor()</code> 查询和设置，默认值通常在 1.0 左右）时，<code>std::unordered_map</code> 会自动进行<strong>重新哈希 (rehash)</strong> 或称为<strong>扩容</strong>的操作：<ul><li>创建一个新的、更大的桶数组（通常是原大小的两倍左右或下一个素数）。</li><li>遍历旧桶数组中的所有元素。</li><li>对于每个元素，<strong>使用新的桶数量重新计算其哈希索引</strong>，并将其插入到新桶数组的对应位置。</li></ul></li><li>重新哈希是一个成本较高的操作（时间复杂度为 O(N)，其中 N 是元素总数），但它能有效缩短链表的平均长度，从而保证后续操作的平均 O(1) 复杂度。这个开销在多次操作中被分摊掉了。</li></ul></li><li><p><strong>实践</strong></p><ul><li><strong>提供好的哈希函数</strong>：对于<strong>自定义类型作为键</strong>，用户需要特化 <code>std::hash&lt;YourType&gt;</code> 模板，并提供一个高质量的哈希函数。一个好的哈希函数应该能将键尽可能均匀地分布到不同的哈希值，以减少冲突。</li><li><strong>提供正确的 <code>operator==</code></strong>：<code>std::unordered_map</code> 在处理哈希冲突（即在链表中查找具体键）时，依赖于键类型的 <code>operator==</code> 来判断两个键是否相等。</li></ul></li></ul><h2 id="6-如何设计一个内存池">6. 如何设计一个内存池</h2><h2 id="7-lamda-函数">7. lamda 函数</h2><h3 id="1-lambda-引用陷阱">(1) lambda 引用陷阱</h3><p>Lambda 函数捕获了外部作用域中的一个或多个变量的引用，但是当这个 Lambda 函数稍后被调用执行时，这些被引用的原始变量已经超出了其生命周期（即已经被销毁）。此时，Lambda 函数内部持有的引用就变成了悬垂引用，访问这些引用将导致未定义行为 (Undefined Behavior)，通常表现为程序崩溃、数据损坏或不可预测的结果。</p><h2 id="8-类">8. 类</h2><h3 id="1-空类中默认的成员函数">(1) 空类中默认的成员函数</h3><ul><li>空类默认有 6 个函数（构造、析构、拷贝/移动构造、拷贝/移动赋值）。<ul><li>默认构造函数：Empty::Empty()，创建空对象</li><li>拷贝构造函数：Empty::Empty(const Empty&amp;)，用另一个对象初始化</li><li>拷贝赋值运算符：Empty&amp; operator=(const Empty&amp;)，拷贝对象</li><li>移动构造函数：Empty::Empty(Empty&amp;&amp;)，从另一个临时对象移动（C++11）</li><li>移动赋值运算符：Empty&amp; operator=(Empty&amp;&amp;)，移动赋值（C++11）</li><li>析构函数：Empty::~Empty()，对象销毁时调用</li></ul></li><li>C++11 之后，如果显式定义了任意构造/赋值/析构函数，有些默认函数不会再自动生成。例如假如手写了析构函数，那么编译器就不会自动生成移动构造和移动赋值函数（需要自己定义）。</li><li>用 = default 显式让编译器生成默认版本，例如：<code>Empty() = default;</code></li></ul><h3 id="2-类的大小决定因素">(2) 类的大小决定因素</h3><p>总览：</p><table><thead><tr><th>因素</th><th>是否影响类的大小</th><th>说明</th></tr></thead><tbody><tr><td>非静态成员变量</td><td>是</td><td>实际参与对象内存布局</td></tr><tr><td>内存对齐 / 填充</td><td>是</td><td>编译器会插入 padding</td></tr><tr><td>虚函数表指针（vptr）</td><td>是</td><td>有虚函数的类，每个对象需一个 vptr</td></tr><tr><td>静态成员变量</td><td>否</td><td><strong>属于类，不属于对象</strong>，不计入对象大小</td></tr><tr><td>成员函数（非虚）</td><td>否</td><td>属于类代码段，不影响对象内存布局</td></tr><tr><td>继承层级本身</td><td>取决于是否虚继承</td><td>普通继承只把父类数据拷进子类布局，虚继承产生虚基表指针</td></tr></tbody></table><ul><li><p>其他的都很直观，这里给出一个虚表指针和一个多继承和虚继承的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;&#125; <span class="hljs-comment">// sizeof(C) = 8（64 位系统下），因为多了一个虚函数表指针 vptr</span><br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Base1</span> &#123; <span class="hljs-type">int</span> a; &#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Base2</span> &#123; <span class="hljs-type">int</span> b; &#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">D</span> : Base1, Base2 &#123; <span class="hljs-type">int</span> c; &#125;;<br><span class="hljs-comment">// size = 12（3个int），可能是 16 due to alignment</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">E</span> : <span class="hljs-keyword">virtual</span> Base1 &#123; <span class="hljs-type">int</span> x; &#125;;<br><span class="hljs-comment">// size = 16+（2个int+虚表指针），因为要存虚基表指针（vbptr）</span><br></code></pre></td></tr></table></figure></li><li><p>空类的大小是 1 字节（尽管有 6 个默认函数也不是 6，尽管什么成员变量都没有也不是 0），因为 C++ 标准规定<strong>每个对象必须有唯一地址</strong>，哪怕没有成员也必须至少占 1 字节，<strong>避免多个对象占用同一地址</strong>。</p></li><li><p><code>sizeof()</code>查看类的大小，或者用 <code>alignof()</code> 查看对齐情况，使用 <code>std::is_empty&lt;T&gt;</code> 检查是否为空类。</p></li></ul><h2 id="9-c内存对齐机制">9. c++内存对齐机制</h2><ul><li>内存对齐是指 编译器在给结构体或变量分配内存时，按照特定规则将变量放在特定地址上的过程，通常这个地址是变量大小或平台对齐要求的整数倍。</li><li>例如，下面结构体分配内存时，不是紧凑排布成 5 字节，而是 a 占用第 0 字节，b 会被放到第 4 字节（从第 4 字节开始）对齐地址（地址 % 4 == 0），所以总大小是 8 字节。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-type">char</span> a;   <span class="hljs-comment">// 1 byte</span><br>  <span class="hljs-type">int</span> b;    <span class="hljs-comment">// 4 bytes</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>为什么要内存对齐？<ul><li>硬件访问效率：大部分硬件架构（x86, ARM）要求变量必须对齐访问，否则性能下降甚至抛异常</li><li>避免硬件异常：某些 CPU 不支持非对齐内存访问，比如 <code>int*</code> 不能从奇地址读取</li><li>提高缓存效率：对齐能提高 cache line 命中率</li><li>满足 ABI 要求：编译器/链接器/系统 ABI 规定数据结构布局方式，必须对齐</li></ul></li><li>编译器如何处理对齐？<ul><li>编译器会自动插入 padding 字节（填充），确保每个成员的地址满足它的对齐需求</li></ul></li><li>如何查看结构体对齐信息？<ul><li>使用 <strong>sizeof()</strong> 观察结构体大小。如上例中 sizeof(A)的结果是 8。</li></ul></li><li>C++11 起可用 alignas 强制让 S 的实例按 16 字节对齐（常用于 SIMD 优化、AVX）：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">alignas</span>(<span class="hljs-number">16</span>) S &#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">double</span> b;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-struct-大小">10. struct 大小</h2><h3 id="1-定义一个-struct有-int-xchar-c-两个成员这个结构体的大小">(1) 定义一个 struct，有 int x，char c 两个成员，这个结构体的大小？</h3><ul><li>int x 占 4 字节，char c 占 1 字节</li><li>但由于 对齐要求（int 对齐为 4 字节，整个结构体也需要是最大成员类型的对齐倍数）， 编译器会 在末尾补 3 字节填充（padding）</li></ul><h3 id="2-如果增加一个-static-int-这个结构体大小怎么变化">(2) 如果增加一个 static int 这个结构体大小怎么变化？</h3><ul><li>static 成员不属于对象本身，属于类本身，所以它不参与实例的内存布局，编译器不会为 static 成员在对象中分配空间。</li><li>总大小仍是：8 字节</li></ul><h3 id="3-如果在结构体里定义一个虚函数结构体大小怎么变化">(3) 如果在结构体里定义一个虚函数，结构体大小怎么变化？</h3><ul><li>添加虚函数后，结构体拥有一个隐藏的虚函数表指针（vptr）</li><li>vptr 是一个指针，通常在 64 位系统上为 8 字节，通常 vptr 占位于对象的开头（但不强制）</li><li>对齐仍然会生效，总大小为：8 + 4 + 1 + 3 = 16 字节</li></ul><h2 id="11-c的动态链接静态链接">11. c++的动态链接静态链接</h2><ul><li>C++ 程序编译过程分为三步：预处理、编译、链接</li><li>链接的目的：将多个 目标文件 (.o) 和 库文件 合成最终的可执行文件</li><li>链接分为两种：静态链接 和 动态链接</li></ul><h3 id="1-静态库static-library">(1) 静态库（Static Library）</h3><ul><li>编译时直接把 .lib(windows)/.a(linux) 库的代码（对象文件内容）链接进目标程序</li><li>最终生成的 .exe 或 .out 文件中包含所有库代码，不再依赖外部 .lib / .a</li><li>优点：<ul><li>程序部署方便（无额外依赖）</li><li>启动时加载快</li></ul></li><li>缺点：<ul><li>可执行文件体积大</li><li>多个程序使用同一库会重复占用空间</li><li>更新库需重新编译所有依赖它的程序</li></ul></li></ul><h3 id="2-动态库shared-dynamic-library">(2) 动态库（Shared / Dynamic Library）</h3><ul><li>程序运行时再加载 .dll / .so 文件</li><li>二进制可执行文件中只保留符号引用，不包含实际实现</li><li>优点：<ul><li>可执行文件体积小</li><li>多个程序共享同一份库文件</li><li>可热更新（替换库不需重新编译）</li></ul></li><li>缺点：<ul><li>程序运行时必须找到正确的库（需要安装配置）</li><li>加载稍慢，部署略复杂</li></ul></li></ul><h3 id="3-cmake">(3) cmake</h3><p>笼统地说，cmake 通过 add_library 创建库（static/shared），target_link_libraries() 链接。</p><h2 id="12-c的运行内存分区">12. c++的运行内存分区</h2><ul><li><p>栈：目前绝大部分 CPU 体系都是基于栈来运行程序，栈中主要存放函数的<strong>局部变量、函数参数、返回地址</strong>等，栈空间一般由操作系统进行默认分配或者程序指定分配，栈空间在进程生存周期一直都存在，当进程退出时，操作系统才会对栈空间进行回收。</p></li><li><p>堆：动态申请的内存空间，就是由 malloc / new 分配的内存块，由 delete / free 手动控制释放，可以在程序运行周期内随时进行申请和释放（生命周期由开发者管理），如果进程结束后还没有释放，操作系统会自动回收。</p></li><li><p>全局区（Global Area）/静态存储区：存放全局变量和静态变量，程序运行结束操作系统自动释放（生命周期：从程序开始到结束）。</p><ul><li>已初始化的全局/静态变量（Data 段）</li><li>未初始化的全局/静态变量（BSS 段）</li></ul></li><li><p>常量存储区：存放的是<strong>常量</strong>（const），不允许修改，程序运行结束自动释放。</p><ul><li>全局常量、字符串常量（.rodata 常量区）（虚函数表存储在这里）</li></ul></li><li><p>代码区：存放程序的机器指令，<strong>只读</strong>不允许修改，但可以执行。编译后的二进制文件存放在这里。</p></li></ul><h3 id="1-如何在栈上分配一定的内存会有什么问题">(1) 如何在栈上分配一定的内存？会有什么问题？</h3><ul><li>直接使用局部变量/数组。</li><li>问题：<ul><li>栈空间大小有限（一般几百 KB 到几 MB），分配太大可能引发栈溢出（stack overflow）。例如递归中误分配过多栈内存会 crash。</li><li>作用域结束就被释放，不能跨函数或返回出去使用局部数组（指针悬空）。</li></ul></li><li>解决：<ul><li>使用<code>std::vector</code>：自动管理内存（默认分配在堆上）</li><li>使用<code>std::array&lt;T, N&gt;</code>：固定长度数组，标准安全的栈上分配</li></ul></li></ul><h3 id="2-常见内存泄漏的情况">(2) 常见内存泄漏的情况</h3><p>内存泄漏：程序中<em>申请了内存但没有释放</em>，导致内存长期占用，最终消耗完系统资源。</p><ul><li><p>使用 new / malloc 后没有调用 delete / free （堆内存泄露）</p></li><li><p>类的析构函数中没有释放</p></li><li><p>函数内多路径提前 return / 抛出异常，因此没有跑后面清理资源的部分（使用智能指针解决）</p></li><li><p>指针被重新赋值，导致原内存无法访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">100</span>];<br>p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">50</span>];     <span class="hljs-comment">// 原来的 100 个 int 泄漏</span><br><span class="hljs-keyword">delete</span>[] p;          <span class="hljs-comment">// 只释放了新分配的 50 个</span><br></code></pre></td></tr></table></figure></li><li><p>容器中的裸指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>*&gt; vec;<br>vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>));<br>vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>));<br><span class="hljs-comment">// 容器析构不会自动释放指针元素，泄漏</span><br></code></pre></td></tr></table></figure></li><li><p>数组泄漏原因，使用  new[]  分配数组但未使用  delete[]  释放</p></li><li><p>循环引用，shared_ptr 之间相互引用，引用计数无法归零，无法释放（解决：将其中一方改成 std::weak_ptr）</p></li><li><p>未释放系统资源（文件句柄、网络连接、线程）导致资源泄漏，如 fopen() / fclose() 未配对（解决：使用 RAII 封装资源，例如  std::ifstream  自动管理文件资源）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">threadFunc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t</span><span class="hljs-params">(threadFunc)</span></span>;<br>    <span class="hljs-comment">// t.join(); // 若不调用 join 或 detach，会导致线程泄漏</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多线程中资源释放时机混乱 一个线程 new，另一个线程未 delete</p></li></ul><h3 id="3-如何检查和处理内存泄露的问题">(3) 如何检查和处理内存泄露的问题？</h3><ul><li><p>使用智能指针</p></li><li><p>Windows：Visual Studio 自带检测</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRTDBG_MAP_ALLOC</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;crtdbg.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    _CrtDumpMemoryLeaks();  <span class="hljs-comment">// 程序结束时输出泄漏信息</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Linux：Valgrind</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">valgrind --leak-check=full ./your_program<br></code></pre></td></tr></table></figure><p>输出所有内存分配和未释放位置</p></li></ul><h2 id="13-如何构造一个只能在堆上创建对象的类如何构造一个只能在栈上创建对象的类">13. 如何构造一个只能在堆上创建对象的类？如何构造一个只能在栈上创建对象的类？</h2><ul><li><p>若要构造只能在堆上创建的类，应将构造函数设为私有并通过静态工厂函数（工厂方法是一种创建对象的设计模式，<br>它将对象的创建过程封装在一个静态函数中，而不是让用户直接 new 或构造对象）创建对象；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapOnly</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 构造函数私有，外部不能直接 new 或定义对象</span><br>    <span class="hljs-built_in">HeapOnly</span>() &#123;&#125;<br>    ~<span class="hljs-built_in">HeapOnly</span>() &#123;&#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 提供静态工厂方法，在堆上创建对象</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> HeapOnly* <span class="hljs-title">create</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">HeapOnly</span>();<br>        <span class="hljs-comment">// return std::shared_ptr&lt;MyClass&gt;(new MyClass()); // 或者返回智能指针从而只能通过智能指针创建</span><br>        <span class="hljs-comment">// std::shared_ptr&lt;T&gt;(new T(...)) 是在类内部调用构造函数，有权限访问私有构造；</span><br>        <span class="hljs-comment">// 而 std::make_shared&lt;T&gt;() 是标准库函数模板，在类外部调用构造函数，无法访问私有成员</span><br>    &#125;<br><br>    <span class="hljs-comment">// 提供释放接口（防止 delete 出错）</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(HeapOnly* ptr)</span> </span>&#123;<br>        <span class="hljs-keyword">delete</span> ptr;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>若要构造只能在栈上创建的类，应将 operator new 删除或私有，防止通过 new 分配内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StackOnly</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">StackOnly</span>() &#123;&#125;<br>    ~<span class="hljs-built_in">StackOnly</span>() &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span>)</span> </span>= <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span>) = <span class="hljs-keyword">delete</span>;<br>&#125;;<br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StackOnly</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">StackOnly</span>() &#123;&#125;<br>    ~<span class="hljs-built_in">StackOnly</span>() &#123;&#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span>)</span></span>;<br>    <span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span>);<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="14-c异常处理机制try-catch的工作原理">14. C++异常处理机制（try-catch）的工作原理</h2><ul><li>异常处理的基本语法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 可能抛出异常的代码</span><br>    <span class="hljs-built_in">risky_function</span>();<br>&#125;<br><span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>    <span class="hljs-comment">// 捕获并处理异常</span><br>    std::cerr &lt;&lt; e.<span class="hljs-built_in">what</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>工作原理概览<ul><li>编译阶段：<ul><li>编译器记录每个 try 块关联的 catch 块及其捕获类型。</li><li>同时会在函数中插入清理代码表（unwind table），用于异常时调用析构函数。</li><li>所有能够抛出异常的函数会被标记（除非是 noexcept）。</li></ul></li><li>运行阶段（出现异常时）：<br>当 throw 被执行时：<ul><li>程序开始<strong>栈展开</strong>（stack unwinding）：<ul><li>从当前函数向上传递异常<ul><li>throw 会创建一个临时异常对象（可能复制或移动）</li><li>异常类型匹配靠运行时类型识别（RTTI）</li><li>catch 块通过引用或值接受该对象</li></ul></li><li>查找匹配的 catch 语句</li></ul></li><li>展开过程中：<ul><li><strong>自动调用已构造的局部对象的析构函数</strong>（避免内存泄漏）</li><li>跳过中间代码逻辑</li></ul></li><li>找到合适的 catch 后：<ul><li>跳转执行 catch 块中的代码</li></ul></li><li>若未找到任何 catch 块：<ul><li>调用 std::terminate() 结束程序</li></ul></li></ul></li></ul></li><li>开销<ul><li>常运行时几乎无性能损失</li><li>只有发生异常时才会触发异常处理流程（包括栈展开、类型匹配等）</li><li>所以异常是为处理罕见错误路径而设计，不应用于常规流程控制</li></ul></li></ul><h2 id="15-自动类型推断auto-decltype">15. 自动类型推断：auto / decltype</h2><h3 id="1-auto">(1) auto</h3><ul><li><p>编译器在编译期根据变量的初始值自动确定其数据类型。</p></li><li><p>只能用于变量声明、函数返回类型（C++14 起）</p><ul><li><p>最常用：遍历容器、for 循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = vec.<span class="hljs-built_in">begin</span>(); it != vec.<span class="hljs-built_in">end</span>(); ++it) &#123;   <br>  std::cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : vec) &#123;   <br>  std::cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>不支持无初始化的变量声明</p></li><li><p>会移除顶层 const 和引用</p><ul><li><p>但可以使用<code>auto&amp;</code>推导引用，使用<code>const auto</code>保留常量性。值得注意的是，<code>auto</code>推导的是值类型，而 <strong><code>auto&amp;</code>推导的是引用类型</strong>。引用的目的是提供对原始变量的直接访问，因此它需要保留原始变量的所有类型信息。因此，引用的类型必须与原始变量的类型完全匹配，包括 const 修饰符。这也就是说如果原始变量是 const 的，auto&amp; 推导出的类型会是 const T&amp;。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> a = <span class="hljs-number">42</span>;<br><span class="hljs-keyword">auto</span>&amp; y = a;   <span class="hljs-comment">// y: const int&amp;</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">42</span>;<br><span class="hljs-keyword">auto</span>&amp; z = b;   <span class="hljs-comment">// z: int&amp;</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> x = <span class="hljs-number">30</span>;<br><span class="hljs-keyword">auto</span> c = x;       <span class="hljs-comment">// c 的类型是 int，不是 const int</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> c = x; <span class="hljs-comment">// c 的类型是 const int</span><br></code></pre></td></tr></table></figure></li><li><p><code>auto&amp;&amp;</code>万能引用：会根据初始化表达式的值类别，折叠成适当的引用类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">auto</span>&amp;&amp; a = x;       <span class="hljs-comment">// int&amp; 初始值为左值，推断为 T&amp;</span><br><span class="hljs-keyword">auto</span>&amp;&amp; b = <span class="hljs-number">5</span>;       <span class="hljs-comment">// int&amp;&amp; 初始值为右值，推断为 T&amp;&amp;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-decltype">(2) decltype</h3><ul><li><p><code>decltype(expr)</code> 返回 表达式 <code>expr</code> 的类型，不求值、不构造、不执行</p></li><li><p>可用于函数返回类型推导</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T1, <span class="hljs-keyword">typename</span> T2&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(T1 a, T2 b)</span> -&gt; <span class="hljs-title">decltype</span><span class="hljs-params">(a + b)</span> </span>&#123;   <br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可获取表达式的完整类型（包括 const、引用等）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; b = a;<br><span class="hljs-keyword">decltype</span>(b) x = a;     <span class="hljs-comment">// x 是 int&amp;</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; b = a;<br><span class="hljs-keyword">decltype</span>(b) c = <span class="hljs-number">3</span>; <span class="hljs-comment">// c 是 const int &amp; (可以去 https://cppinsights.io/ 验证)</span><br></code></pre></td></tr></table></figure></li><li><p><code>decltype(auto)</code>：<code>decltype(auto)</code> 是 <code>decltype(expr)</code> 的语法糖，但只能用于变量和函数返回值的类型自动推导。<br>这样就可以“像 auto 一样写代码”，但保留 decltype 的完整类型语义（包括引用和 const）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">42</span>;<br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">getRef</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> a; &#125;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">getRef</span>(); <span class="hljs-comment">// 返回 int（拷贝）</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) <span class="hljs-title">f2</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">getRef</span>(); <span class="hljs-comment">// 返回 int&amp;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里用 auto 推断返回类型会丢失引用，用 decltype(auto)，则无需显式写出 decltype(getRef())，还能保留其完整类型（引用）。</p></li></ul><h3 id="3-为什么不鼓励使用-auto">(3) 为什么不鼓励使用 auto？</h3><ul><li><p>可读性下降</p></li><li><p>容易忽略引用和 const 修饰符：auto 会移除顶层 const 和引用修饰，如果忘记加 auto&amp; 或 const auto&amp;，可能导致拷贝开销或逻辑错误。</p></li><li><p>隐式类型错误：某些情况下 auto 推导出的类型并不是理想的。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> x = <span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">auto</span> i = x / <span class="hljs-number">2</span>;  <span class="hljs-comment">// i 是 double，但可能本来想截断取整得到int</span><br></code></pre></td></tr></table></figure></li><li><p>降低 API 明确性（特别是公共接口）</p></li></ul><h2 id="16-c-11-新特性">16. c++ 11 新特性</h2><h2 id="17-是否了解函数的调用约定">17. 是否了解函数的调用约定？</h2><ul><li>调用函数与被调用函数之间堆栈的平衡是如何实现的？</li><li>函数调用的堆栈平衡具体如何实现？</li><li>栈帧是调用函数生成还是被调用函数生成？</li></ul><h2 id="18-new-和-malloc-的区别-delete-和-free-有什么区别">18. new 和 malloc 的区别 / delete 和 free 有什么区别</h2><ul><li><p>new 和 malloc 的区别</p><ul><li>new 在申请内存的同时，会调用对象的构造函数，对象会进行初始化，malloc 仅仅在堆中申请一块指定大小的内存空间，并不会对内存和对象进行初始化。</li><li>new 是 c++ 中的一个操作符，而 malloc 是 C 中的一个函数。</li><li>new 作为一个运算符可以进行重载，而 malloc 作为一个函数不支持重载。</li><li>new 内存分配成功，返回该对象类型的指针，分配失败，抛出 bad_alloc 异常；而 malloc 成功申请到内存，返回指向该内存的指针；分配失败，返回 NULL 指针。</li><li>new 的空间大小由编译器会自动计算，而 malloc 则需要指定空间大小。</li></ul></li><li><p>delete 和 free 有什么区别</p><ul><li>delete 是 C++ 中的一个操作符，可以进行重载；而 free 是 C 中的一个函数，不能进行重载。</li><li>free 只会释放指向的内存，不会执行对象的析构函数；delete 则可以执行对象的析构函数。</li></ul></li></ul><h2 id="19-lambda-函数">19. Lambda 函数</h2><h2 id="20-指针和引用的区别">20. 指针和引用的区别</h2><ul><li>指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元，即指针是一个实体；而引用跟原来的变量实质上是一个东西，只不过是原变量的一个别名而已。</li><li>可以有 const 指针，但是没有 const 引用；</li><li>指针可以有多级，但是引用只能是一级；</li><li>指针的值可以为空，但是引用的值不能为 NULL，并且引用在定义的时候必须初始化；</li><li>指针的值在初始化后可以改变，即指向其它的存储单元，而引用在进行初始化后就不会再改变。</li></ul><h2 id="21-指针常量-和-常量指针">21. 指针常量 和 常量指针</h2><ul><li><p>记忆方法</p><ul><li>指针常量：指针本身是一个常量。<code>const</code> <strong>靠近指针名</strong>，说明指针本身是常量，地址不能变。</li><li>常量指针：常量的指针。<code>const</code> <strong>靠近数据类型</strong>，说明指针指向的内容是常量，内容不能变。</li></ul></li><li><p>指针常量</p><ul><li>定义：指针本身是一个常量，它的地址不能改变，但可以改变它指向的内容。</li><li>语法：<code>数据类型 *const 指针名;</code></li><li><code>const</code> 关键字修饰的是指针本身。</li><li>特点：<ul><li>指针的地址在初始化后不能更改。</li><li>指针指向的内容可以修改。</li></ul></li><li><strong>例子</strong>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> *<span class="hljs-type">const</span> ptr = &amp;a;  <span class="hljs-comment">// ptr 是一个指针常量，指向 a</span><br>*ptr = <span class="hljs-number">30</span>;            <span class="hljs-comment">// 允许修改 a 的值为 30</span><br><span class="hljs-comment">// ptr = &amp;b;          // 错误：不能改变 ptr 的地址</span><br></code></pre></td></tr></table></figure></li><li><p>常量指针</p><ul><li>定义：指针指向的内容是常量，不能修改，但指针本身的地址可以改变。</li><li>语法：<code>const 数据类型 *指针名;</code> 或 <code>数据类型 const *指针名;</code></li><li><code>const</code> 关键字修饰的是指针指向的内容。</li><li>特点：<ul><li>指针的地址可以更改。</li><li>指针指向的内容不能修改。</li></ul></li><li>例子：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *ptr = &amp;a;  <span class="hljs-comment">// ptr 是一个常量指针，指向 a</span><br><span class="hljs-comment">// *ptr = 30;         // 错误：不能修改 a 的值</span><br>ptr = &amp;b;             <span class="hljs-comment">// 允许：可以改变 ptr 的地址，指向 b</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>应用场景</p><ul><li>指针常量：当需要一个固定指向某个地址的指针时，比如硬件寄存器的地址。</li><li>常量指针：当需要保护数据不被意外修改时，比如传递给函数的参数。</li></ul></li></ul><h2 id="22-重定义问题extern-inline-static">22. 重定义问题（extern / inline / static）</h2><p>函数重定义的背景：如果头文件中直接定义函数，且被多个.cpp 文件包含，会导致链接时重定义错误（multiple definition）。</p><h3 id="1-extern">(1) extern</h3><ul><li><p>用于声明一个变量或函数是在其他文件中定义的，告知编译器“这个符号的定义在别处”，当前只作声明，不要在当前文件重新分配内存或生成代码。</p><ul><li>用于跨源文件共享变量/函数</li><li>避免重复定义（multiple definition）错误</li><li>控制链接属性（external linkage）</li></ul></li><li><p>示例 1：假设有两个 cpp 文件。<br>config.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> globalValue = <span class="hljs-number">42</span>;<br></code></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> globalValue; <span class="hljs-comment">// 在 main.cpp 中用 extern 声明它，避免重复定义</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, globalValue); <span class="hljs-comment">// 输出 42</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>示例 2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 如果在 .h 中定义 const</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> CONST_VALUE = <span class="hljs-number">5</span>; <span class="hljs-comment">// 每个翻译单元都会生成一个副本</span><br><span class="hljs-comment">// 改成这样：</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> CONST_VALUE;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-extern-c">(2) extern “C”</h3><ul><li><code>extern &quot;C&quot;</code>是 cpp 提供的关键字，用于告诉编译器按照 C 语言方式<strong>编译和链接</strong>函数或变量，已解决 C++ <strong>名称修饰</strong>（name mangling）带来的兼容性问题。</li><li>为什么需要 extern “C”?<ul><li>C++ <strong>支持函数重载</strong>，所以编译器会在<strong>编译时修改函数名</strong>，加入参数类型信息；C 语言不支持重载，其函数名在编译后不会被修饰。如果 C++ 直接调用 C 语言函数（没有  extern “C”），链接时找不到匹配的名称，会报  undefined reference  错误。</li><li>PS：VS2022 可以打开 Tools-Command line-Developer command prompt，cd 进入.obj（.o）文件所在的文件夹来分析编译的结果，例如查看符号表。</li></ul></li><li>使用（代码实例见：<a href="https://mp.weixin.qq.com/s/oJDsfqiVLdWTLtcnHKL_tQ%EF%BC%89%EF%BC%9A">https://mp.weixin.qq.com/s/oJDsfqiVLdWTLtcnHKL_tQ）：</a><ul><li>C++调用 C 函数</li><li>C 语言调用 C++ 代码</li><li>适用于：（多个）函数、变量、整个头文件。</li><li>不适用于：C++ 类（C 语言不支持类）、函数重载（C 语言不支持重载）</li><li>C++ 调用 C 库、封装 C 接口给其他语言</li><li>extern “C”  只能用于全局作用域，不能嵌套到局部变量或函数内部。</li><li>用  #ifdef __cplusplus （#endif）确保头文件可在 C 和 C++ 两端兼容。</li><li>适用于 函数和变量，但不能用于 类和重载函数</li></ul></li></ul><h3 id="3-inline-和-extern">(3) inline 和 extern</h3><p>由前述可知，extern 修饰某个函数/变量，可以表明该函数/变量的定义在其他文件中，从而避免重复定义。<br>假设有 test.h, test.cpp, and main.cpp 三个文件。test.h 中定义（实现）一个 func1，test.cpp 和 main.cpp 中都 include 了 test.h，并使用 func1。此时编译 main.cpp 会出现错误。</p><p>由前可知，此错误可以用 extern 或 inline 解决，在 test.cpp 中用 extern 声明外部函数 func1。</p><p>而新特性下的 inline 已经不在表明是否内联，是否内联现在完全由编译器决定。新特性下的 inline 允许函数在多个文件中定义，编译时合并为一份，避免多重定义错误。每个文件中出现的定义都被认为是“同一个函数的多次定义”，链接器不会报错。这样用法主要用于函数，也可用于变量（C++17 起）。在上述例子中，可以在头文件里用 inline 修饰 func1。值得注意的是，不同文件里的多个定义应该完全一样，因为如果定义不同不同编译器可能随机使用某个定义。</p><p>extern 和 inline 的对比：</p><ul><li>编译器行为：extern 是声明符号，定义在别处；inline 允许多次定义（每个 翻译单元 TU 都有）</li><li>是否生成多次拷贝：extern 只在定义处生成；inline 则每个 .cpp 中可能各自展开。注意如果在头文件中使用 inline 定义了一个函数，并在多个 .cpp 文件中包含了这个头文件，不会生成多个冲突的拷贝，也不会导致链接错误。因为编译器+链接器会识别 inline 函数的“唯一定义”，只保留一份。编译器在多个 .cpp 中确实会生成对应的函数体（可能优化为内联），但链接器会做合并处理：只保留一份最终定义。如果启用 LTO（链接时优化），可能根本不生成函数体，而直接内联展开。“生成函数体”是指编译器在每个 .cpp（翻译单元）中把 inline 函数编译为机器码（或中间表示），为后续链接或内联做准备。但“多个拷贝”是指链接时在最终可执行文件或静态库中，保留多个独立的全局符号定义，从而导致重复定义错误或浪费空间。</li><li>使用场景：extern 用于声明全局变量（跨多个文件共享一个全局变量）/ 外部接口；inline 定义 header-only 工具函数 / 模板函数</li></ul><p>PS: 用 static 修饰函数也可以解决重复定义问题，但其原理和使用场景与 extern 和 inline 完全不同。用 static 修饰函数的本质是表明该函数具有内部链接，即该函数<strong>只在当前翻译单元（.cpp 文件）中可见</strong>，不会导出到外部。即使多个 .cpp 文件中有相同名字的 static 函数，它们在编译期也不会冲突，因为它们在链接器眼中是不同的、局部的符号。但是不推荐在头文件中用 static 修饰函数，因为这样会在每个.cpp 都生成一个副本。因此，static 函数的典型用途是：定义仅供当前 .cpp 文件内部使用的辅助函数；避免函数被导出给其他模块使用（隐藏实现细节）；提升封装性、限制可见性。总结就是 static 修饰函数可以解决重定义，但无法共享函数定义；inline  则告诉链接器多个翻译单元中出现相同函数定义是可以的，链接时只保留一个函数定义。</p><h3 id="4-内联函数-和-宏define的区别">(4) 内联函数 和 宏（#define）的区别</h3><p>内联函数是语义完整、类型安全的函数，由编译器在编译阶段决定是否内联；而宏是<strong>预处理器文本替换</strong>，不进行类型检查，容易引发副作用和调试困难。除非必要，现代 C++ 推荐使用 inline 函数代替函数类宏。</p><h2 id="23-vector">23. vector</h2><h3 id="1-vector-底层实现">(1) vector 底层实现</h3><p>基类<code>_Vector_base</code><br>内部有一个 struct，其中有三个重要的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_Vector_impl</span><br>: <span class="hljs-keyword">public</span> _Tp_alloc_type<br>&#123;<br>  pointer _M_start; <span class="hljs-comment">// 指向数据起始位置</span><br>  pointer _M_finish; <span class="hljs-comment">// 指向当前元素末尾（size）</span><br>  pointer _M_end_of_storage; <span class="hljs-comment">// 指向当前可用容量的末尾（capacity）</span><br><span class="hljs-comment">//.....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过 <code>_M_start</code> 到 <code>_M_finish</code> 管理已有元素，<code>_M_end_of_storage - _M_start</code> 就是容量。</p><ul><li><p>内存管理（动态数组）</p><ul><li>所有元素存储在<strong>连续的堆内存块</strong>中</li><li>初始容量通常为 0，插入时自动扩容</li></ul></li><li><p>插入元素</p><ul><li>插入在最后的位置 (<code>push_back()</code>/<code>emplace_back()</code>)：<ul><li>均摊 O(1)</li><li>不是严格保证 O(1)，因为如果发生扩容，要分配一块新的更大的内存（通常是当前容量的两倍），将原内存中的元素复制或移动到新的内存中，然后释放原内存。扩容操作的时间复杂度是 O(n)（其中 n 是当前元素的数量），因为需要复制或移动所有现有元素。</li></ul></li><li>插入不是最后的位置 (<code>insert(pos, x)</code>)：<ul><li>把待插入位置之后的元素全部向后平移一位，再插入元素</li><li>O(n)</li></ul></li></ul></li><li><p>删除元素</p><ul><li>删除最后位置的元素 (<code>pop_back()</code>)：<ul><li><code>_M_finish</code> 往前移动一位</li><li>调用析构删除元素，不释放现有已经申请的内存</li><li>O(1)</li></ul></li><li>删除不是最后 (<code>erase(pos)</code>)：<ul><li>待删除后面所有元素均向前平移一位</li><li>删除元素，不释放现有已经申请的内存</li><li>O(n)</li></ul></li><li>删除所有 (<code>clear()</code>):<ul><li>对所有元素调用析构，但不释放内存</li><li>O(n)</li></ul></li></ul></li><li><p>读取元素</p><ul><li>操作符<code>[]</code></li><li>.at({index}) (比<code>[]</code>多了一个检查界的越界动作，如果越界了直接返回一个无效的位置)<br>以上两种都是返回具体元素的引用，可以帮助修改元素</li></ul></li><li><p>修改元素</p><ul><li>vector 不支持直接修改某个位置的元素，只能通过读取元素获取引用再修改，或者删除之后再加入（效率低）</li></ul></li></ul><h3 id="2-vector-扩容机制">(2) vector 扩容机制</h3><ul><li>当使用 push_back/emplace_back 添加元素时，如果容量 capacity() 已满，就会触发自动扩容，将容量扩展为当前容量的 1.5 到 2 倍（具体实现依编译器而异）。</li><li>扩容会：<ul><li>分配新内存（当前内存的 1.5 到 2 倍）(<code>allocator&lt;T&gt;</code>（默认是 std::allocator）)</li><li>拷贝（或移动）旧元素到新内存</li><li>释放旧内存</li></ul></li><li>优化：如果已知需要存储大量数据，可使用<code>vec.reserve(n)</code>预分配 n 个元素的空间，避免多次扩容。</li><li>在扩容过程中，由于分配了新的内存空间，原内存中的元素被复制或移动到新的位置。这意味着<strong>原来指向 std::vector 中元素的迭代器、指针和引用都会失效，因为它们指向的是旧的内存地址</strong>。例如，假设我们有一个 std::vector，并获取了一个指向其中某个元素的迭代器。然后我们不断向 std::vector 添加元素，导致其扩容。扩容后，原来的迭代器就不再有效，因为它所指向的内存地址已经被释放或覆盖。</li></ul><h3 id="3-emplace_back-vs-push_back-区别与性能">(3) emplace_back() vs push_back() 区别与性能</h3><ul><li>push_back() 接收对象实例，也就是说先构造临时对象，再拷贝/移动进 vector</li><li>emplace_back() 接收构造参数，直接在 vector 的尾部<strong>就地构造</strong>对象</li><li>emplace_back(args…)  原地构造对象，<strong>避免了不必要的拷贝/移动</strong>，相比  push_back(a)  更高效，特别适用于存储复杂对象。</li><li>对于简单数据类型，push_back()和 emplace_back()差别不大；对于复杂对象（如 string、自定义类等），优先使用  emplace_back()  以提升性能。</li></ul><h3 id="4-vector-里加入-10-万数据游戏中有对象的指针指向这些数据这可能有什么问题">(4) vector 里加入 10 万数据，游戏中有对象的指针指向这些数据，这可能有什么问题？</h3><p>vector 发生扩容时会分配更大的内存，将原内存数据拷贝过来，然后释放之前的内存，如果有指针指向此前的地址，释放之后，指针将不能正常访问到此前的数据。</p><h3 id="5-clear-后-capacity-是否改变如何释放多余内存">(5) clear() 后 capacity() 是否改变？如何释放多余内存？</h3><ul><li><code>vec.clear()</code> 只销毁所有元素（调用析构），即 size() 变为 0，但不会释放容量，即 capacity() 不变</li><li>如何释放多余内存：<ul><li><strong>shrink_to_fit()</strong> 释放多余内存（C++11 起）。但注意<strong>不是强制释放</strong>，只是建议行为，不同 STL 实现可能不生效（如某些 libc++ 实现中）。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (vec.<span class="hljs-built_in">capacity</span>() &gt; vec.<span class="hljs-built_in">size</span>() * <span class="hljs-number">2</span>) &#123;   <br>  vec.<span class="hljs-built_in">shrink_to_fit</span>(); <span class="hljs-comment">// 仅在容量远大于实际使用时调用</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>交换清空法（最稳妥）:创建一个临时空 vector，与 v 交换，原内存立即释放，100% 生效，用来释放大容量 vector 内存 （临时 vector 在语句结束后立即被销毁，释放了内存）。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;().<span class="hljs-built_in">swap</span>(v);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-vector-如何快速删除内部某个元素-要求-o1时间复杂度">(6) vector 如何快速删除内部某个元素。（要求 O(1)时间复杂度）</h3><p>将要删除的对象和尾部对象 swap，然后直接 pop_back 即可。</p><h2 id="24-多线程锁">24. 多线程/锁</h2><p>见 <a href="/2024/12/30/multi-threads/"> CPP 多线程通信/锁/死锁 相关</a></p><h2 id="25-从-cpp-源代码到-exe-经过了哪些过程">25. 从 cpp 源代码到 exe 经过了哪些过程？</h2><ul><li>预处理：处理所有以 # 开头的指令。包括：<ul><li>展开 #include</li><li>替换 #define 宏</li><li>判断 #ifdef/#endif</li><li>删除注释等</li></ul></li><li>编译：将预处理后的源码编译成 汇编代码<ul><li>语法检查</li><li>变量和函数作用域检查</li><li>类型检查</li><li>优化（如 inline 展开、常量折叠）</li><li>生成 .s 汇编文件（人类可读）</li></ul></li><li>汇编（Assembly）：汇编器把 .s 汇编代码变成 机器码（二进制目标文件 .obj 或 .o）<ul><li>一个 .cpp 文件生成一个 .obj</li><li>每个 .obj 文件是单独编译的</li><li>含有未解析的符号（函数、全局变量等）</li></ul></li><li>链接：链接器将多个 .obj 文件（以及库文件 .lib/.a）组合为一个 .exe/.out 可执行程序<ul><li>解析符号引用（函数调用、变量地址等）</li><li>分配内存地址</li><li>合并多个代码段（data/text/bss）</li><li>加入启动代码（如 main 的入口 _start）</li></ul></li></ul><h2 id="26-const-constexpr-mutable">26. const / constexpr / mutable</h2><h3 id="1-const">(1) const</h3><ul><li>const 表示“值不能修改”，是运行时常量（编译时无法保证是常量），可用于常量指针、常量函数等。</li><li>可用于任意可赋值表达式。</li><li>不能用于静态数组大小</li><li>性能较低，需运行时计算。</li></ul><h3 id="2-constexpr">(2) constexpr</h3><ul><li>constexpr 表示“在编译期就已知的常量”，是编译时常量（必须在编译期间求值）。</li><li>表达式必须是编译期可求值。</li><li>可用于静态数组大小。</li><li>性能较高，计算结果直接嵌入到编译后的代码中。</li><li>不能使用 constexpr 的情况（<a href="https://mp.weixin.qq.com/s/O2FPCCBlGUckXjfjcwzryA%EF%BC%89%EF%BC%9A">https://mp.weixin.qq.com/s/O2FPCCBlGUckXjfjcwzryA）：</a><ul><li>如果函数的返回值不是编译期常量，则其类型不能是 constexpr。例如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;    <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;  <span class="hljs-comment">// 运行时返回</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">square</span><span class="hljs-params">()</span> </span>&#123;    <br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">getValue</span>() * <span class="hljs-built_in">getValue</span>();  <span class="hljs-comment">// 编译错误：getValue() 不是常量表达式</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>如果函数里包含动态内存的分配（new），则其返回值不能是 constexpr</li><li>表达式里包含运行时输入的变量</li></ul></li></ul><h3 id="3-mutable">(3) mutable</h3><ul><li><p>在 const 成员函数中，编译器默认阻止修改任何成员变量。但有些成员变量实际上是缓存、标记、日志开关等行为上的“非状态性成员”，这时就需要 mutable。</p></li><li><p>mutable 用于允许某个类成员变量在 const 成员函数中被修改 和 修饰 lambda 表达式捕获的变量。注意，mutable 是专为此设计的，即除了用于修饰 lambda 捕获的变量，mutable 只能用于类的非静态成员变量，<em>不能用于普通局部变量或全局变量</em>。同时，mutable  也不能用于静态成员变量，因为  static  变量是全局共享的，不受  const  限制。</p></li><li><p>绕过 const 修饰的唯一合法方式，用于明确标记：这个成员变量不是逻辑上的 const。</p></li><li><p>使用场景：</p><ul><li><p>缓存机制 / 延迟计算（懒加载）（lazy evaluation）：等到真正需要某个值时才进行计算，否则就跳过这次计算。避免提前执行浪费资源，真正需要的时候再计算并缓存结果，避免重复计算（缓存机制）。如下例，getValue() 是 const，但缓存字段用 mutable 修饰，只有第一次调用才会执行计算，后续调用直接返回上次结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyValue</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!cached) &#123;<br>            value = <span class="hljs-built_in">expensiveCompute</span>();  <span class="hljs-comment">// 只执行一次</span><br>            cached = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">expensiveCompute</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Computing...&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>;  <span class="hljs-comment">// 假设这是一个复杂计算</span><br>    &#125;<br><br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">bool</span> cached = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>访问计数/日志记录</p></li><li><p>lambda 表达式中修饰被捕获的变量。lambda 默认捕获的值是<strong>只读副本</strong>，加上 mutable 后可以修改 lambda 内部的副本（<strong>不影响外部</strong>）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">auto</span> f = [x]() <span class="hljs-keyword">mutable</span> &#123;<br>    x++;         <span class="hljs-comment">// 合法：捕获值可修改副本</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="27-如何在-main-之前执行一个函数">27. 如何在 main 之前执行一个函数</h2><ul><li><p>方法一：全局/静态对象的构造函数。C++ 会在 main() 调用之前 自动调用全局/静态对象的构造函数。</p><ul><li><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InitBeforeMain</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">InitBeforeMain</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;初始化代码在 main() 前执行！&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br>InitBeforeMain run_before_main;  <span class="hljs-comment">// 全局对象</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="28-字节序大端序小端序">28. 字节序：大端序/小端序</h2><p><a href="https://mp.weixin.qq.com/s/YobhzS5gYBfYC5DXFXpLRw">https://mp.weixin.qq.com/s/YobhzS5gYBfYC5DXFXpLRw</a></p><h2 id="29-浅拷贝-和-深拷贝">29. 浅拷贝 和 深拷贝</h2><h3 id="1-浅拷贝shallow-copy">(1) 浅拷贝（Shallow Copy）</h3><p>浅拷贝是指在拷贝对象时，仅复制对象的成员变量的值，而不复制其指向的资源。对于指针成员变量，浅拷贝会复制指针的值（即地址），使得<strong>原对象和新对象指向同一块内存区域</strong>。这种方式在对象中没有指针或资源管理需求时是可行的，但在涉及动态内存分配时可能导致问题，如多个对象共享同一资源，进而在析构时出现重复释放(double free)的问题。</p><p>C++ 默认的拷贝构造函数是<strong>浅拷贝</strong>。</p><h3 id="2-深拷贝deep-copy">(2) 深拷贝（Deep Copy）</h3><p>深拷贝是在拷贝对象时，不仅复制对象的成员变量的值，还会<strong>为指针成员变量分配新的内存</strong>，并复制原指针指向的数据。这样，原对象和新对象拥有各自独立的资源，互不影响。深拷贝通常通过<strong>自定义拷贝构造函数和赋值运算符</strong>来实现，确保在对象复制时正确管理资源，避免资源共享带来的问题。</p><h3 id="示例代码">示例代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShallowCopy</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span>* data;<br><br>    <span class="hljs-built_in">ShallowCopy</span>(<span class="hljs-type">int</span> value) &#123;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(value);<br>    &#125;<br><br>    <span class="hljs-comment">// 默认拷贝构造函数（浅拷贝）</span><br>    <span class="hljs-comment">// ShallowCopy(const ShallowCopy&amp; other) = default;</span><br><br>    ~<span class="hljs-built_in">ShallowCopy</span>() &#123;<br>        <span class="hljs-keyword">delete</span> data;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCopy</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span>* data;<br><br>    <span class="hljs-built_in">DeepCopy</span>(<span class="hljs-type">int</span> value) &#123;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(value);<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义拷贝构造函数（深拷贝）</span><br>    <span class="hljs-built_in">DeepCopy</span>(<span class="hljs-type">const</span> DeepCopy&amp; other) &#123;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*other.data);<br>    &#125;<br><br>    <span class="hljs-comment">// 重载赋值运算符（https://mp.weixin.qq.com/s/8-ov2PxY91k2YhCxqqezRQ）</span><br>    DeepCopy&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> DeepCopy&amp; other) &#123;    <br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == &amp;other) &#123;        <br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;   <br>      &#125;   <br>      <span class="hljs-keyword">delete</span> data;  <span class="hljs-comment">// 释放已有内存，防止内存泄漏。如果不释放直接new，会导致原来的 data 指针被覆盖，之前指向的内存失去控制，从而导致内存泄漏。    </span><br>      data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*(other.data));  <span class="hljs-comment">// 深拷贝</span><br>      <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">DeepCopy</span>() &#123;<br>        <span class="hljs-keyword">delete</span> data;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ShallowCopy <span class="hljs-title">obj1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    ShallowCopy obj2 = obj1; <span class="hljs-comment">// 浅拷贝，obj1.data 和 obj2.data 指向同一内存</span><br><br>    <span class="hljs-function">DeepCopy <span class="hljs-title">obj3</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br>    DeepCopy obj4 = obj3; <span class="hljs-comment">// 深拷贝，obj3.data 和 obj4.data 指向不同内存</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>ShallowCopy</code> 类使用默认的拷贝构造函数，导致 <code>obj1</code> 和 <code>obj2</code> 共享同一块内存，这样 obj2  析构时会释放  data，obj1  访问  data  可能出现   悬垂指针（dangling pointer）；而 <code>DeepCopy</code> 类通过自定义拷贝构造函数，实现了对指针成员的深拷贝，使得 <code>obj3</code> 和 <code>obj4</code> 拥有独立的内存.</p><h3 id="智能指针解决问题">智能指针解决问题</h3><p>C++11 提供了  std::shared_ptr  和  std::unique_ptr  以管理资源，避免手动拷贝管理。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartCopy</span> &#123;<br>  <span class="hljs-keyword">public</span>:   <br>    std::shared_ptr&lt;<span class="hljs-type">int</span>&gt; data;    <br>    <span class="hljs-built_in">SmartCopy</span>(<span class="hljs-type">int</span> val) : <span class="hljs-built_in">data</span>(std::<span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(val)) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="30-模板-template">30. 模板 template</h2><h3 id="1-模板的内部实现原理">(1) 模板的内部实现原理</h3><p>模板是一个编译时的过程。核心思想是代码生成 (Code Generation) 和实例化 (Instantiation)。在<strong>实例化</strong>期间，编译器会获取模板的定义，并将模板参数（如 T 或非类型参数）替换为程序员提供的具体类型（如 int、double）或值。这个过程会生成一个针对这些特定参数的普通类或函数的定义。例如，对于<code>std::vector&lt;int&gt;</code>，编译器会生成一个类似于 <code>class vector_int &#123; ... &#125;</code> 的具体类定义（名称是经过修饰的，下面会提到）。对于 <code>std::vector&lt;std::string&gt;</code>，则会生成另一个独立的类定义。由于一个模板可以被多种不同的类型实例化（例如 <code>MyClass&lt;int&gt;</code> 和 <code>MyClass&lt;double&gt;</code>），编译器需要<strong>为每个实例化版本生成唯一的内部名称，以便链接器能够正确区分和链接它们</strong>。这个过程称为<strong>名称修饰</strong>。例如，<code>void foo&lt;int&gt;(int)</code> 和 <code>void foo&lt;char&gt;(char)</code> 在编译后会有不同的符号名。</p><p>这些由模板实例化产生的具体类和函数定义随后会被正常编译，就像手写了这些特定版本的代码一样。编译器会为每个不同的实例化版本生成相应的机器码。模板的定义（不仅仅是声明）通常需要对编译器可见，以便在需要时进行实例化。这就是为什么模板的实现通常放在头文件中。如果编译器在某个编译单元中看到了模板的使用但找不到其定义，它就无法进行实例化（每个 cpp 是独立的 translation unit 分开编译的，如果在一个 cpp 里定义而在另一个 cpp 中使用，就无法找到其定义，具体见<a href="/2025/05/21/cpp-templates/"> cpp-templates</a>）。</p><p>编译器处理模板时，名称查找分两个阶段进行：</p><ul><li>第一阶段 (定义时/解析时): 在模板定义被解析但尚未实例化时，编译器会查找非依赖名称 (non-dependent names)。这些是不依赖于模板参数的名称（例如，全局函数名、在模板外部定义的类型名）。此时会进行基本的语法检查。</li><li>第二阶段 (实例化时): 当模板使用具体类型进行实例化时，编译器会查找依赖名称 (dependent names)。这些是依赖于模板参数的名称（例如，T::member_type 或调用一个参数类型为 T 的函数）。此时会进行涉及具体类型的语义检查。</li></ul><p>这个机制确保了模板在定义时就能捕捉一些错误，同时又能灵活处理依赖于具体实例化类型的操作。</p><p>实例化可以分为显式实例化 (Explicit Instantiation) 与隐式实例化 (Implicit Instantiation):</p><ul><li>隐式实例化: 当在代码中使用一个模板并提供参数时，编译器会自动实例化它（如果尚未实例化）。</li><li>显式实例化: 可以明确指示编译器为特定的模板参数集生成代码。如：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">std</span>::vector&lt;MyClass&gt;; <span class="hljs-comment">// 显式实例化整个类</span><br><span class="hljs-keyword">template</span> <span class="hljs-type">int</span> <span class="hljs-built_in">myFunc</span>&lt;<span class="hljs-type">double</span>&gt;(<span class="hljs-type">double</span>); <span class="hljs-comment">// 显式实例化一个函数模板</span><br></code></pre></td></tr></table></figure><p>这可以用于控制代码生成的位置，有时用于减少编译时间或管理代码大小，尤其是在库的实现中。<code>extern template</code> 声明则可以防止在多个编译单元中重复实例化，以加快编译。</p><h3 id="2-模板声明与实现如何能不在同一个头文件">(2) 模板声明与实现如何能不在同一个头文件</h3><ul><li><strong>将实现放在一个单独的、被声明头文件包含的实现文件（通常是 <code>.tpp</code> 或 <code>.ipp</code> 文件）</strong></li></ul><p>这是一种常见的组织方式，尤其对于复杂的模板类。实际上，它们仍然被“合并”到了同一个编译单元中（通过 <code>#include</code>），但物理上文件是分开的。</p><ul><li><p><strong><code>my_template.h</code> (声明文件):</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MY_TEMPLATE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MY_TEMPLATE_H</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>(T value);<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printValue</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    T value_;<br>&#125;;<br><br><span class="hljs-comment">// 在声明文件的末尾包含实现文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_template.tpp&quot;</span> <span class="hljs-comment">// 或者 .ipp, .impl 等</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// MY_TEMPLATE_H</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong><code>my_template.tpp</code> (实现文件):</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 通常不需要包含守卫，因为它被 .h 文件包含</span><br><span class="hljs-comment">// 但如果它可能被直接包含（不推荐），则可能需要</span><br><span class="hljs-comment">// #include &quot;my_template.h&quot; // 确保声明可见，如果单独处理此文件</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>MyClass&lt;T&gt;::<span class="hljs-built_in">MyClass</span>(T value) : <span class="hljs-built_in">value_</span>(value) &#123;<br>    <span class="hljs-comment">// 实现</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-type">void</span> MyClass&lt;T&gt;::<span class="hljs-built_in">printValue</span>() &#123;<br>    <span class="hljs-comment">// 实现</span><br>    <span class="hljs-comment">// std::cout &lt;&lt; value_ &lt;&lt; std::endl; // 假设包含了 &lt;iostream&gt;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>用户代码 (<code>main.cpp</code>):</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_template.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">MyClass&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    obj.<span class="hljs-built_in">printValue</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>工作原理:</strong><br>当 <code>main.cpp</code> 包含 <code>my_template.h</code> 时，预处理器会首先处理 <code>my_template.h</code>。在 <code>my_template.h</code> 的末尾，<code>#include &quot;my_template.tpp&quot;</code> 指令会把 <code>my_template.tpp</code> 文件的全部内容“粘贴”到 <code>my_template.h</code> 的那个位置。因此，当编译器实际编译 <code>main.cpp</code> 这个翻译单元时，它看到了模板的声明和定义，就好像它们都在一个文件里一样。</p></li><li><p><strong>优点:</strong></p><ul><li>保持头文件（接口部分）的整洁。</li><li>物理上分离了声明和实现，便于管理。</li></ul></li><li><p><strong>缺点:</strong></p><ul><li>严格来说，这并没有解决“定义必须在编译时可见”的问题，只是换了一种组织方式。最终定义还是通过 <code>#include</code> 进入了使用模板的编译单元。</li></ul></li><li><p><strong>使用显式实例化 (Explicit Instantiation) 将定义放在 <code>.cpp</code> 文件中</strong></p></li></ul><p>真正意义上将模板定义与声明分离到不同编译单元（声明在 <code>.h</code>，定义在 <code>.cpp</code>）的方法。</p><ul><li><p><strong><code>my_template.h</code> (声明文件):</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MY_TEMPLATE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MY_TEMPLATE_H</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyData</span>(T data);<br>    <span class="hljs-function">T <span class="hljs-title">getData</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-keyword">private</span>:<br>    T data_;<br>&#125;;<br><br><span class="hljs-comment">// 对于函数模板</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T a, T b)</span></span>;<br><br><span class="hljs-comment">// (可选) 显式实例化声明 (extern template)</span><br><span class="hljs-comment">// 告诉编译器这些实例化版本会在别处定义，不要在此处隐式实例化</span><br><span class="hljs-comment">// extern template class MyData&lt;int&gt;;</span><br><span class="hljs-comment">// extern template int add&lt;int&gt;(int, int);</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// MY_TEMPLATE_H</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong><code>my_template.cpp</code> (实现和显式实例化定义文件):</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_template.h&quot;</span></span><br><span class="hljs-comment">// #include &lt;iostream&gt; // 如果需要</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>MyData&lt;T&gt;::<span class="hljs-built_in">MyData</span>(T data) : <span class="hljs-built_in">data_</span>(data) &#123;<br>    <span class="hljs-comment">// 实现</span><br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>T MyData&lt;T&gt;::<span class="hljs-built_in">getData</span>() <span class="hljs-type">const</span> &#123;<br>    <span class="hljs-keyword">return</span> data_;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T a, T b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">// !!! 关键部分：显式实例化定义 !!!</span><br><span class="hljs-comment">// 为你希望支持的每一种类型提供一个显式实例化</span><br><span class="hljs-keyword">template</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>&lt;<span class="hljs-type">int</span>&gt;;<br><span class="hljs-keyword">template</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>&lt;<span class="hljs-type">double</span>&gt;;<br><span class="hljs-comment">// template class MyData&lt;std::string&gt;; // 如果需要支持 std::string</span><br><br><span class="hljs-keyword">template</span> <span class="hljs-type">int</span> <span class="hljs-built_in">add</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br><span class="hljs-keyword">template</span> <span class="hljs-type">double</span> <span class="hljs-built_in">add</span>&lt;<span class="hljs-type">double</span>&gt;(<span class="hljs-type">double</span>, <span class="hljs-type">double</span>);<br><span class="hljs-comment">// template std::string add&lt;std::string&gt;(std::string, std::string);</span><br></code></pre></td></tr></table></figure></li><li><p><strong>用户代码 (<code>main.cpp</code>):</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_template.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span> <span class="hljs-comment">// For std::string example</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">MyData&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">intObj</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-comment">// MyData&lt;std::string&gt; strObj(&quot;hello&quot;); // 如果 MyData&lt;std::string&gt; 没有在 my_template.cpp 中显式实例化，这里会链接失败</span><br><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);       <span class="hljs-comment">// 使用 add&lt;int&gt;</span><br>    <span class="hljs-comment">// add(5.5, 10.2); // 如果 add&lt;double&gt; 没有显式实例化，这里会链接失败</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>工作原理:</strong></p><ul><li>用户代码 (<code>main.cpp</code>) 只包含 <code>my_template.h</code>，它只有模板的声明。</li><li>当编译器编译 <code>main.cpp</code> 并看到 <code>MyData&lt;int&gt; intObj(10);</code> 时，它知道 <code>MyData</code> 是个模板。如果 <code>my_template.h</code> 中有 <code>extern template class MyData&lt;int&gt;;</code>，编译器会假设 <code>MyData&lt;int&gt;</code> 的完整定义和编译后的代码会在其他地方提供，因此它不会在 <code>main.o</code> 中尝试生成 <code>MyData&lt;int&gt;</code> 的代码。如果没有 <code>extern template</code> 声明，编译器可能会尝试隐式实例化，但如果找不到定义，后续链接会失败（除非其他地方有定义）。</li><li><code>my_template.cpp</code> 文件包含了模板的完整定义。更重要的是，它通过 <code>template class MyData&lt;int&gt;;</code> 这样的语句，<strong>显式地指示编译器在此处为 <code>MyData&lt;int&gt;</code> (以及其他列出的类型) 生成完整的代码</strong>。这些生成的代码会被编译到 <code>my_template.o</code> 这个对象文件中。</li><li>在链接阶段，当链接器处理 <code>main.o</code> 并发现它需要 <code>MyData&lt;int&gt;</code> 的实现时，它会在 <code>my_template.o</code> (或其他对象文件) 中找到预先编译好的 <code>MyData&lt;int&gt;</code> 的代码。</li></ul></li><li><p><strong>优点:</strong></p><ul><li><strong>真正的分离</strong>: 模板的实现细节可以完全隐藏在 <code>.cpp</code> 文件中，不暴露给用户。</li><li><strong>可能减少编译时间</strong>: 用户代码不需要在每次编译时都重新处理和实例化模板定义，因为它们是预编译的。</li><li><strong>可能减少最终可执行文件的大小</strong>: 通过 <code>extern template</code> 和集中的显式实例化，可以避免在多个编译单元中生成相同的模板实例化副本（尽管现代链接器通常也能很好地处理副本合并）。</li></ul></li><li><p>*缺点:**</p><ul><li><strong>不灵活</strong>: 模板的作者必须预先知道并显式实例化所有用户可能用到的类型组合。如果用户尝试使用一个未被显式实例化的类型（例如 <code>MyData&lt;float&gt;</code>），将会导致链接错误。这使得模板的通用性大大降低。</li><li><strong>维护负担</strong>: 每次添加对新类型的支持，都需要修改 <code>.cpp</code> 文件并添加相应的显式实例化。</li></ul></li><li><p><strong>总结:</strong></p><ul><li>将模板实现放在单独的 <code>.tpp</code> 文件并由声明头文件包含，是最常见的“物理分离但逻辑统一”的方法，它不改变模板的基本实例化机制。</li><li>使用显式实例化，将模板定义放在 <code>.cpp</code> 文件中，是实现真正编译单元分离的方法，但以牺牲通用性和增加维护负担为代价。它适用于模板的使用场景和类型集非常固定和已知的情况（例如，在一些库的内部实现中）。</li></ul><p>对于大多数通用模板库，第一种方法（或直接将简短定义放在声明头文件中）更为常见。第二种方法则更像是一种特化技术。</p></li></ul><h3 id="3-宏和模板的差异">(3) 宏和模板的差异</h3><p>宏 (Macros) 和模板 (Templates) 都允许编写某种形式的通用代码，但其效率、影响等也有所差异：</p><ul><li><p><strong>处理阶段与机制</strong>:</p><ul><li><strong>宏</strong>: 由 <strong>预处理器</strong> 在编译之前处理。预处理器执行的是纯粹的<strong>文本替换</strong>。它不理解 C++ 的语法或类型，只是简单地查找和替换标识符。</li><li><strong>模板</strong>: 由 <strong>编译器</strong> 在编译期间处理。模板是 C++ 语言的一部分，编译器会理解模板的语义，并根据提供的模板参数 <strong>实例化</strong> (生成) 具体的、类型正确的代码。</li></ul></li><li><p><strong>类型安全</strong>:</p><ul><li><strong>宏</strong>: <strong>不类型安全</strong>。由于是文本替换，<strong>预处理器不会进行任何类型检查</strong>。使用不当的类型可能会导致编译错误（有时是难以理解的错误），或者更糟的是，在运行时产生未定义行为。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b))</span><br><span class="hljs-comment">// MAX(&quot;apple&quot;, &quot;orange&quot;) // 文本比较，可能不是预期行为</span><br><span class="hljs-comment">// MAX(1, &quot;text&quot;) // 编译错误，但错误信息可能指向展开后的代码</span><br></code></pre></td></tr></table></figure></li><li><strong>模板</strong>: <strong>类型安全</strong>。编译器在实例化模板时会检查类型。如果类型不匹配或不支持所需的操作，编译器会产生错误。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">max_val</span><span class="hljs-params">(T a, T b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (a &gt; b) ? a : b;<br>&#125;<br><span class="hljs-comment">// max_val(&quot;apple&quot;, &quot;orange&quot;); // 编译错误，C-style strings don&#x27;t work with &gt; as expected for content.</span><br>                              <span class="hljs-comment">// std::string would work.</span><br><span class="hljs-comment">// max_val(1, &quot;text&quot;); // 编译错误，类型不匹配</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>作用域与命名空间</strong>:</p><ul><li><strong>宏</strong>: <strong>不遵循 C++ 的作用域规则或命名空间</strong>。宏通常具有全局作用域（从定义点到文件尾，或直到 <code>#undef</code>）。这很容易导致名称冲突，特别是与库中的名称或其他代码段中的宏冲突。</li><li><strong>模板</strong>: <strong>遵循 C++ 的作用域和命名空间规则</strong>。模板可以定义在命名空间内，其名称像其他 C++ 实体一样受到作用域的限制，从而减少了名称冲突的可能性。</li></ul></li><li><p><strong>调试</strong>:</p><ul><li><strong>宏</strong>: <strong>调试困难</strong>。因为宏是文本替换，编译器看到的实际代码是宏展开后的代码。调试时，<strong>错误信息可能指向展开后的、程序员并未直接编写的代码，使得追踪问题源头变得困难</strong>。单步调试也会跳过宏本身，直接进入展开后的代码。</li><li><strong>模板</strong>: <strong>调试相对容易</strong>。虽然模板的编译错误信息有时可能冗长（尤其是在复杂的模板元编程中），但它们通常与类型和模板参数相关。调试器能够理解模板实例化后的函数和类，可以像调试普通 C++代码一样进行调试。</li></ul></li><li><p><strong>参数求值</strong>:</p><ul><li><strong>宏</strong>: <strong>参数可能被多次求值</strong>。如果宏参数在宏体中出现多次，并且该参数带有副作用（如 <code>i++</code>），那么副作用会发生多次，这通常不是期望的行为。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUARE(x) ((x)*(x))</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-built_in">SQUARE</span>(a++); <span class="hljs-comment">// 展开为 ((a++)*(a++)) -&gt; ((2)*(3)) -&gt; a 变为 4, b 得到 6 (行为可能依赖编译器求值顺序)</span><br></code></pre></td></tr></table></figure></li><li><strong>模板</strong>: <strong>函数参数只求值一次</strong>，就像普通函数调用一样。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">square_tpl</span><span class="hljs-params">(T x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x * x;<br>&#125;<br><span class="hljs-type">int</span> a_tpl = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> b_tpl = <span class="hljs-built_in">square_tpl</span>(a_tpl++); <span class="hljs-comment">// a_tpl++ (2) 求值一次, a_tpl 变为 3, square_tpl(2) 被调用, b_tpl 得到 4</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>递归</strong>:</p><ul><li><strong>宏</strong>: <strong>不能直接递归</strong>（预处理器通常会阻止宏的直接递归展开以避免无限循环）。</li><li><strong>模板</strong>: <strong>支持递归</strong>（模板元编程中常见），包括递归的类模板和函数模板实例化。</li></ul></li><li><p><strong>代码生成与可内联性</strong>:</p><ul><li><strong>宏</strong>: 简单的代码复制粘贴。如果宏体很大，多次使用会导致代码膨胀。宏定义的函数式宏通常会被内联（因为它们是文本替换）。</li><li><strong>模板</strong>: 编译器为每个不同的模板参数集生成一个独立的实例。这也可能导致代码膨胀（“template bloat”），但编译器和链接器有机制来优化，例如合并相同的实例化代码。模板函数也可以被编译器内联。</li></ul></li><li><p><strong>语法和语言集成度</strong>:</p><ul><li><strong>宏</strong>: 使用预处理器语法，与 C++ 语法规则不同。需要小心处理括号以避免操作符优先级问题。</li><li><strong>模板</strong>: 使用标准的 C++ 语法，是语言的头等公民。</li></ul></li><li><p><strong>能力范围</strong>:</p><ul><li><strong>宏</strong>: 可以做一些模板做不到的事情，如：<ul><li><strong>字符串化 (<code>#</code>)</strong>: 将宏参数转换为字符串字面量。</li><li><strong>符号连接 (<code>##</code>)</strong>: 将两个符号连接成一个新的符号。</li><li><strong>条件编译 (<code>#ifdef</code>, <code>#if</code>)</strong>: 根据宏定义来包含或排除代码块。</li><li>定义简单的常量而无需类型。</li></ul></li><li><strong>模板</strong>: 更擅长于：<ul><li><strong>泛型编程</strong>: 创建类型无关的算法和数据结构。</li><li><strong>模板元编程 (TMP)</strong>: 在编译时执行计算。</li><li><strong>特化与偏特化</strong>: 为特定类型提供定制的实现。</li><li><strong>SFINAE (Substitution Failure Is Not An Error)</strong>: 允许基于类型特性进行复杂的重载决策。</li></ul></li></ul></li><li><p><strong>优先使用模板</strong>: 对于泛型编程、创建可重用的类型安全组件，模板是现代 C++ 的首选。它们更安全、更强大，并且更好地集成了 C++ 语言特性。</p></li><li><p><strong>宏的适用场景</strong>:</p><ul><li><strong>头文件保护符</strong> (<code>#ifndef H_MYHEADER_H ... #endif</code>)。</li><li><strong>条件编译</strong> (<code>#ifdef DEBUG ... #endif</code>)。</li><li>简单的、不涉及复杂逻辑或类型的常量定义（尽管 <code>constexpr</code> 通常更好）。</li><li>需要字符串化或符号连接等预处理器特有功能的场景。</li><li>在极少数情况下，用于简化非常重复的、与类型无关的纯文本代码模式（需谨慎）。</li></ul></li></ul><h3 id="4-宏和模板的效率差异">(4) 宏和模板的效率差异</h3><ul><li><p><strong>运行时效率</strong>:</p><ul><li>对于简单的、可内联的操作，宏（函数式宏在预处理阶段被直接文本替换。这意味着如果宏体简单，相当于代码被直接内联，没有函数调用的开销。）和模板在理想情况下（简单的模板被成功内联）的运行时效率可以非常相似，因为两者最终都可能变成直接嵌入的机器码。</li><li>模板由于其类型感知能力，使编译器有更多机会<strong>进行特定于类型的优化</strong>，因此模板生成的代码质量在复杂情况下往往更高，可能带来更好的运行时性能。例如，一个通用的数学运算模板，当用 int 实例化时，编译器可以使用整数指令；当用 double 实例化时，可以使用浮点指令，并进行相应的特定优化。如果模板函数由于其复杂性、大小或调用方式（例如通过函数指针）而未被内联，那么它将产生正常的函数调用开销。</li><li>宏的多次参数求值问题可能导致性能下降和错误。</li></ul></li><li><p><strong>编译时效率</strong></p><ul><li><p>宏 (Macros):</p><ul><li>处理速度快: 预处理器执行的是相对简单的文本查找和替换操作。这个阶段通常非常快。</li></ul></li><li><p>模板 (Templates):</p><ul><li>处理开销大: 模板的处理要复杂得多，涉及到：<ul><li>解析: 编译器需要解析模板定义。</li><li>实例化: 为每个用到的不同模板参数集生成具体的类或函数定义。</li><li>名称查找与绑定 (两阶段查找): 解析依赖名称和非依赖名称。</li><li>类型检查: 对每个实例化版本进行严格的类型检查。</li><li>SFINAE (替换失败并非错误): 如果用于重载决议，可能涉及多次尝试实例化。</li><li>模板元编程 (TMP): 如果使用了 TMP，编译器实际上是在执行计算，这可能非常耗时。</li><li>错误信息生成: 复杂模板的错误信息可能很长，生成和解析它们也需要时间。</li></ul></li><li>结果: 大量使用模板，特别是<strong>复杂的模板或深度嵌套的模板，会显著增加编译时间</strong>。这是模板的一个主要缺点，通常被称为“编译时开销”。</li></ul></li><li><p>总结编译时效率:</p></li></ul><p>宏的编译时（预处理时）效率远高于模板。模板的编译时开销是为其类型安全、表达能力和运行时优化潜力付出的代价。</p><p>综合来看:</p><ul><li>如果首要考虑的是极快的编译速度，且操作非常简单，不涉及复杂类型逻辑，宏可能更快（在编译时）。</li><li>如果考虑的是运行时性能、类型安全、代码可维护性和利用编译器高级优化能力，模板通常是更好的选择。现代编译器在优化模板实例化代码方面做得非常好。</li></ul></li></ul><h2 id="31-平衡二叉树红黑树avl-树">31. 平衡二叉树/红黑树/AVL 树</h2><h3 id="1-平衡二叉树">(1) 平衡二叉树</h3><p>平衡二叉树 (Balanced Binary Tree) 是一种特殊的二叉树，它通过一定的机制来维持其自身结构的平衡，以确保树的高度（或深度）大致保持在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的级别，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 是树中节点的数量。在普通的二叉搜索树 (Binary Search Tree, BST) 中，如果插入或删除操作的顺序不当，树可能会变得非常“倾斜”或“不平衡”。在最坏的情况下，二叉搜索树可能退化成一个链表（例如，按顺序插入已排序的数据）。在这种情况下，搜索、插入和删除等基本操作的时间复杂度会从理想的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 下降到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，这会严重影响性能。平衡二叉树的核心目的就是<strong>防止这种退化，确保树的各种操作都能在可预测的、高效的对数时间内完成</strong>。</p><p>“平衡”的确切定义会根据具体的平衡二叉树类型而有所不同。一些常见的衡量标准或约束包括：</p><ul><li><strong>高度差约束 (Height Difference Constraint)</strong>: 这是 <strong>AVL 树</strong> (Adelson-Velsky and Landis tree) 的核心特性。<strong>对于 AVL 树中的任何节点，其左子树和右子树的高度差（称为平衡因子）不能超过 1</strong>。</li><li><strong>路径长度约束 (Path Length Constraint)</strong> 或 <strong>颜色约束 (Color Constraint)</strong>: <strong>红黑树 (Red-Black Tree)</strong> 通过对节点施加特定的颜色属性（红色或黑色）以及一系列规则来确保<em>从根节点到任何叶子节点的最长路径不会超过最短路径的两倍</em>。这些规则间接保证了树的近似平衡和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的高度。<code>std::map</code> 和 <code>std::set</code> 在很多 C++ 标准库实现中就使用了红黑树。</li><li><strong>其他机制</strong>:<ul><li><strong>B 树 (B-Tree)</strong> 及其变种 (如 B+ 树、B* 树) 也是平衡树，但它们通常不是二叉树（一个节点可以有多个子节点）。它们常用于数据库和文件系统中，通过确保<strong>所有叶子节点都在同一层</strong>，并要求内部节点有一定数量的子节点来保持平衡。</li><li><strong>伸展树 (Splay Tree)</strong> 是一种自平衡的二叉搜索树，它通过在每次访问后将访问的节点通过一系列“伸展”操作（旋转）移动到根部，从而在均摊意义上达到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的性能。</li><li><strong>Treap (Tree Heap)</strong> 通过为每个节点随机分配一个优先级，并同时维持二叉搜索树的顺序属性（按键值）和堆的顺序属性（按优先级），从而以较高的概率保持平衡。</li></ul></li></ul><h3 id="2-红黑树">(2) 红黑树</h3><ul><li>特性（左根右，根叶黑，不红红，黑路同）：<ul><li>二叉搜索树（左 &lt; 根 &lt; 右）。</li><li>一个节点要么是黑色要么是红色，<strong>根节点和叶子节点（NULL，叶子节点不存储数据）都是黑色</strong>。</li><li>如果一个节点是红色的，那么它的两个子节点都必须是黑色的。这意味着在从根到任何叶子的任何路径上，都不能有两个连续的红色节点。</li><li>对于树中的任何一个节点，从该节点到其所有后代叶子节点（NIL 节点）的每条简单路径上，都包含<strong>相同数量的黑色节点</strong>。这个数量被称为节点的“黑高 (black-height)”。</li><li>这些属性共同保证了红黑树的一个关键特性：从任一节点到最远的叶子节点的路径长度，不会超过从该节点到最近的叶子节点路径长度的两倍（最长路径不超过最短路径的两倍）。</li></ul></li></ul><h3 id="3-红黑树查找插入删除">(3) 红黑树查找/插入/删除</h3><p>好的，我们来详细展开红黑树的查找、插入和删除操作。这些操作的核心在于，它们首先执行标准的二叉搜索树操作，然后通过一系列的旋转和颜色调整来恢复红黑树的五个属性，从而保持树的平衡。</p><ul><li><p><strong>查找</strong></p><p>红黑树的查找操作与普通二叉搜索树 (BST) 的查找操作<strong>完全相同</strong>。</p><ul><li><p><strong>步骤</strong>:</p><ol><li>从根节点开始。</li><li>比较目标键值与当前节点的键值：<ul><li>如果相等，则找到了节点，返回该节点。</li><li>如果目标键值小于当前节点的键值，则在当前节点的左子树中继续查找（即，移动到左孩子）。</li><li>如果目标键值大于当前节点的键值，则在当前节点的右子树中继续查找（即，移动到右孩子）。</li></ul></li><li>如果当前节点是 NIL（叶子节点，表示空），则说明树中不存在该键值的节点。</li></ol></li><li><p><strong>颜色</strong>: 节点的颜色在查找过程中不起任何直接作用。红黑属性确保了树的高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，因此查找操作的时间复杂度也是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p></li></ul></li><li><p><strong>插入</strong></p><p>插入操作稍微复杂一些，因为它可能破坏红黑树的属性。</p><ul><li><p><strong>步骤 1: 标准 BST 插入</strong></p><ul><li>首先，<strong>按照普通二叉搜索树的规则找到新节点的插入位置</strong>，并将新节点插入。</li><li><strong>将新插入的节点 <code>z</code> 标记为红色 (RED)</strong>。<ul><li><strong>为什么是红色？</strong> 如果将新节点标记为黑色，几乎肯定会改变从其祖先到叶子节点的路径上的黑色节点数量，从而违反“属性：任一节点的”。如果标记为红色，则不会影响任何路径的黑色高度。然而，标记为红色可能会导致“属性：红色节点的子节点必须是黑色”被违反（如果新节点的父节点也是红色），或者如果树为空，新节点成为根节点，可能会违反“属性：根节点是黑色”。所以需要一个修复颜色的过程。</li></ul></li></ul></li><li><p><strong>步骤 2: 修复红黑属性</strong><br>在插入红色节点 <code>z</code> 后，调用一个修复过程来恢复可能被破坏的红黑属性。此过程主要处理由于 <code>z</code> 和其父节点 <code>p</code> 可能都是红色而导致的违规。修复过程的核心思想是通过一系列的颜色翻转和旋转来解决问题。我们主要关注节点 <code>z</code>、其父节点 <code>p</code>、其祖父节点 <code>g</code>，以及其叔叔节点 <code>y</code> (即 <code>g</code> 的另一个孩子)。如果插入节点是根节点，直接把插入节点变黑。</p><p>修复循环 (<strong>只要 <code>z</code> 不是根节点且 <code>z</code> 的父节点 <code>p</code> 是红色就继续</strong>):</p><ul><li><p><strong>确定叔叔节点 <code>y</code></strong>:</p><ul><li>如果 <code>p</code> 是 <code>g</code> 的左孩子，则 <code>y</code> 是 <code>g</code> 的右孩子。</li><li>如果 <code>p</code> 是 <code>g</code> 的右孩子，则 <code>y</code> 是 <code>g</code> 的左孩子。</li></ul></li><li><p><strong>根据叔叔节点 <code>y</code> 的颜色分情况处理</strong>:</p><ul><li><p><strong>情况 1: 叔叔 <code>y</code> 是红色 (RED)</strong></p><ul><li><strong>操作</strong>（叔父爷变色，爷爷变插入节点）:<ul><li>将父节点 <code>p</code> 设为黑色 (BLACK)。</li><li>将叔叔节点 <code>y</code> 设为黑色 (BLACK)。</li><li>将祖父节点 <code>g</code> 设为红色 (RED)。</li><li>将当前节点 <code>z</code> 指向祖父节点 <code>g</code> (<code>z = g</code>)。</li></ul></li><li><strong>解释</strong>: 这个操作将两个红色节点（<code>p</code> 和 <code>y</code>）的“红色属性” 向上推给了祖父 <code>g</code>。现在 <code>g</code> 可能是新的问题节点（如果 <code>g</code> 的父节点也是红色），所以循环需要继续从 <code>g</code> 开始。</li></ul></li><li><p><strong>情况 2: 叔叔 <code>y</code> 是黑色 (BLACK) 或 NIL</strong></p><ul><li><strong>操作</strong>：根据 AVL 一节中叙述的方式判断是 LL/RR/LR/RL，然后把爷爷当作失衡节点进行相应的旋转。旋转结束后对失衡节点（旋转点）和被当作旋转轴的点交换颜色。具体见：【红黑树 - 定义, 插入, 构建】 <a href="https://www.bilibili.com/video/BV1Xm421x7Lg/?share_source=copy_web&amp;vd_source=456629902e57c5630924f693427a46da">https://www.bilibili.com/video/BV1Xm421x7Lg/?share_source=copy_web&amp;vd_source=456629902e57c5630924f693427a46da</a></li></ul></li></ul></li></ul><p><strong>循环结束后</strong>:</p><ul><li>将树的根节点设为黑色 (BLACK)，因为情况 1 中根节点可能被设为红色。</li></ul><p>插入操作通过这几种情况的处理，<strong>最多只需要两次旋转</strong>就能恢复平衡。</p></li></ul></li><li><p><strong>删除</strong></p><ul><li><p>删除操作是红黑树中最复杂的操作，具体见：【红黑树 - 删除】 <a href="https://www.bilibili.com/video/BV16m421u7Tb/?share_source=copy_web&amp;vd_source=456629902e57c5630924f693427a46da">https://www.bilibili.com/video/BV16m421u7Tb/?share_source=copy_web&amp;vd_source=456629902e57c5630924f693427a46da</a></p></li><li><p><strong>最多只需要三次旋转就能恢复平衡</strong>。</p></li></ul></li></ul><h3 id="4-avl-树">(4) AVL 树</h3><p><strong>AVL 树</strong>是以其发明者 G.M. Adelson-Velsky 和 E.M. Landis (在 1962 年) 的名字命名的，它是<strong>最早被发明的自平衡二叉搜索树 (Self-Balancing Binary Search Tree)</strong>。</p><ul><li>首先，AVL 树必须满足二叉搜索树的基本性质：对于树中的任何节点，其左子树中所有节点的值都小于该节点的值，而其右子树中所有节点的值都大于该节点的值。</li><li><strong>平衡条件</strong>:<ul><li>这是 AVL 树的关键。对于 AVL 树中的<strong>每一个节点</strong>，其<strong>左子树的高度</strong>与<strong>右子树的高度</strong>之差（绝对值）<strong>最多为 1</strong>。</li><li>这个高度差通常被称为节点的<strong>平衡因子 (Balance Factor)</strong>。 平衡因子 = <code>高度(右子树) - 高度(左子树)</code> (或者反过来，只要保持一致即可)。因此，AVL 树中每个节点的平衡因子必须是 <strong>-1、0 或 1</strong>。如果任何节点的平衡因子变成了 -2 或 +2，那么树就失去了 AVL 平衡，需要进行调整（注：节点的高度通常定义为从该节点到其最远叶子节点路径上的边数。空树的高度通常定义为 -1，叶子节点的高度为 0）。</li></ul></li><li><strong>性能保证</strong>:<ul><li>由于这种严格的平衡条件，AVL 树的高度被严格限制在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 是节点的数量。具体来说，AVL 树的高度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>&lt;</mo><mn>1.44</mn><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo>−</mo><mn>0.328</mn></mrow><annotation encoding="application/x-tex">h &lt; 1.44 \log_2(n+2) - 0.328</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1.44</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.328</span></span></span></span>。</li><li>这保证了查找 (search)、插入 (insertion) 和删除 (deletion) 操作的<strong>最坏情况时间复杂度都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></strong>。</li></ul></li><li><strong>如何维持平衡 (Rebalancing)</strong>:<ul><li>当检测到不平衡时，AVL 树会通过执行一种或多种<strong>树旋转</strong>(Tree Rotations)操作来恢复平衡。这些旋转操作会重新组织树的局部结构，以满足平衡条件，同时保持二叉搜索树的性质。</li><li>主要的旋转类型有四种，它们是针对导致不平衡的节点（通常是第一个平衡因子为 ±2 的节点）及其子孙节点进行的：<ul><li><strong>RR 不平衡 / 左旋</strong>：当不平衡是由于插入节点是在不平衡节点的右孩子的右子树造成的需要进行左旋，特点是失衡节点的平衡因子为 -2，失衡节点右孩子的平衡因子为 -1。左旋就是把不平衡的节点<strong>以其右孩子为轴逆时针旋转为其右孩子的左孩子</strong>，旋转前后的中序遍历结果相同，但后者树的高度变低了。如果不平衡的节点本身有左孩子，那这个冲突的左孩子变成不平衡节点旋转后的右孩子（图示见【平衡二叉树(AVL 树)】 <a href="https://www.bilibili.com/video/BV1tZ421q72h/?share_source=copy_web&amp;vd_source=456629902e57c5630924f693427a46da">https://www.bilibili.com/video/BV1tZ421q72h/?share_source=copy_web&amp;vd_source=456629902e57c5630924f693427a46da</a> ）。</li><li><strong>LL 不平衡 / 右旋</strong>: 当不平衡是由于插入节点是在不平衡节点的左孩子的左子树造成的需要进行右旋，特点是失衡节点的平衡因子为 2，失衡节点左孩子的平衡因子为 1。右旋的方式和左旋相反。</li><li><strong>LR 不平衡</strong>: 当不平衡是由于在节点的左孩子的右子树中插入造成的。特点是失衡节点的平衡因子是 2，失衡节点的左孩子的平衡因子为-1。解决方式是先对左孩子进行一次左旋，然后再对失衡节点进行一次右旋。</li><li><strong>RL 不平衡</strong>: 当不平衡是由于在节点的右孩子的左子树中插入造成的。特点是失衡节点的平衡因子是 -2，失衡节点的右孩子的平衡因子为 1。这相当于先对右孩子进行一次右旋，然后再对失衡节点进行一次左旋。</li><li><strong>插入</strong>结点后如果导致多个祖先结点失衡，只需调整距离插入结点最近的失衡结点，其他失衡结点会自然平衡。</li></ul></li></ul></li></ul><h3 id="5-红黑树和-avl-树的差异">(5) 红黑树和 AVL 树的差异</h3><p>虽然红黑树和 AVL 树都是自平衡二叉搜索树，保证 O(logn) 的操作时间，但它们在平衡策略、性能特性和实现复杂度上有所不同：</p><ul><li>平衡的严格程度:<ul><li>AVL 树: <strong>更严格地平衡</strong>。它要求任何节点的左右子树高度差最多为 1。</li><li>红黑树: 平衡性相对宽松。它通过颜色属性确保最长路径不超过最短路径的两倍，但不直接限制左右子树的高度差。因此，红黑树可能没有 AVL 树那么“扁平”。</li></ul></li><li>树的高度:<ul><li>AVL 树: 由于更严格的平衡，其最大高度通常比红黑树更接近理论最小值 (≈logn)。</li><li>红黑树: 最大高度可能略高于 AVL 树 (≈2log(n+1))。</li></ul></li><li>查找操作性能:<ul><li>AVL 树: 因为树的高度通常更低，查找操作的平均和最坏情况下的比较次数可能更少，因此理论上查找速度略快。</li><li>红黑树: 查找也是 O(logn)，但常数因子可能略大于 AVL 树。</li></ul></li><li>插入和删除操作性能:<ul><li>AVL 树: 为了维持其严格的平衡条件，AVL 树在插入和删除时可能需要进行<strong>多次旋转</strong>（最坏情况下是 O(logn) 次旋转，但通常是一次或两次）。</li><li>红黑树: 插入操作最多需要两次旋转，删除操作最多需要三次旋转。颜色翻转操作非常快。因此，<strong>红黑树的插入和删除操作通常比 AVL 树更快，尤其是在写操作频繁的场景下</strong>。</li></ul></li><li>实际应用:<ul><li>红黑树: 由于其插入和删除操作的良好性能（尤其是较少的旋转次数），在实际中应用更为广泛。例如，C++ STL 中的 std::map, std::set, std::multimap, std::multiset 通常是用红黑树实现的。Java 中的 TreeMap 和 TreeSet 也是。</li><li>AVL 树: 在<strong>查找密集型</strong>且修改较少的应用中可能更有优势。但在通用库中的普及程度不如红黑树。</li></ul></li></ul><h2 id="32-函数指针">32. 函数指针</h2><ul><li><p>函数指针 (Function Pointer) 是一个<strong>指向内存中特定函数起始地址</strong>的指针变量。就像数据指针存储变量的内存地址一样，函数指针存储的是某个函数的入口点（即其第一条指令的地址）。可用于：</p><ul><li>将函数作为参数传递给其他函数（例如回调函数）。例如，GUI 事件处理器、排序算法中的比较函数、异步任务完成时的通知函数。</li><li>将函数存储在数据结构中（例如数组或映射）。虚函数表就类似一个存储虚函数指针的数组。</li><li>在运行时动态地决定调用哪个函数。</li><li>从函数返回函数。</li></ul></li><li><p><strong>声明</strong>:<br>声明一个函数指针需要指定它所指向的函数的<strong>返回类型</strong>和<strong>参数列表类型</strong>。<br>语法格式：<br><code>return_type (*pointer_name)(parameter_type1, parameter_type2, ...);</code></p><ul><li><code>return_type</code>: 被指向函数的返回类型。</li><li><code>(*pointer_name)</code>: <code>pointer_name</code> 是函数指针变量的名称。这里的括号 <code>()</code> 至关重要，它确保了 <code>*</code> 操作符优先与 <code>pointer_name</code> 结合，表明这是一个指针。如果没有括号，例如 <code>return_type *pointer_name(...)</code>，则会被解释为一个返回 <code>return_type*</code> 类型的普通函数声明。</li><li><code>(parameter_type1, parameter_type2, ...)</code>: 被指向函数的参数类型列表。</li><li>示例:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">void</span> (*funcPtr)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br><span class="hljs-built_in">double</span> (*mathOp)(<span class="hljs-type">double</span>, <span class="hljs-type">double</span>);<br></code></pre></td></tr></table></figure></li><li><strong>使用 <code>typedef</code> 或 <code>using</code> 简化声明</strong>：函数指针的声明语法可能显得冗长和不直观。使用 <code>typedef</code> (C 风格) 或 <code>using</code> (C++11 及以后) 可以<strong>创建类型别名</strong>，提高代码的可读性和可维护性。<ul><li><strong>使用 <code>typedef</code></strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*IntOperationCallback)</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>IntOperationCallback addCallback; <span class="hljs-comment">// addCallback 是一个函数指针</span><br></code></pre></td></tr></table></figure></li><li><strong>使用 <code>using</code> (更推荐的现代 C++ 做法)</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> DoubleMathFunc = <span class="hljs-built_in">double</span> (*)(<span class="hljs-type">double</span>, <span class="hljs-type">double</span>);<br>DoubleMathFunc multiplyFunc; <span class="hljs-comment">// multiplyFunc 是一个函数指针</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>初始化与赋值</strong>:</p><ul><li>可以直接使用函数名（函数名在多数表达式中会自动“衰变”为指向该函数的指针）：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_function</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">// ... 实现 ...</span><br>&#125;<br>funcPtr = my_function; <span class="hljs-comment">// 将 my_function 的地址赋给 funcPtr</span><br></code></pre></td></tr></table></figure></li><li>也可以显式使用取地址符 <code>&amp;</code> (虽然通常不是必需的)：<code>funcPtr = &amp;my_function;</code></li><li>赋值的函数其返回类型和参数列表必须与函数指针声明的类型完全匹配</li></ul></li><li><p><strong>调用</strong>:</p><ul><li><strong>显式解引用 (C 风格)</strong>:<code>(*funcPtr)(10, 20); // 解引用指针，然后调用函数</code></li><li><strong>隐式解引用 (C++ 中更常见)</strong>:<code>funcPtr(10, 20);    // 直接像函数名一样使用指针</code></li></ul></li><li><p><strong>示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 目标函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">greet</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, &quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">subtract</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a - b;<br>&#125;<br><br><span class="hljs-comment">// 使用 typedef 定义函数指针类型</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*ArithmeticFunc)</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 声明并初始化函数指针 greetPtr</span><br>    <span class="hljs-built_in">void</span> (*greetPtr)(<span class="hljs-type">const</span> <span class="hljs-type">char</span>*);<br>    greetPtr = greet; <span class="hljs-comment">// 或 greetPtr = &amp;greet;</span><br><br>    <span class="hljs-comment">// 通过函数指针调用 greet</span><br>    <span class="hljs-built_in">greetPtr</span>(<span class="hljs-string">&quot;World&quot;</span>); <span class="hljs-comment">// 输出: Hello, World!</span><br>    (*greetPtr)(<span class="hljs-string">&quot;Universe&quot;</span>); <span class="hljs-comment">// 输出: Hello, Universe!</span><br><br>    <span class="hljs-comment">// 使用 typedef 声明的函数指针</span><br>    ArithmeticFunc operation;<br><br>    operation = add;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Addition: &quot;</span> &lt;&lt; <span class="hljs-built_in">operation</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 输出: Addition: 15</span><br><br>    operation = subtract;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Subtraction: &quot;</span> &lt;&lt; <span class="hljs-built_in">operation</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 输出: Subtraction: 5</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>与 <code>std::function</code> 的比较 (现代 C++)</strong></p><p>在 C++11 及更高版本中，标准库提供了 <code>std::function</code> (在 <code>&lt;functional&gt;</code> 头文件中)，它是一个<strong>更通用、类型安全</strong>的多态函数包装器。</p></li><li><p>类型安全：<code>std::function</code> 会在编译时检查可调用对象的签名是否匹配</p></li><li><p>通用性：<code>std::function</code> 可以存储</p><ul><li>普通函数指针</li><li>Lambda 表达式</li><li>函数对象 (Functors)</li><li>指向成员函数的指针 (配合 <code>std::bind</code> 或 lambda)</li><li>示例：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; func = add; <span class="hljs-comment">// 存储普通函数</span><br>std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; func = [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;; <span class="hljs-comment">// 存储 lambda 表达式</span><br><span class="hljs-comment">// 使用 std::bind 可以将函数的参数部分绑定，生成一个新的可调用对象</span><br><span class="hljs-keyword">auto</span> bound_func = std::<span class="hljs-built_in">bind</span>(add, std::placeholders::_1, <span class="hljs-number">3</span>);<br>std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt; func = bound_func; <span class="hljs-comment">// 存储绑定表达式</span><br>Calculator calc;<br><span class="hljs-comment">// 存储成员函数指针</span><br>std::function&lt;<span class="hljs-type">int</span>(Calculator*, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; func = &amp;Calculator::add;<br></code></pre></td></tr></table></figure></li><li>函数指针只能固定签名，无法动态替换,<code>std::function</code>可以动态替换存储的可调用对象；函数指针不支持复制，<code>std::function</code>支持。</li></ul><p>虽然 <code>std::function</code> 带来了更大的灵活性和便利性，但它通常比原始函数指针<strong>有一定的性能开销</strong>（因为它可能需要在堆上分配内存或进行虚函数调用）。<code>std::function</code> 在未绑定任何可调用对象时调用会引发未定义行为，需通过 if (func) 检查是否为空。原始函数指针在性能要求极高或与 C 代码交互时仍有其用武之地。</p></li><li><p><strong>指向成员函数的指针</strong></p><p>值得注意的是，指向类的<strong>非静态成员函数</strong>的指针与上面讨论的普通函数指针是不同的，因为它们需要一个类的实例来调用（即需要 <code>this</code> 指针）。例如：<code>int (MyClass::*memberFuncPtr)(int);</code>。</p></li></ul><h1 id="计算机网络">计算机网络</h1><h2 id="1-osi-七层协议模型">1. OSI 七层协议模型</h2><p>国际标准化组织（ISO）提出的网络通信模型，用来描述网络系统中通信的分层结构，使得不同厂商设备或系统之间可以实现互联互通。</p><ul><li><p>七层结构从上到下</p><ul><li>每一层 <strong>只与上下两层通信</strong>，实现“模块化设计”</li><li>下层为上层提供服务，上层使用下层服务</li><li>每层协议通过“协议数据单元（PDU）”交换数据</li></ul><table><thead><tr><th>层级</th><th>名称</th><th>功能简述</th><th>对应现实中的例子</th></tr></thead><tbody><tr><td>7</td><td>应用层 Application</td><td>用户交互、服务接口（如 HTTP、FTP）</td><td>浏览器、邮件客户端</td></tr><tr><td>6</td><td>表示层 Presentation</td><td>数据编码/解码、加密/解密、压缩/解压</td><td>SSL/TLS、JPEG、MP3 编码</td></tr><tr><td>5</td><td>会话层 Session</td><td>会话管理、连接建立与断开、同步控制</td><td>RPC、会话恢复、数据库连接池</td></tr><tr><td>4</td><td>传输层 Transport</td><td>可靠传输、分段重组、流量控制</td><td>TCP、UDP</td></tr><tr><td>3</td><td>网络层 Network</td><td>路由、寻址、路径选择</td><td>IP、ICMP、路由器</td></tr><tr><td>2</td><td>数据链路层 Data Link</td><td>成帧、错误检测、MAC 地址识别</td><td>以太网、ARP、交换机</td></tr><tr><td>1</td><td>物理层 Physical</td><td>比特流传输、物理信号、接口标准</td><td>网线、电压、电流、调制解调器</td></tr></tbody></table></li><li><p>封装与解封装</p><ul><li>封装：发送方 向下封装，每层加头部（header）</li><li>解封装：接收 方向上解封装，逐层解析头部信息</li></ul><p>例如发送网页请求：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">HTTP</span>数据<br>↓（加HTTP头）应用层<br>↓（加TLS头） 表示层<br>↓（加TCP头） 传输层<br>↓（加<span class="hljs-built_in">IP</span>头）  网络层<br>↓（加MAC头） 数据链路层<br>↓ 比特流      物理层<br></code></pre></td></tr></table></figure></li><li><p>与现实协议栈的关系</p></li><li><p>OSI 是教学用模型，实际使用的是 TCP/IP 四层模型：</p><table><thead><tr><th>TCP/IP 层级</th><th>映射到 OSI 层级</th></tr></thead><tbody><tr><td>应用层</td><td>应用层 + 表示层 + 会话层</td></tr><tr><td>传输层</td><td>传输层</td></tr><tr><td>网络层</td><td>网络层</td></tr><tr><td>网络接口层（链路）</td><td>数据链路层 + 物理层</td></tr></tbody></table></li></ul><h2 id="2-tcp-和-udp-原理和区别">2. TCP 和 UDP 原理和区别</h2><p><a href="https://xiaolincoding.com/network/3_tcp/tcp_interview.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-tcp-%E5%8D%8F%E8%AE%AE-tcp-%E5%B7%A5%E4%BD%9C%E5%9C%A8%E5%93%AA%E4%B8%80%E5%B1%82">https://xiaolincoding.com/network/3_tcp/tcp_interview.html#为什么需要-tcp-协议-tcp-工作在哪一层</a><br><a href="https://xiaolincoding.com/network/3_tcp/tcp_interview.html#udp-%E5%92%8C-tcp-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%91%A2-%E5%88%86%E5%88%AB%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E6%98%AF">https://xiaolincoding.com/network/3_tcp/tcp_interview.html#udp-和-tcp-有什么区别呢-分别的应用场景是</a><br><a href="https://xiaolincoding.com/network/3_tcp/tcp_interview.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B-%E4%B8%8D%E6%98%AF%E4%B8%A4%E6%AC%A1%E3%80%81%E5%9B%9B%E6%AC%A1">https://xiaolincoding.com/network/3_tcp/tcp_interview.html#为什么是三次握手-不是两次、四次</a></p><ul><li><p>TCP（Transmission Control Protocol）</p><ul><li>原理：TCP 是一种<strong>面向连接、可靠、有序、基于字节流</strong>的传输协议。</li><li>工作机制：<ul><li><strong>三次握手建立连接</strong>（三-way handshake）：<ul><li>客户端发送 SYN</li><li>服务端回复 SYN-ACK</li><li>客户端回复 ACK</li></ul></li><li><strong>有序传输</strong>：数据按顺序编号，接收方按序重组</li><li><strong>可靠传输</strong>：<ul><li>确认机制（ACK）</li><li>重传机制（超时/丢包自动重发）</li></ul></li><li><strong>流量控制</strong>：根据接收方处理能力调整发送速率（窗口大小）</li><li><strong>拥塞控制</strong>：避免网络拥堵（慢启动、拥塞避免等）</li><li><strong>四次挥手关闭连接</strong></li></ul></li></ul></li><li><p>UDP（User Datagram Protocol）</p><ul><li>原理：UDP 是一种**无连接、不可靠、无序、基于报文（数据报）**的传输协议。</li><li>特点：<ul><li><strong>不建立连接</strong>，发送即发（无需握手）</li><li><strong>每个报文独立</strong>，顺序和可靠性不保证</li><li><strong>无确认、无重传</strong>，但传输开销小，速度快</li><li><strong>适用于实时、丢包容忍的场景</strong></li></ul></li></ul></li><li><p>对比总结</p><ul><li>TCP 是面向连接、可靠、有序的传输协议，适用于数据完整性要求高的场景；</li><li>UDP 是无连接、不可靠、快速的协议，适用于实时性要求高、对丢包容忍的场景。它们各自权衡了通信效率与传输保障。</li></ul><table><thead><tr><th>特性</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>是否连接导向</td><td>是（需三次握手）</td><td>否</td></tr><tr><td>是否可靠</td><td>是（有 ACK + 重传）</td><td>否（无确认、无重传）</td></tr><tr><td>是否有序</td><td>是（顺序编号 + 重组）</td><td>否</td></tr><tr><td>是否面向字节流</td><td>是（连续数据流）</td><td>否（基于独立数据报）</td></tr><tr><td>头部开销</td><td>大（20 字节以上）</td><td>小（仅 8 字节）</td></tr><tr><td>是否有流量控制</td><td>有</td><td>无</td></tr><tr><td>是否有拥塞控制</td><td>有</td><td>无</td></tr><tr><td>适合场景</td><td>文件传输、网页、邮件、SSH</td><td>音视频流、DNS、在线游戏、语音通话</td></tr></tbody></table></li></ul><h2 id="3-moba-设计-udp-tcp-的选择">3. moba 设计 UDP TCP 的选择</h2><ul><li>moba 的通信需求<ul><li>低延迟：操作需尽快生效（移动、技能施放、打断等）</li><li>高频次小包：每秒多次发送/接收状态、位置信息</li><li>丢包容忍：丢 1~2 帧状态包没关系，后续帧能纠正</li><li>状态过时即无效：不需要补发旧包，比如“移动到旧位置”</li><li>有些数据必须可靠：聊天、选人阶段、房间同步、游戏开始、重连等</li></ul></li></ul><p>因此，MOBA 游戏大多采用 UDP 作为主通信协议，以获得低延迟、高并发性能，并通过应用层补偿机制（如状态预测、丢包恢复）提升容错性；对于聊天、登录等可靠性要求高的非实时场景，则使用 TCP 或辅助可靠通道。</p><ul><li>双通道设计<ul><li>一个 TCP 连接用于登录/聊天/选人</li><li>一个 UDP 连接用于游戏数据同步</li><li>各自在独立端口/线程中处理</li></ul></li><li>只用 UDP + 自定义可靠协议</li></ul><h2 id="4-tcp-粘包">4. TCP 粘包</h2><h2 id="5-可靠-udp-的实现思路">5. 可靠 UDP 的实现思路</h2><h2 id="6-https-和-http-区别">6. https 和 http 区别</h2><h1 id="操作系统">操作系统</h1><h2 id="1-线程和进程区别">1. 线程和进程区别</h2><ul><li>进程（Process）：<ul><li>程序在操作系统中独立运行的基本单位</li><li>是资源分配和保护的最小单位</li><li>拥有独立的地址空间、代码段、堆、栈、文件描述符等资源</li><li>一个进程崩溃不影响其他进程</li><li>通信方式使用 IPC（管道、消息队列、共享内存）</li></ul></li><li>线程（Thread）：<ul><li>是进程内的执行单元</li><li>是程序执行调度的最小单位</li><li>同一进程内的多个线程共享地址空间和资源<br>同一进程的多个线程共享以下内容：<ul><li>代码段（.text）</li><li>全局变量和堆空间</li><li>文件描述符</li><li>当前工作目录、用户 ID 等<br>而每个线程有自己独立的：</li><li>栈（stack）</li><li>程序计数器（PC）</li><li>寄存器上下文</li><li>线程 ID</li></ul></li><li>一个线程崩溃可能导致整个进程崩溃</li><li>使用共享内存，通信简单高效</li><li>线程并发性较高 （切换开销小）</li></ul></li></ul><h2 id="2-线程进程通讯及切换原理">2. 线程/进程通讯及切换原理</h2><ul><li><p>进程间通信需依赖内核机制（如管道、消息队列、共享内存），线程间通信则通过共享内存 + 同步机制实现；</p></li><li><p>进程切换涉及地址空间与页表切换，开销大；线程切换无需切换地址空间，开销较小，调度更高效。</p></li><li><p>进程通信（Inter-Process Communication, IPC）</p><p>由于进程之间<strong>地址空间隔离</strong>，所以通信必须通过<strong>内核中介</strong>进行，常见方式包括：</p><table><thead><tr><th>通信方式</th><th>原理简述</th><th>特点与用途</th></tr></thead><tbody><tr><td>管道（pipe）</td><td>内核维护一段缓存区，单向传输数据</td><td>父子进程通信，简单，但不支持命名</td></tr><tr><td>命名管道（FIFO）</td><td>支持非亲缘进程间通信</td><td>基于文件系统</td></tr><tr><td>消息队列</td><td>内核维护一个消息链表，进程可发送/接收消息</td><td>支持异步通信，效率高</td></tr><tr><td>共享内存</td><td>多个进程映射同一物理内存段</td><td>最快，但需加锁处理同步</td></tr><tr><td>信号</td><td>内核向进程发送中断通知</td><td>适合处理控制类事件</td></tr><tr><td>套接字（socket）</td><td>基于网络协议，支持跨主机通信</td><td>网络服务程序或本地全双工通信</td></tr></tbody></table><p>这些方式都是由操作系统内核提供的数据结构或系统调用支持实现的。</p></li><li><p>线程通信（Intra-Process Communication）</p><p>线程之间共享同一地址空间，通信方式比进程更轻量：</p><ul><li>共享全局变量、堆对象</li><li>不需要内核参与，通信开销小</li><li>但需要手动<strong>加锁同步</strong>，如使用：</li></ul><table><thead><tr><th>同步机制</th><th>原理</th></tr></thead><tbody><tr><td>互斥锁（mutex）</td><td>保证同一时刻只有一个线程访问资源</td></tr><tr><td>条件变量</td><td>用于线程间通知与等待</td></tr><tr><td>读写锁</td><td>允许多个读者或一个写者</td></tr><tr><td>信号量</td><td>计数同步机制</td></tr><tr><td>原子操作（atomic）</td><td>硬件层面无锁同步</td></tr></tbody></table></li><li><p>上下文切换</p><p>上下文切换（Context Switching）是操作系统<strong>在不同任务之间切换</strong>的一种机制，用于使<strong>多个任务（如进程或线程）之间共享处理器资源</strong>，以便实现多任务处理和资源的高效利用。</p><ul><li><p>上下文切换的过程</p></li><li><p><strong>保存当前任务的上下文</strong> ：当操作系统决定将处理器从一个任务切换到另一个任务时，会首先保存当前正在运行任务的状态。这包括程序计数器（PC）、寄存器、堆栈指针和其他相关状态信息。这些信息被称为任务的 “上下文”。</p></li><li><p><strong>恢复目标任务的上下文</strong> ：操作系统然后加载目标任务的上下文，包括恢复其程序计数器、寄存器和堆栈指针等。这样，目标任务就可以从上次被中断的地方继续执行。</p></li><li><p><strong>切换任务</strong> ：完成上下文保存和加载后，处理器开始执行目标任务。</p></li><li><p>上下文切换的作用</p><ul><li><strong>多任务处理</strong> ：允许计算机同时运行多个任务，通过在任务之间快速切换，使用户感觉多个任务在同时进行。</li><li><strong>资源分配</strong> ：操作系统可以根据任务的优先级和需求，合理分配处理器时间，确保重要任务能够及时得到处理。</li><li><strong>响应能力</strong> ：通过上下文切换，操作系统可以在不同任务之间快速切换，确保系统对用户输入和外部事件的响应能力。</li></ul></li><li><p>上下文切换的开销</p><ul><li><strong>时间开销</strong> ：保存和恢复任务的上下文需要一定的时间，这会增加系统的总体延迟。</li><li><strong>内存开销</strong> ：每个任务的上下文需要在内存中存储，这会占用一定的内存资源。</li><li><strong>缓存一致性维护</strong> ：在多核处理器中，上下文切换可能导致缓存不一致问题，需要额外的处理来确保数据的一致性。</li></ul></li><li><p>进程切换步骤</p><ul><li>保存当前进程的<strong>上下文信息</strong>（寄存器、PC、栈指针、页表信息等）</li><li>更新内核调度器的数据结构（如就绪队列）</li><li>切换页目录（地址空间切换）</li><li>恢复目标进程上下文</li><li>切换内核栈、用户栈，加载目标程序继续执行</li></ul></li></ul><p>由于地址空间、页表和资源都要切换，<strong>进程切换开销大</strong>。</p><ul><li>线程切换步骤（同进程内）<ul><li>不需要切换页表（地址空间不变）</li><li>只切换寄存器、程序计数器、栈指针等</li><li>若是内核线程，则仍需陷入内核调度；若是用户线程（如协程），可在用户空间调度</li></ul></li></ul><p>相比进程切换，<strong>线程切换开销更小、更快</strong>。</p></li></ul><h2 id="3-协程">3. 协程</h2><p>协程：<a href="https://mp.weixin.qq.com/s/RctE_ApJnLHnmEtnrT7OEw">https://mp.weixin.qq.com/s/RctE_ApJnLHnmEtnrT7OEw</a></p><ol start="4"><li><p>两个函数同一个地址执行问题</p></li><li><p>内存中堆栈，数据区哪里读取快</p></li></ol><h2 id="6-虚拟内存">6. 虚拟内存</h2><h3 id="1-什么是虚拟内存">(1) 什么是虚拟内存</h3><p>虚拟内存是操作系统提供的一种<em>内存管理技术</em>。它为每个正在运行的<strong>进程</strong>（程序）创建了一个<strong>假象</strong>，即该进程拥有一个<strong>巨大的、连续的、私有/独立的内存空间</strong>，这个空间被称为虚拟地址空间 (Virtual Address Space)。实际上，这个虚拟地址空间可能<strong>远大于</strong>计算机实际拥有的物理内存（RAM）。</p><p>核心思想是：</p><ul><li>地址分离：程序使用的是虚拟地址，而实际的硬件内存（RAM）使用的是物理地址。</li><li>按需映射：操作系统和 CPU 中的硬件单元（主要是内存管理单元 - MMU (Memory Management Unit)）负责将程序使用的虚拟地址动态地映射到物理内存中的实际物理地址。</li><li>部分加载：并非程序的所有部分都需要同时驻留在物理内存中。只有当前活跃的部分（例如，正在执行的代码、正在访问的数据）才需要加载到 RAM 中。不常用的部分可以存放在速度较慢但容量更大的二级存储设备上（如硬盘或 SSD）。</li><li>分页机制：<ul><li>虚拟地址空间被划分为<strong>固定大小的块，称为页</strong> (Page)。</li><li>物理内存也被划分为相同大小的块，称为页框 (Page Frame) 或物理页。</li><li>操作系统<strong>为每个进程维护一个页表</strong> (Page Table)，用于<strong>记录虚拟页到物理页框的映射关系</strong>，或者标记某个虚拟页当前存储在磁盘上的位置。</li></ul></li></ul><h3 id="2-为什么需要虚拟内存">(2) 为什么需要虚拟内存</h3><ul><li>允许运行大于物理内存的程序：这是最直接的好处。如果一个程序需要的内存超过了可用的 RAM，虚拟内存系统可以将程序中暂时不用的部分（页）存储在磁盘上（这个过程称为换出 (swapping out) 或分页到磁盘 (paging to disk)）。当需要这些数据时，再将其从磁盘调入内存（换入 (swapping in) 或缺页调入 (demand paging)）。这使得用户可以运行非常大的应用程序，或者同时运行更多的应用程序，而不会因为物理内存不足而受限。</li><li>内存保护和隔离：<strong>每个进程都有自己独立的虚拟地址空间</strong>。这意味着一个进程看到的地址 0x1000 和另一个进程看到的地址 0x1000 映射到的是物理内存中完全不同的位置（或者一个在内存，一个在磁盘）。这种隔离机制可以<strong>防止一个进程意外或恶意地访问或修改另一个进程的内存数据</strong>，或者操作系统的核心数据。这极大地提高了系统的稳定性和安全性。如果一个程序崩溃，它通常不会影响到其他正在运行的程序或操作系统本身。</li><li>简化程序员的内存管理：<strong>物理内存往往是不连续的</strong>，因为硬件设备可能占用部分物理内存地址空间，或者由于内存碎片等原因。在没有虚拟内存时，程序员需要考虑物理内存的不连续性，这使得程序的编写和内存分配变得复杂。虚拟内存可以将物理内存中的不连续存储空间映射为虚拟内存中的连续地址空间。程序员在编写程序时，可以假设自己拥有一个巨大且连续的地址空间，而不必关心物理内存的实际大小、碎片情况，或者其他程序正在使用哪些内存。链接器和加载器也因此变得简单，因为程序可以在编译时假设一个标准的起始地址，实际加载到物理内存的哪个位置由操作系统在运行时决定和映射。例如，一个程序可能需要 100MB 的连续内存来存储一个大型数组。在物理内存中，可能没有 100MB 的连续空间，但通过虚拟内存，系统可以将分散在物理内存中的多个小块内存空间组合起来，映射成一个连续的虚拟内存区域提供给程序使用。这样程序员就可以像操作连续内存一样来操作这个虚拟内存区域，而无需关心物理内存的实际情况。</li><li>高效、公平地共享物理内存：多个进程可以并发运行，它们的虚拟页根据需要映射到可用的物理页框。操作系统可以只将每个进程当前“工作集”（最活跃的页）保留在 RAM 中，从而让有限的物理内存得到高效利用。操作系统可以使用各种页面替换算法（如 LRU - 最近最少使用）来决定当内存不足时哪些页应该被换出到磁盘，以优化整体系统性能。</li><li>支持共享内存：虽然默认情况下进程的地址空间是隔离的，但虚拟内存机制也允许不同进程的虚拟地址空间中的某些页映射到相同的物理内存页框。这使得进程间可以高效地共享数据和代码。例如，动态链接库 (DLLs 或 .so 文件) 的代码段可以在物理内存中只存储一份，然后被映射到多个使用该库的进程的虚拟地址空间中，节省了内存。</li><li>高效的文件 I/O：虚拟内存允许将文件或文件的一部分直接映射到进程的虚拟地址空间中。当程序访问这些映射的内存区域时，操作系统会自动处理从磁盘读取数据到内存，或将修改写回磁盘。这简化了文件操作，并且在某些情况下比传统的读写操作更高效。</li><li>程序重定位：由于程序使用的是虚拟地址，并且这些虚拟地址是通过页表动态映射到物理地址的，所以程序可以被加载到物理内存的任何可用位置，而无需修改程序代码中的地址引用。</li></ul><h3 id="3-虚拟内存工作流程">(3) 虚拟内存工作流程</h3><p>当 CPU 执行一条指令需要访问某个虚拟地址时：</p><p>MMU 会查找页表，尝试将该虚拟地址转换为物理地址；</p><ul><li>如果页表中对应的虚拟页当前就在物理内存中（即映射有效），MMU 就完成地址转换，CPU 继续访问物理内存。</li><li>如果页表中指示该虚拟页不在物理内存中（可能它从未被加载，或者已被换出到磁盘），就会发生一个缺页异常 (Page Fault)。<br>操作系统接管缺页异常处理：<br>找到一个空闲的物理页框。如果找不到，就根据页面替换算法选择一个当前在内存中的页将其换出到磁盘；<br>将目标虚拟页从磁盘加载到选定的物理页框中；<br>更新页表，建立新的虚拟页到物理页框的映射；<br>重新执行导致缺页的指令。此时，由于页已在内存中，访问会成功。</li></ul><h3 id="4-malloc-出来的内存">(4) malloc 出来的内存</h3><ul><li>位置 ：malloc 出来的内存是在虚拟内存中分配的。</li><li>映射到物理内存 ：虽然虚拟内存提供了逻辑上的连续地址空间，但这些虚拟地址需要映射到物理内存或磁盘上的实际存储位置。当程序访问通过 malloc 分配的内存时，操作系统会通过内存管理单元（MMU）将虚拟地址转换为物理地址。如果物理内存不足，操作系统可能会将部分数据交换到磁盘上的交换空间（swap space）。</li><li>内存分配机制 ：malloc 是 C/C++ 中的一个内存分配函数，它从程序的堆（heap）中分配内存。堆是虚拟地址空间的一部分，由操作系统管理，用于动态内存分配。</li></ul><h3 id="5-虚拟内存的分配机制">(5) 虚拟内存的分配机制</h3><ul><li><p><strong>进程虚拟地址空间 (VAS) 的初始化与布局</strong></p><ul><li>当一个进程被创建时，操作系统会为其分配一个巨大且独立的<strong>虚拟地址空间</strong>。这个空间的大小通常由 CPU 架构决定（例如，32 位系统上是 4GB，64 位系统上则大得多，如 256TB 或更大，尽管实际可用的会受操作系统限制）。</li><li>这个虚拟地址空间并不是一块“空白”的区域，操作系统会预先设定其大致的布局结构，通常包括：<ul><li><strong>代码段 (Text Segment)</strong>：存放程序的可执行指令，通常是<strong>只读</strong>的。</li><li><strong>全局区（Global Area）/静态存储区</strong>：存放全局变量和静态变量，程序运行结束操作系统自动释放（生命周期：从程序开始到结束）。<ul><li>已初始化的全局/静态变量（Data Segment）</li><li>未初始化的全局/静态变量（Block Started by Symbol, BSS 段）,这些变量在程序加载时会被初始化为零</li></ul></li><li><strong>常量存储区</strong>：存放的是<strong>常量</strong>（const），不允许修改，程序运行结束自动释放。全局常量、字符串常量（.rodata 常量区）（虚函数表存储在这里）</li><li><strong>堆 (Heap)</strong>：用于动态内存分配（例如，通过 C++ 的 <code>new</code> 或 C 的 <code>malloc</code> 分配的内存）。堆通常<strong>从低地址向高地址增长</strong>。</li><li><strong>栈 (Stack)</strong>：用于存储<strong>函数调用的局部变量、返回地址和函数参数</strong>。<strong>每个线程都有自己的栈，通常从高地址向低地址增长</strong>。</li><li><strong>内存映射区域 (Memory-Mapped Region)</strong>：用于加载动态链接库 (共享库)、内存映射文件等。</li></ul></li></ul></li><li><p><strong>虚拟地址范围的“预留”与“提交”</strong><br>当程序请求分配内存时（例如，<code>new</code> 一个对象，或者 <code>malloc</code> 一块内存），通常发生的是以下情况：</p><ul><li><strong>预留 (Reserve) 虚拟地址</strong> (开销较小)：<ul><li>首先，操作系统（或用户态内存管理器）会在进程的虚拟地址空间中找到一块足够大的、未被占用的连续虚拟地址范围，并将这个范围<strong>标记</strong>为“已预留”给该次分配。</li><li>这个阶段<strong>通常不涉及物理内存的实际分配</strong>。仅仅是在进程的虚拟内存布局图中“画了一块地”，说明这块虚拟地址以后可能会被使用。这个操作相对轻量，主要是更新操作系统内核中管理进程虚拟内存的数据结构（如 Linux 中的 <code>vm_area_struct</code> 或 Windows 中的 Virtual Address Descriptors - VADs）。</li></ul></li><li><strong>提交 (Commit) 内存</strong>（开销较大）：<ul><li>当程序<strong>实际访问</strong>（通常是写入）预留的虚拟地址范围中的某个页面时，如果该虚拟页面尚未映射到物理内存，就会触发一个<strong>缺页异常 (Page Fault)</strong>。</li><li>此时，操作系统才会介入，执行以下操作：<ul><li>分配一个<strong>物理内存页框 (Physical Page Frame)</strong>。</li><li>如果需要（例如，对于 BSS 段或堆上的新页面），将该物理页框清零。</li><li>更新进程的<strong>页表 (Page Table)</strong>，建立该虚拟页面到新分配的物理页框的映射关系。</li><li>重新执行导致缺页的指令。</li></ul></li></ul><ul><li>这个将虚拟页面与物理存储（RAM 或磁盘上的页面文件/交换空间）关联起来的过程称为“提交内存”。操作系统会跟踪已提交内存的总量（Commit Charge），确保不超过系统（物理内存 + 页面文件总大小）的承载能力。只有提交的内存才真正占用了物理资源。</li></ul></li></ul></li><li><p><strong>按需分配物理资源</strong></p><p>物理内存页框和磁盘上的交换空间（用于存储被换出的页面）<strong>只有在虚拟页面被实际访问时</strong>才会被分配和映射。</p><ul><li><strong>节省物理内存</strong>：程序可以预留大量虚拟地址空间，但只有实际用到的部分才会消耗物理内存。</li><li><strong>启动速度快</strong>：程序启动时不需要将所有代码和数据都加载到内存中。</li></ul></li><li><p><strong>不同区域的分配特点</strong></p><ul><li><strong>堆分配</strong>：<ul><li><strong>用户态</strong>的内存分配器（如 <code>glibc</code> 中的 <code>ptmalloc</code>，C++ 的 <code>new</code> 操作符底层通常也依赖这类分配器）负责管理堆区域。</li><li>当应用程序通过 <code>malloc</code> 或 <code>new</code> 请求内存时，分配器首先尝试从已经向操作系统申请并管理的一块或多块大的<strong>虚拟内存</strong>区域（称为 arenas 或 heaps）中分配一小块。</li><li>如果现有区域不足，分配器会通过系统调用（如 <code>brk</code>/<code>sbrk</code>（较旧）或 <code>mmap</code>（更现代、更灵活））向操作系统申请扩大堆的虚拟地址范围（预留更多虚拟地址）。</li><li>实际的物理内存分配仍然遵循按需分页的原则。</li></ul></li></ul></li><li><p><strong>栈分配</strong>：</p><ul><li>栈空间通常在线程创建时分配一个初始的虚拟地址范围。</li><li>栈的增长通常是自动的（由 CPU 在函数调用时压栈实现）。如果超出了已分配（并提交）的栈区域，会触发一个特殊的缺页（栈溢出保护页），操作系统可能会尝试扩展栈的虚拟地址范围（如果未达到上限），或者终止程序。</li></ul></li><li><p><strong>内存映射文件和共享内存</strong>：</p><ul><li>使用 <code>mmap</code> (Linux/Unix) 或 <code>CreateFileMapping</code>/<code>MapViewOfFile</code> (Windows) 这类系统调用时，操作系统会在进程的虚拟地址空间中预留一段地址范围，并将其与文件或共享内存对象关联起来。</li><li>当访问这些虚拟地址时，数据会按需从文件或共享内存对象中加载到物理内存页框。</li></ul></li><li><p><strong>内存的释放</strong></p><ul><li>当程序通过 <code>free</code> 或 <code>delete</code> 释放堆内存时：<ul><li>用户态内存分配器会将这块内存<strong>标记为可用</strong>，并可能在内部进行合并，以供后续分配。</li><li>分配器<strong>不一定会立即将这块虚拟地址范围归还给操作系统</strong>，除非积累了足够大的连续空闲块。</li></ul></li><li>当通过 <code>munmap</code> (Linux/Unix) 或 <code>UnmapViewOfFile</code> (Windows) 解除内存映射，或者进程终止时：<ul><li>操作系统会回收相应的虚拟地址范围，使其在进程的虚拟地址空间中变为未分配状态。</li><li>相关的页表项会被清除。</li><li>这些虚拟页面之前占用的物理页框会根据情况被释放：<ul><li>如果页面是“脏”的（被修改过）并且是匿名页面（如堆、栈），其内容可能需要先被写入到磁盘的交换空间。</li></ul></li><li>如果页面是干净的，或者映射自文件且未被私有修改，则物理页框可以直接被回收利用。</li></ul></li></ul></li></ul><h3 id="6-共享内存的实现">(6) 共享内存的实现</h3><p>共享内存是一种允许两个或多个<strong>进程</strong>访问同一块物理内存区域的进程间通信 (IPC) 机制。这使得不同进程可以非常高效地交换数据，因为数据不需要在进程的地址空间之间进行复制。其实现主要依赖于操作系统内核以及 CPU 的内存管理单元 (MMU) 对虚拟内存系统的支持。正常情况下，每个进程都有其自己独立的、私有的虚拟地址空间。操作系统通过为每个进程维护不同的页表，将这些虚拟地址映射到物理内存中的不同物理页框。这种隔离是出于保护和安全的目的，防止一个进程干扰另一个进程。共享内存的目标是打破这种完全的隔离，允许某些物理内存被多个进程共同访问。操作系统在物理内存中分配一块区域作为共享段，对于每一个希望共享该内存段的进程，操作系统会在该进程的<strong>虚拟地址空间</strong>中分配一个区域，然后操作系统修改这些进程的<strong>页表</strong>，使得它们各自虚拟地址空间中的这个区域（这些虚拟地址可能各不相同）都映射到<strong>同一块共享的物理内存页框</strong>。共享内存的创建、管理和销毁完全由操作系统内核控制。进程不能自行指定或访问其他进程的私有内存。它们必须通过操作系统提供的系统调用来请求或参与共享内存。</p><h1 id="设计模式">设计模式</h1><h2 id="1-工厂模式">1. 工厂模式</h2><h2 id="2-单例模式">2. 单例模式</h2><h3 id="1-概念">(1) 概念</h3><ul><li>定义：一个类在程序运行过程中只能存在一个实例，并提供全局访问。常用于资源管理类（如日志、数据库连接池、配置管理器等）。它通过将构造函数私有化，并提供一个公共的静态方法来获取唯一实例。</li><li>懒汉模式 vs. 饿汉模式<table><thead><tr><th>对比项</th><th>懒汉模式（Lazy）</th><th>饿汉模式（Eager）</th></tr></thead><tbody><tr><td>实例创建时机</td><td><strong>第一次调用 <code>getInstance()</code> 时</strong> 创建</td><td>程序启动时（类加载时）创建</td></tr><tr><td>是否延迟加载</td><td>是（节省资源）</td><td>否（占资源，但初始化快）</td></tr><tr><td>实现难度</td><td>稍高，需要考虑线程安全问题</td><td>简单，但无条件创建实例</td></tr><tr><td>线程安全处理</td><td>需要手动加锁或使用现代 C++ 特性</td><td>靠静态变量初始化，天然线程安全</td></tr></tbody></table></li></ul><h3 id="2-实现">(2) 实现</h3><ul><li><p>实现时需要：</p><ul><li>将构造函数和析构函数私有化（private）</li><li>定义一个 public 的函数用于获取唯一实例</li><li>手动禁用拷贝构造函数（Singleton(const Singleton&amp;)）和赋值操作符（Singleton&amp; operator=(const Singleton&amp;)）<ul><li>如果没有禁用，则可以在程序运行中获得多个实例，打破了唯一性。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Singleton&amp; a = Singleton::<span class="hljs-built_in">getInstance</span>();<br>Singleton b = a;              <span class="hljs-comment">// 调用拷贝构造，复制一份</span><br>Singleton c;<br>c = Singleton::<span class="hljs-built_in">getInstance</span>(); <span class="hljs-comment">// 调用赋值操作符，复制一份</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>懒汉 + C++11 局部静态变量（线程安全）（Meyers Singleton - 《Effective C++》）<br>在 C++11 及以后标准中，局部静态变量（function-local static）的初始化是线程安全的。编译器会确保<strong>只会有一个线程执行初始化代码</strong>，其它线程等待初始化完成后再访问，从而保证了懒汉式单例的线程安全性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">static</span> Singleton instance;  <span class="hljs-comment">// C++11: 线程安全的懒汉初始化</span><br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot; Singleton working!\n&quot;</span>;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>()  &#123; std::cout &lt;&lt; <span class="hljs-string">&quot; Constructor called\n&quot;</span>; &#125;<br>    ~<span class="hljs-built_in">Singleton</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot; Destructor called\n&quot;</span>; &#125;<br><br>    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">const</span> Singleton&amp;) = <span class="hljs-keyword">delete</span>; <span class="hljs-comment">// 拷贝构造函数</span><br>    Singleton&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Singleton&amp;) = <span class="hljs-keyword">delete</span>; <span class="hljs-comment">// 赋值操作符</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  Singleton::<span class="hljs-built_in">getInstance</span>().<span class="hljs-built_in">doSomething</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>饿汉</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot;Constructor called (Eager)\n&quot;</span>; &#125;<br>    ~<span class="hljs-built_in">Singleton</span>() &#123; std::cout &lt;&lt; <span class="hljs-string">&quot; Destructor called (Eager)\n&quot;</span>; &#125;<br>    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">const</span> Singleton&amp;) = <span class="hljs-keyword">delete</span>; <span class="hljs-comment">// 拷贝构造函数</span><br>    Singleton&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Singleton&amp;) = <span class="hljs-keyword">delete</span>; <span class="hljs-comment">// 赋值操作符</span><br>    <span class="hljs-type">static</span> Singleton instance;  <span class="hljs-comment">// 初始化时就创建</span><br>&#125;;<br><br>Singleton Singleton::instance;  <span class="hljs-comment">// 全局初始化</span><br></code></pre></td></tr></table></figure><p>值得注意的是，这里类内的<code>instance</code>是静态成员变量，static 成员变量是属于类本身，不属于某个对象，所以必须 在类外部再定义一次，编译器才会真正为它分配内存。<code>static Singleton instance;</code> 是在类中声明（没有构造发生）,<code>Singleton Singleton::instance;</code> 是定义 + 初始化（调用默认构造函数）。</p><p>从 C++17 开始，可以在类内直接定义并初始化静态成员变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">inline</span> <span class="hljs-type">static</span> Singleton instance&#123;&#125;;  <span class="hljs-comment">// 定义 + 初始化</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>不用再写类外那行 <code>Singleton Singleton::instance;</code>，也不会再产生“看起来初始化了两次”的疑问。</p><p>另：懒汉模式的实现方式不同，它没有用类的 static 成员变量，而是用了<strong>函数内的 static 局部变量</strong>（生命周期和可见性都在函数内，因此不需要类外定义），两者机制完全不同。</p><p>另 2：饿汉模式是线程安全的，但可能存在初始化顺序问题（static initialization order fiasco）。如果 Singleton::instance 在多个翻译单元（.cpp 文件）中都被引用，可能使用还未构造的静态对象，出现未定义行为或崩溃。</p></li></ul><h1 id="resources">Resources:</h1><p><a href="https://zhuanlan.zhihu.com/p/30556448622">https://zhuanlan.zhihu.com/p/30556448622</a><br><a href="https://www.nowcoder.com/discuss/353159115046330368">https://www.nowcoder.com/discuss/353159115046330368</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>interview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Understanding view matrix</title>
    <link href="/2025/04/03/view-mat/"/>
    <url>/2025/04/03/view-mat/</url>
    
    <content type="html"><![CDATA[<p>While completing the MVP transformations in my software renderer, I spent quite a while understanding how to build a view matrix (the lookat funtion). So I decided to record my thoughts here for future references.</p><h2 id="what-is-a-view-matrix">What is a view matrix?</h2><p>See the transformation pipeline (<a href="https://learnopengl-cn.github.io/01%20Getting%20started/08%20Coordinate%20Systems/">https://learnopengl-cn.github.io/01 Getting started/08 Coordinate Systems/</a>) below.</p><p><img src="coordinate_systems.png" alt="coordinate transformation"></p><p>In short, a view matrix is used to transform the coordinates in the world space to view space, i.e., to the view of camera/eye.</p><h2 id="how-to-transform-coordinates-to-another-coordinate-system">How to transform coordinates to another coordinate system?</h2><p>We know that in Euclidean space, coordinates can be given by a point (the origin) and a basis (here we think of three vectors). So, how to transform coordinates in a coordinate system to a different coordinate system (in fact this is what view matrices do)?</p><p>First, think of a point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(x,y,z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span> in a frame <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>O</mi><mo separator="true">,</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(O, \vec{i},\vec{j},\vec{k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2274em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> (origin and three vectors). Point P can be denoted as: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mi>O</mi><mo>+</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><mi>i</mi><mo>⃗</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><mi>j</mi><mo>⃗</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><mi>k</mi><mo>⃗</mo></mover></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">P = O + \begin{bmatrix} \vec{i} &amp; \vec{j} &amp; \vec{k} \end{bmatrix} \begin{bmatrix} x \\ y \\ z \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span>, i.e.,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>O</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><mi>i</mi><mo>⃗</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><mi>j</mi><mo>⃗</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><mi>k</mi><mo>⃗</mo></mover></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\vec{OP} = \begin{bmatrix} \vec{i} &amp; \vec{j} &amp; \vec{k} \end{bmatrix} \begin{bmatrix} x \\ y \\ z \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">OP</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span>.</p><p>Conventionally, we write coordinates as column vectors.</p><p>Then, think of another frame <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>O</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><mover accent="true"><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><msup><mi>j</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(O&#x27;, \vec{i&#x27;},\vec{j&#x27;},\vec{k&#x27;})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2274em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> (our target frame). If we transform P from the first frame to the second one, we will get <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><msup><mi>O</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><msup><mi>j</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">P&#x27; = O&#x27; + \begin{bmatrix} \vec{i&#x27;} &amp; \vec{j&#x27;} &amp; \vec{k&#x27;} \end{bmatrix} \begin{bmatrix} x&#x27; \\ y&#x27; \\ z&#x27; \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8352em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span>, i.e.,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msup><mi>o</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><mo>⃗</mo></mover><mo>=</mo><mo>+</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><msup><mi>j</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mover accent="true"><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\vec{o&#x27;p&#x27;} = + \begin{bmatrix} \vec{i&#x27;} &amp; \vec{j&#x27;} &amp; \vec{k&#x27;} \end{bmatrix} \begin{bmatrix} x&#x27; \\ y&#x27; \\ z&#x27; \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1553em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">o</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9187em;"><span style="top:-2.9413em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4187em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>Remember that we can express the second basis in terms of the original basis by linear combination because a basis can span the entire vector space. This can be represented as:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo>=</mo><msub><mi>a</mi><mn>11</mn></msub><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mo>+</mo><msub><mi>a</mi><mn>21</mn></msub><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mo>+</mo><msub><mi>a</mi><mn>31</mn></msub><mover accent="true"><mi>k</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{i&#x27;} = a_{11}\vec{i} + a_{21}\vec{j} + a_{31}\vec{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9609em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0925em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.137em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1274em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msup><mi>j</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo>=</mo><msub><mi>a</mi><mn>12</mn></msub><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mo>+</mo><msub><mi>a</mi><mn>22</mn></msub><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mo>+</mo><msub><mi>a</mi><mn>33</mn></msub><mover accent="true"><mi>k</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{j&#x27;} = a_{12}\vec{i} + a_{22}\vec{j} + a_{33}\vec{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1553em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9609em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2469em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0925em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.137em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1274em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>⃗</mo></mover><mo>=</mo><msub><mi>a</mi><mn>13</mn></msub><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mo>+</mo><msub><mi>a</mi><mn>23</mn></msub><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mo>+</mo><msub><mi>a</mi><mn>33</mn></msub><mover accent="true"><mi>k</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{k&#x27;} = a_{13}\vec{i} + a_{23}\vec{j} + a_{33}\vec{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0925em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">13</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.137em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1274em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>.</p><p>These coefficients can be written as a matrix M:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>13</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>23</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>31</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>32</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>33</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M = \begin{bmatrix} a_{11} &amp; a_{12} &amp; a_{13} \\a_{21} &amp; a_{22} &amp; a_{23} \\a_{31} &amp; a_{32} &amp; a_{33}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">13</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>Since both bases are formed by three linear independent vectors the rows and columns in M are linear independent. It means that M is non-singular (非奇异的). A non-singular matrix (or invertible matrix) is a square matrix that <strong>has an inverse</strong>. This means:</p><ul><li>Its determinant is non-zero (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">det(M) \neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>).</li><li>Its rows (and columns) are linearly independent.</li><li>It is full-rank (rank equals the number of rows/columns).</li><li>It ensures Unique solutions to Ax=b.</li></ul><p>This is to say, we can find an <strong>invertible</strong> matrix M to represent the new basis with the original one. It can be written as:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msup><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">[\vec{i}&#x27;, \vec{j}&#x27;, \vec{k}&#x27;] = [\vec{i}, \vec{j}, \vec{k}] M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2274em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2274em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>.</p><p>Now, we represent <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>O</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mrow><mi>O</mi><msup><mi>O</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mrow><msup><mi>O</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>P</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{OP} = \vec{OO&#x27;} + \vec{O&#x27;P}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">OP</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>.</p><p>Then we have:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mrow><mi>O</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mover accent="true"><mrow><mi>O</mi><msup><mi>O</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mrow><msup><mi>O</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>P</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{OP} = [\vec{i}\ \vec{j}\ \vec{k}]\begin{bmatrix}x\\y\\z\end{bmatrix} = \vec{OO&#x27;} + \vec{O&#x27;P}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">OP</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>+</mo><mo stretchy="false">[</mo><msup><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext> </mtext><msup><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext> </mtext><msup><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">[\vec{i}\ \vec{j}\ \vec{k}]\begin{bmatrix}x\\y\\z\end{bmatrix} = [\vec{i}\ \vec{j}\ \vec{k}]\begin{bmatrix}O&#x27;_x \\O&#x27;_y \\O&#x27;_z\end{bmatrix} +[\vec{i}&#x27;\ \vec{j}&#x27;\ \vec{k}&#x27;]\begin{bmatrix}x&#x27; \\y&#x27; \\z&#x27;\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6231em;vertical-align:-1.5616em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0616em;"><span style="top:-4.2216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.7984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mopen">[</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>+</mo><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mi>M</mi><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">[\vec{i}\ \vec{j}\ \vec{k}]\begin{bmatrix}x\\y\\z\end{bmatrix} = [\vec{i}\ \vec{j}\ \vec{k}]\begin{bmatrix}O&#x27;_x \\O&#x27;_y \\O&#x27;_z\end{bmatrix} +[\vec{i}\ \vec{j}\ \vec{k}] M\begin{bmatrix}x&#x27; \\y&#x27; \\z&#x27;\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6231em;vertical-align:-1.5616em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0616em;"><span style="top:-4.2216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.7984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mo stretchy="false">[</mo><mover accent="true"><mi>i</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>j</mi><mo>⃗</mo></mover><mtext> </mtext><mover accent="true"><mi>k</mi><mo>⃗</mo></mover><mo stretchy="false">]</mo><mrow><mo fence="true">(</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>+</mo><mi>M</mi><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">[\vec{i}\ \vec{j}\ \vec{k}]\begin{bmatrix}x\\y\\z\end{bmatrix} = [\vec{i}\ \vec{j}\ \vec{k}]\left(\begin{bmatrix}O&#x27;_x \\O&#x27;_y \\O&#x27;_z\end{bmatrix} +M\begin{bmatrix}x&#x27; \\y&#x27; \\z&#x27;\end{bmatrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6231em;vertical-align:-1.5616em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">i</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span><span style="top:-3.2285em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="3.600em" viewbox="0 0 875 3600"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0616em;"><span style="top:-4.2216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.7984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="3.600em" viewbox="0 0 875 3600"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">(</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>−</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}x&#x27; \\y&#x27; \\z&#x27;\end{bmatrix} =M^{-1}\left(\begin{bmatrix}x \\y \\z\end{bmatrix} -\begin{bmatrix}O&#x27;_x \\O&#x27;_y \\O&#x27;_z\end{bmatrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6231em;vertical-align:-1.5616em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="3.600em" viewbox="0 0 875 3600"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0616em;"><span style="top:-4.2216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.7984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="3.600em" viewbox="0 0 875 3600"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>The proof above gives us the formula to transform coordinates from one frame to another. We can represent this expression using homogeneous coordinates as:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>−</mo><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>−</mo><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>−</mo><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; -O&#x27;_x \\0 &amp; 1 &amp; 0 &amp; -O&#x27;_y \\0 &amp; 0 &amp; 1 &amp; -O&#x27;_z \\0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}\begin{bmatrix}x \\y \\z \\1\end{bmatrix} =\begin{bmatrix}x-O&#x27;_x \\y-O&#x27;_y \\z-O&#x27;_z \\1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8231em;vertical-align:-2.1616em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8231em;vertical-align:-2.1616em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}x&#x27; \\y&#x27; \\z&#x27; \\1\end{bmatrix} =M^{-1}\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; -O&#x27;_x \\0 &amp; 1 &amp; 0 &amp; -O&#x27;_y \\0 &amp; 0 &amp; 1 &amp; -O&#x27;_z \\0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}\begin{bmatrix}x \\y \\z \\1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8231em;vertical-align:-2.1616em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> refers a 4x4 matrix consisting of the 3x3 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> and the required additional row and column for homogeneous coordinates. That is to say, to transform coordinates, we need to first get the M between two bases (for rotation part) and then the origin of the new basis (for translation part).</p><h2 id="the-lookat-function">The lookat function</h2><p>We use a lookat function to get the rotation part and the translation part and then construct our view matrix.</p><p>Before transforming, we need to construct our view space first by set up the camera positions and basis. To define a camera we need 4 variables: its position in world space, the direction it’s looking at (<em>d</em>), a vector pointing to the right (<em>r</em>) and a vector pointing upwards from the camera (<em>u</em>). See the figure below.</p><p><img src="camera.png" alt="camera"></p><p>Here, the look-at direction can be calculated based on the camera’s position and the target it looks at. In practice, our lookat function has 3 input arguments: <code>eye</code> (the camera’s position), <code>center</code> (the position of the target it looks at), and <code>up</code> (<em>u’</em>, a vector that points upwards in world space, which is different from the vector pointing upwards from the camera). Here, <code>up</code>(<em>u’</em>) helps calculate <em>r</em>. And finally <em>u</em> can be calculated by <em>d</em> and <em>r</em>.</p><p>In OpenGL, we usually set <code>up</code> as (0,1,0), same as the y-axis in world space. This way, after determining the <em>d/r/u</em> step by step (determine <em>d</em> by center-eye; then determine <em>r</em> by the cross product of <em>d</em> and <em>u’</em>; finally determine <em>u</em> by the cross product of <em>d</em> and <em>r</em>; remember to normalize <em>d</em> and <em>r</em>), we can ensure that the <em>d</em>, <em>u</em>, and <em>u’</em> are in the same plane, and this plane is always perpendicular to the xOz plane.</p><p>Imagine we are controlling a person’s head in a game scene. We can slide the mouse left and right to change the Yaw and turn your head left and right, and we can slide the mouse up and down to change the Pitch to look up or down, but we cannot change the Roll to tilt the person’s head left and right.</p><p>In fact, the camera coordinate system derived when the incoming <em>u’</em> is determined will never allow you to tilt your head, because once you tilt your head, the v vector, u vector, and u’ vector will no longer be in the same plane, which contradicts the above derivation.</p><p>Assuming another scenario, simulating flying a plane, then if you want to roll, you should change the incoming u’ in real time, and not fix it as (0,1,0).</p><p>Then it comes to construct M. Our original coordinate system is the world space, which is:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}1 &amp; 0 &amp; 0 \\0 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>Our new coordinate system is our camera space, which is:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}r_x &amp; u_x &amp; d_x \\r_y &amp; u_y &amp; d_y \\r_z &amp; u_z &amp; d_z\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>Since the basis of the world space is an identity matrix, it’s clear that here M equals the basis of the camera space, i.e.,</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M =\begin{bmatrix}r_x &amp; u_x &amp; d_x \\r_y &amp; u_y &amp; d_y \\r_z &amp; u_z &amp; d_z\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>When calculating <em>d/r/u</em> we normalize <em>d</em> and <em>r</em> and so ensure that <em>u</em> is also a unit vector. That is to say, M is an orthonormal matrix (Ortho = perpendicular, Normal = unit length). By the way, a matrix is orthonormal if:</p><ul><li>Its rows and columns are unit vectors (i.e., each has length 1).</li><li>All rows are perpendicular to each other, and all columns are perpendicular to each other.</li></ul><p>Since M is an orthonormal matrix, it has this awesome property: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mi>T</mi></msup><mo>=</mo><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M^T = M^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>. This is to say, we can get the inverse of M by its transpose matrix.</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>M</mi><mi>T</mi></msup><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M^{-1} =M^T =\begin{bmatrix}r_x &amp; r_y &amp; r_z \\u_x &amp; u_y &amp; u_z \\d_x &amp; d_y &amp; d_z\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>Cool! We finally get our view matrix!</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}x&#x27; \\y&#x27; \\z&#x27; \\1\end{bmatrix} =\begin{bmatrix}r_x &amp; r_y &amp; r_z &amp; 0 \\u_x &amp; u_y &amp; u_z &amp; 0 \\d_x &amp; d_y &amp; d_z &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; -O&#x27;_x \\0 &amp; 1 &amp; 0 &amp; -O&#x27;_y \\0 &amp; 0 &amp; 1 &amp; -O&#x27;_z \\0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}\begin{bmatrix}x \\y \\z \\1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8231em;vertical-align:-2.1616em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>M</mi><mi>a</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>x</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>u</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>d</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msubsup><mi>O</mi><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">ViewMatrix =\begin{bmatrix}r_x &amp; r_y &amp; r_z &amp; 0 \\u_x &amp; u_y &amp; u_z &amp; 0 \\d_x &amp; d_y &amp; d_z &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; -O&#x27;_x \\0 &amp; 1 &amp; 0 &amp; -O&#x27;_y \\0 &amp; 0 &amp; 1 &amp; -O&#x27;_z \\0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">Vi</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10903em;">wM</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8231em;vertical-align:-2.1616em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6616em;"><span style="top:-4.8216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.6216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.453em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.1984em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1616em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewbox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="reference">Reference</h2><p><a href="https://github.com/ssloy/tinyrenderer/wiki/Lesson-5:-Moving-the-camera">https://github.com/ssloy/tinyrenderer/wiki/Lesson-5:-Moving-the-camera</a><br><a href="https://zhuanlan.zhihu.com/p/526655326">https://zhuanlan.zhihu.com/p/526655326</a><br><a href="https://www.zhihu.com/question/447781866/answer/1859618164">https://www.zhihu.com/question/447781866/answer/1859618164</a></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 202 L03 and L04 - Shadows</title>
    <link href="/2025/04/01/GAMES202-L0304-Shadow/"/>
    <url>/2025/04/01/GAMES202-L0304-Shadow/</url>
    
    <content type="html"><![CDATA[<h1 id="shadow-mapping">Shadow Mapping</h1><h2 id="concepts">Concepts</h2><ul><li>A 2-Pass Algorithm<ul><li>The light pass generates the SM (output a depth buffer from the light source)</li><li>The camera pass uses the SM (Render a standard image from eye; Project visible points in eye view back to light source view (transform from world space to light view space by matrices); if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></msub><mo>&gt;</mo><msub><mi>d</mi><mrow><mi>s</mi><mi>h</mi><mi>a</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{current} &gt; d_{shadow}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">rre</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">ha</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, the point is under shadow; otherwise not)<br><img src="shadowmap1.png" alt="shadow map"><br><img src="shadowmap2.png" alt="shadow map"></li></ul></li><li>An <em>image-space</em> algorithm<ul><li>Pro: no knowledge of scene’s geometry is required</li><li>Con: causing self occlusion and aliasing issues</li></ul></li></ul><h2 id="issues-in-shadow-mapping">Issues in Shadow Mapping</h2><ul><li>Self-occlusion.<ul><li>This is caused by the limitation of shadow maps. See figure below, different points will be mapped to the same grid in the shadow map. In this figure, the orange part on the ground and the part that eye sees on the ground will be mapped to the same grid, which makes it look like the orange part casts shadow on other parts of the ground.<br><img src="self_occlusion.png" alt="self occlusion"></li><li>This issue is especially serious when the light direction is almost paralleal with the surface and it’s much less serious when the light direction is vertical to the surface.</li><li>Solution<ul><li>Adding a (variable) bias to reduce self-occlusion (the bias can be adjusted according to the light direction since the issue’s seriousness is realted to it)<ul><li>But introducing detached shadow issue</li></ul></li><li>Second-depth shadow mapping<ul><li>Using the midpoint between first and second depths (最小深度和次小深度的中间值) in SM</li><li>Unfortunately, requires objects to be watertight And the overhead may not worth it, so in practice no one uses it.</li></ul></li></ul></li></ul></li><li>Aliasing</li></ul><h1 id="approximation-in-rtr">Approximation in RTR</h1><p>An important “approximately equal” throughout RTR:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi><mo>≈</mo><mfrac><mrow><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><mrow><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>d</mi><mi>x</mi></mrow></mfrac><mo>⋅</mo><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_{\Omega} f(x)g(x) \, dx \approx \frac{\int_{\Omega} f(x) \, dx}{\int_{\Omega} dx} \cdot \int_{\Omega} g(x) \, dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1225em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7756em;vertical-align:-0.6378em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1378em;"><span style="top:-2.6265em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1105em;"><span style="top:-2.1225em;margin-left:-0.1945em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3775em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5743em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1105em;"><span style="top:-2.1225em;margin-left:-0.1945em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3775em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6378em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1225em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></p><p>Here, we can understand <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_{\Omega} dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1225em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span> as a normalization (归一化).</p><p>This approximation is more accurate especially when</p><ul><li>Support is small (here “support” refers to the integral range 积分范围)</li><li>g(x) is smooth enough (“smooth” does’t refer to “consistency” but means that the difference between the minimum and maximum value of g(x) in the integral range is not very large)</li></ul><h2 id="approximation-in-shadow-mapping">Approximation in shadow mapping</h2><ul><li>Recall: the rendering equation with explicit visibility</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi mathvariant="normal">Ω</mi><mo>+</mo></msup></msub><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p, \omega_o) = \int_{\Omega^+} L_i(p, \omega_i) f_r(p, \omega_i, \omega_o) \cos \theta_i V(p, \omega_i) d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2719em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4201em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">Ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7027em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>PS: Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V(p, \omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> is 可见性函数 (Visibility Term). <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">V(p, \omega_i) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> if direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is not blocked; otherwise <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">V(p, \omega_i) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>. If we ignore <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V(p, \omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, we’re calculating global diffuse illumination + a scene without shadows. Explicitly writing <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V(p, \omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> allows us to model shadows, occlusion, and global illumination attenuation.</p><ul><li>Approximated as</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>≈</mo><mfrac><mrow><msub><mo>∫</mo><msup><mi mathvariant="normal">Ω</mi><mo>+</mo></msup></msub><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><mrow><msub><mo>∫</mo><msup><mi mathvariant="normal">Ω</mi><mo>+</mo></msup></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow></mfrac><mo>⋅</mo><msub><mo>∫</mo><msup><mi mathvariant="normal">Ω</mi><mo>+</mo></msup></msub><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p, \omega_o) \approx \frac{\int_{\Omega^+} V(p, \omega_i) d\omega_i}{\int_{\Omega^+} d\omega_i} \cdot \int_{\Omega^+} L_i(p, \omega_i) f_r(p, \omega_i, \omega_o) \cos \theta_i d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.6016em;vertical-align:-1.0508em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5508em;"><span style="top:-2.305em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.136em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">Ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7027em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7458em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.136em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">Ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7027em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0508em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2719em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4201em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">Ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7027em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>So now when is it accurate?</p><ul><li>Small support (point / directional lighting)</li><li>Smooth integrand (diffuse bsdf / constant radiance area lighting)</li></ul><h1 id="percentage-closer-soft-shadows">Percentage closer soft shadows</h1><p>Shadow mapping can generate hard shadows, but shadows in the real world have blurred edges, i.e., soft shadows.</p><ul><li>Provides anti-aliasing at shadows’ edges- Not for soft shadows (PCSS is, introducing later)</li><li>Filtering (average) the results of shadow comparisons</li><li>Why not filtering the shadow map?<ul><li>Texture filtering just averages color components, i.e., you’ll get blurred shadow map first</li><li>Averaging depth values, then comparing, you still get a binary visibility</li></ul></li></ul><p><strong>Solution ([Reeves, SlGGARPH 87])</strong></p><p>Neither filtering the generated aliasing shadow nor filtering the shadow map!</p><ul><li><p>Perform multiple (e.g.7x7) depth comparisons for each fragment;</p></li><li><p>Then, <strong>averages</strong> results of comparisons, e.g., for point P on the floor,</p><ul><li>(1)compare its depth with all pixels in the red box, e.g. 3x3 (in practice this number will be much larger)</li><li>(2) get the compared results, e.g., <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}1 &amp; 0 &amp; 1 \\1 &amp; 0 &amp; 1 \\1 &amp; 1 &amp; 0\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span><br>(3) take avg. to get visibility, e.g., 0.667</li></ul></li><li><p>Does filtering size matter?</p><ul><li>Small -&gt; sharper</li><li>Large -&gt; softer</li></ul></li><li><p>Can we use PCF to achieve soft shadow effects?</p><ul><li>Key thoughts<ul><li>From hard shadows to soft shadowsWhat’s the correct size to filter?</li><li>Is it uniform?</li></ul></li><li><strong>Key conclusion</strong><ul><li>Filter size &lt;-&gt; blocker distance</li><li>More accurately, relative average projected blocker depth!</li></ul></li><li><strong>A mathematical “translation”</strong><br>考虑一个相似三角形<p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>w</mi><mtext>Penumbra</mtext></msub><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><mrow><msub><mi>d</mi><mtext>Receiver</mtext></msub><mo>−</mo><msub><mi>d</mi><mtext>Blocker</mtext></msub></mrow><msub><mi>d</mi><mtext>Blocker</mtext></msub></mfrac><mo fence="true">)</mo></mrow><mo>⋅</mo><mfrac><msub><mi>w</mi><mtext>Light</mtext></msub><msub><mi>d</mi><mtext>Blocker</mtext></msub></mfrac></mrow><annotation encoding="application/x-tex">w_{\text{Penumbra}} = \left( \frac{d_{\text{Receiver}} - d_{\text{Blocker}}}{d_{\text{Blocker}}} \right) \cdot \frac{w_{\text{Light}}}{d_{\text{Blocker}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">Penumbra</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">Blocker</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">Receiver</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">Blocker</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.9436em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">Blocker</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">Light</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>PS: umbra:本影，penumbra：半影<br><img src="PCF.png" alt="PCF softshadow"></li></ul></li><li><p>Now the only question: What’s the blocker depth d_Blocker</p><ul><li>The complete algorithm of PCSS<ul><li>Step 1: Blocker search: getting the average blocker depth in a certain region</li><li>Step 2: Penumbra estimation(use the average blocker depth to determine filter size)</li><li>Step 3: Percentage Closer Filtering</li></ul></li><li>Which region to perform blocker search?<ul><li>Can be set constant (e.g. 5x5), but can be better with heuristics</li><li>Which region (on the shadow map) to perform blocker search?<ul><li>depends on the light size and receiver’s distance from the light</li><li>The figure below shows a heuristics method to set a region for blocker search<br><img src="PCSS.png" alt="Blocker search"></li></ul></li></ul></li><li>Which step(s) can be slow?<ul><li>Looking at every texel inside a region (steps 1 and 3) (Solution: Sparse sampling, i.e., only look at parts of the texels)</li><li>Softer -&gt; larger filtering region -&gt; slower</li></ul></li></ul></li></ul><h1 id="variance-soft-shadow-mapping-vssm">Variance soft shadow mapping (VSSM)</h1><ul><li><p>Fast blocker search (step 1) and filtering (step 3)[Yang et al.]<br>Think from “percentage closer” filtering</p></li><li><p>We wanna know the percentage of texels that are in front of the shading point, i.e., how many texels are closer than t in the search area.</p><ul><li>However, looking through all texels to check how many texels are closer than t in the search area can take a lot of effort. Do we have easier methods?<ul><li>Using a histogram -&gt; accurate answer!</li><li>Using a Normal distribution (need mean and variance to define a normal distribution) -&gt; approximate answer!</li></ul></li></ul></li><li><p>Key idea</p><ul><li>Quickly compute the mean and variance of depths in an area</li><li>Mean (average)<ul><li>Hardware MIPMAPing</li><li>Summed Area Tables (SAT)</li></ul></li><li>Variance<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mi>a</mi><mi>r</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>E</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Var(X) = E(X^2)-E^2(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Va</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></li><li>So we just need another shadow map with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><msup><mi>h</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">depth^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">pt</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> at every point and get the mean of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><msup><mi>h</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">depth^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">pt</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li></ul></li></ul></li><li><p>Back to the problem: Percentage of texels that are closer than the shading point</p><ul><li>We want to calculate the shade’s area</li><li>Accurate answer exists (hint: What’s the Cumulative Distribution Function (CDF) of a Gaussian Probability Density Function (PDF)?)</li><li>It doesn’t have to be too accurate!<ul><li><strong>Chebychev’s inequality</strong> (one-tailed version, for <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>&gt;</mo><mi>μ</mi></mrow><annotation encoding="application/x-tex">t &gt; \mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6542em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></strong>) allows us to get P without knowing the exact distribution.<p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mi>t</mi><mo stretchy="false">)</mo><mo>≤</mo><mfrac><msup><mi>σ</mi><mn>2</mn></msup><mrow><msup><mi>σ</mi><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(x &gt; t) \leq \frac{\sigma^2}{\sigma^2 + (t - \mu)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4271em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span>: mean</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>: variance</li></ul></li><li>It works for all distributions, so it <strong>doesn’t even assume Gaussian distribution!</strong></li><li>In graphics we want approximation more than inequality - so in practice we often use it directly as an approximation (although there are multiple constraints).</li></ul></li><li>Performance<br>Shadow map generation: “square depth map”: parallel, along with shadow map, #pixels</li><li>Run time<ul><li>Mean of depth in a range: O(1)</li><li>Mean of depth square in a range: O(1)</li><li>Chebychev: O(1)</li><li>No samples / loops needed!</li></ul></li><li>Step 3 (filtering) solved perfectly (?)</li></ul></li><li><p>Back to Step 1: blocker search (within an area)</p><ul><li>Also require sampling (loop) earlier, also inefficient</li><li>The average depth of blockers</li><li>Not the average depth <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">z_{avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">vg</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></li><li>The average depth of those texels whose depth <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>&lt;</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">z &lt; t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span></li><li>Key idea - Blocker <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>&lt;</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">z &lt; t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>, avg. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi mathvariant="normal">_</mi><mrow><mi>o</mi><mi>c</mi><mi>c</mi></mrow></mrow><annotation encoding="application/x-tex">z\_{occ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7406em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord mathnormal">occ</span></span></span></span></span> (blue part) - Non-blocker <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>&gt;</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">z &gt; t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>, avg. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi mathvariant="normal">_</mi><mrow><mi>u</mi><mi>n</mi><mi>o</mi><mi>c</mi><mi>c</mi></mrow></mrow><annotation encoding="application/x-tex">z\_{unocc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7406em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">occ</span></span></span></span></span> (red part)<br><img src="VSSM.png" alt="Depth map"><ul><li>Here,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msub><mi>N</mi><mn>1</mn></msub><mi>N</mi></mfrac><msub><mi>z</mi><mrow><mi>u</mi><mi>n</mi><mi>o</mi><mi>c</mi><mi>c</mi></mrow></msub><mo>+</mo><mfrac><msub><mi>N</mi><mn>2</mn></msub><mi>N</mi></mfrac><msub><mi>z</mi><mrow><mi>o</mi><mi>c</mi><mi>c</mi></mrow></msub><mo>=</mo><msub><mi>z</mi><mrow><mi>A</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\frac{N_1}{N} z_{unocc} + \frac{N_2}{N} z_{occ} = z_{Avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2334em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">occ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2334em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">occ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">vg</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></li><li><strong>Approximation</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msub><mi>N</mi><mn>1</mn></msub><mi>N</mi></mfrac><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{N_1}{N} = P(x &gt; t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2334em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>, Chebychev works here!</li><li><strong>Approximation</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msub><mi>N</mi><mn>2</mn></msub><mi>N</mi></mfrac><mo>=</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{N_2}{N} = 1 - P(x &gt; t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2334em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> - <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi mathvariant="normal">_</mi><mrow><mi>u</mi><mi>n</mi><mi>o</mi><mi>c</mi><mi>c</mi></mrow></mrow><annotation encoding="application/x-tex">z\_{unocc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7406em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">occ</span></span></span></span></span>, we really don’t know</li><li><strong>Approximation</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi mathvariant="normal">_</mi><mrow><mi>u</mi><mi>n</mi><mi>o</mi><mi>c</mi><mi>c</mi></mrow><mo>=</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">z\_{unocc} = t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7406em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">occ</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> (t is the depth of the shading point, i.e., shadow receiver is a plane)<br><strong>Step 1 solved with negligible additional cost</strong></li></ul></li></ul></li></ul><h1 id="mipmap-and-summed-area-variance-shadow-maps">MIPMAP and Summed-Area Variance Shadow Maps</h1><h2 id="sat-for-range-query">SAT for range query</h2><ul><li>Classic data structure and algorithm (prefix sum)<br>In 1D:<br><img src="prefix_sum.png" alt="prefix sum"><br>In 2D:<br><img src="prefix_sum_2d.png" alt="prefix sum"><br>Note: accurate, but need O(n) time and storage to build<br>Storage might not be an issue<br>Can we speed up building SAT?</li></ul><h1 id="moment-shadow-mapping">Moment shadow mapping</h1><ul><li>Revisit VSSM<ul><li>Issues if the depth distribution is inaccurate<ul><li>Overly dark: may be aceeptable</li><li>Overly bright: LIGHT LEAKING!</li></ul></li><li>Chebychev is to blame?<ul><li>Only valid when t &gt; Zavg</li><li>Approximate <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi mathvariant="normal">_</mi><mrow><mi>u</mi><mi>n</mi><mi>o</mi><mi>c</mi><mi>c</mi></mrow><mo>=</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">z\_{unocc} = t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7406em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">occ</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> (t is the depth of the shading point, i.e., shadow receiver is a plane). What if the shadow receiver is not a plane?</li></ul></li></ul></li></ul><p>Due to the issue of inaccurate description of distributions the goal of Momenet shadow mapping is to represent a distribution more accurately (but still not too costly to store). The key idea is to use <strong>higher order moments</strong> (矩) to represent a distribution.</p><ul><li>Moments<ul><li>Quite a few variations on the definition</li><li>We use the simplest:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo separator="true">,</mo><msup><mi>x</mi><mn>2</mn></msup><mo separator="true">,</mo><msup><mi>x</mi><mn>3</mn></msup><mo separator="true">,</mo><msup><mi>x</mi><mn>4</mn></msup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">x, x^2, x^3, x^4, ...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span></li><li>So,VSSM is essentially using the first two orders of moments</li></ul></li><li>What can moments do?<ul><li>Conclusion: first m orders of moments can represent a function with m/2 steps</li><li>Usually, 4 is good enough to approximate the actual CDF of depth dist.</li></ul></li><li>Moment Shadow Mapping<ul><li>Extremely similar to VSSM</li><li>When generating the shadow map, record <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo separator="true">,</mo><msup><mi>z</mi><mn>2</mn></msup><mo separator="true">,</mo><msup><mi>z</mi><mn>3</mn></msup><mo separator="true">,</mo><msup><mi>z</mi><mn>4</mn></msup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">z, z^2, z^3, z^4, ...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span></li><li>Restore the CDF during blocker search &amp; PCF</li><li>Pro: very nice results</li><li>Cons:<ul><li>Costly storage (might be fine);</li><li>Costly performance (in the reconstruction)</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES202</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graphics Interview Review</title>
    <link href="/2025/03/30/interview-review/"/>
    <url>/2025/03/30/interview-review/</url>
    
    <content type="html"><![CDATA[<p>I’ve been writing blogs in English for a while, simply because I wanna practice my English. But since this note is for reviewing interviews in China, I decided to do it in Chinese and use English to mark some important terms.</p><h1 id="ue">UE</h1><ol><li><p>UE 的垃圾回收机制</p></li><li><p>UE 的移动端渲染管线</p></li><li><p>UE 的虚拟纹理原理 源码</p></li><li><p>UE 的网络同步机制</p></li><li><p>UE 的物理引擎原理</p></li><li><p>为什么 UE 中 PBD 能处理刚体 而不是单一的粒子</p></li><li><p>GPU 硬件架构</p></li><li><p>移动端 PC 端 GPU 架构差异</p></li><li><p>UE 的 RDG</p></li></ol><h1 id="图形学">图形学</h1><h2 id="1-渲染管线流程">1. 渲染管线流程（★）</h2><h3 id="1-渲染管线分为哪些阶段">(1) 渲染管线分为哪些阶段</h3><p>(参考 Realtime Rendering 4th Chapter 2 中的叙述：<a href="https://www.wolai.com/nh4s1M7ArK91KtNGjZco1Y">https://www.wolai.com/nh4s1M7ArK91KtNGjZco1Y</a>)</p><ul><li>应用阶段（Application）：准备数据 和 设置状态。<ul><li>输入数据：应用程序输入三维场景数据，包括模型顶点位置、顶点法线坐标、顶点纹理坐标、材质属性等。</li><li>顶点数据准备：应用 空间加速算法 通过空间划分减少不必要的计算，加速碰撞检测 和 光线追踪。<ul><li>BVH（Bounding Volume Hierarchy）：一种层次包围体结构，<em>递归</em>地把物体划分成子集并计算新的包围盒，形成树状结构。</li><li>四叉树（Quadtree）：二维空间划分。</li><li>八叉树（Octree）：三维空间划分。</li><li>kd 树 （k-dimensional tree）：组织 k 维空间中的点，沿某一个轴进行划分。</li></ul></li><li>图元组装（Primitive Assembly）：把顶点数据组装成图元（三角形、线段、点）。</li><li>视锥剔除（Frustum Culling）：判断图元是否在相机视锥体内（相交也算），不在则剔除。通常通过检测<em>包围盒</em>和视锥体来实现，剔除完全不可见的图元，运算量低但精度也低。</li><li>碰撞检测</li><li>状态设置：设置渲染状态，如 光照模型、着色器程序、纹理、混合模式等。</li><li>动画物理模拟</li><li>输出：输出顶点流给几何处理阶段。</li></ul></li></ul><p><strong>PS: 应用阶段通常在 CPU 端完成（因此开发者可以完全控制在应用阶段发生的事情），剩下几个阶段通常都在 GPU 端完成，因此如果要回答 GPU 渲染管线流程，只需回答一下 3 个阶段.</strong></p><ul><li><p>几何处理阶段（Geometry Processing）：顶点和图元的变换与裁剪。</p><ul><li><p>顶点着色器（Vertex Shader）：对每个顶点进行处理，进行顶点坐标变化并计算顶点属性。</p><ul><li>顶点变换：通过模型矩阵（M，从模型坐标系到世界坐标系）、观察矩阵（V，从世界坐标系到相机坐标系）、投影矩阵（P，投影变换，正交/透视，从相机坐标系变换到剪裁空间）把顶点变换到剪裁空间中（Clipping Space）。</li><li>顶点着色：Flat Shading（一个顶点颜色来代表整个三角面的颜色，默认是使用索引中第一个顶点的颜色）、Gouraud Shading（在顶点着色器中计算三个顶点的光照信息，然后在光栅化阶段插值得到三角形内部各个片段的光照信息）</li></ul></li><li><p>在顶点处理阶段的末尾，还有一些可选的阶段，包括曲面细分(tessellation)（使用曲面细分可以为一个曲面生成数量合适的三角形，同时兼顾质量和效率）、几何着色(geometry shading)（将各种类型的图元作为输入，然后生成新的顶点， e.g., 生成粒子模拟烟花爆炸，每颗火花都可以表示为一个点，即一个简单的顶点。几何着色器可以将每个顶点都转换成一个由两个三角形组成的正方形，这个正方形会始终面朝观察者，并且会占据若干个像素）和流输出(stream output)（把 GPU 作为一个几何引擎，我们可以选择将这些处理好的数据输入到一个缓冲区中，而不是将其直接输入到渲染管线的后续部分并直接输出到屏幕上，这些缓冲区中的数据可以被 CPU 读回使用，也可以被 GPU 本身的后续步骤使用。这个阶段通常会用于粒子模拟）等</p></li><li><p>图元处理（Primitive Processing）</p><ul><li>裁剪（Clipping）：裁剪掉不在视锥体内的顶点。<em>这部分完全由硬件控制</em>。为什么应用阶段进行过视锥剔除了这里还要进行裁剪？因为二者粒度不同，视锥剔除是通过包围盒剔除掉完全不在视锥范围内的图元，而裁剪是在三角形层面上剔除掉不在视锥范围内的像素。</li><li>屏幕映射（Screen Mapping）：把裁剪后的坐标映射到屏幕坐标系（归一化设备坐标 NDC 转换为 窗口坐标）。</li></ul></li><li><p>输出：窗口坐标和顶点信息给光栅化阶段</p></li></ul></li><li><p>光栅化阶段（Rasterization）：设置三角形 + 遍历三角形 找到待渲染图元中的所有像素值（完全由硬件控制）。</p><ul><li>设置三角形：计算三角形微分、边界方程。</li><li>遍历三角形：确定哪些像素被三角形覆盖，并生成一个片元（fragment）。最简单的方式就是直接将每个像素的中心点来作为该像素的样本，如果该像素的中心点位于三角形内部的话，那么我们就认为该像素也位于三角形的内部。我们还可以通过超采样（supersampling）或者多重采样抗锯齿技术（multisampling antialiasing），来对每个像素进行多次采样（Realtime Rendering Chapter 5.4.2）。另一种方法是使用保守光栅化（conservative rasterization），即当某个像素只要有一部分与三角形重叠时，我们就认为该像素位于三角形内部。对三角形三个顶点上的属性进行插值，来获得每个三角形片元的属性（Realtime Rendering Chapter 5），这些属性包括片元的深度，以及几何阶段输出的相关着色数据等。</li></ul></li><li><p>像素处理阶段（Pixel Processing）：对像素着色、测试、混合。</p><ul><li><p>像素着色（Pixel Shading）：计算每个像素的最终颜色。计算出的颜色存储在颜色缓冲（Color Buffer）中。</p><ul><li>纹理采样</li><li>光照计算</li><li>阴影计算（阴影贴图或计算阴影体积）</li><li>材质混合</li></ul></li><li><p>像素合并（Pixel Merging）：各种测试和混合操作，如裁剪测试、透明测试、模板测试、深度测试（按相对顺序）以及色彩混合等。</p><ul><li>裁剪测试：允许程序员开设一个裁剪框，只有在裁剪框内的片元才会被显示出来，在裁剪框外的片元皆被剔除。裁切测试可以避免当视口比屏幕窗口小时造成的渲染浪费问题。通常情况下，我们会让视口的大小和屏幕空间一样大，此时可以不需要使用到裁切测试。</li><li>透明测试（Alpha Testing）：alpha 表示物体的不透明度。1 代表完全不透明，0 代表完全透明。可选的 alpha 测试可在深度测试执行前在传入片段上运行。片段的 alpha 值与参考值作某些特定的测试（如等于，大于等），如果片段未能通过测试，它将不再进行进一步的处理。 alpha 测试经常用于不影响深度缓存的全透明片段的处理。</li><li>模板测试（Stencil Testing）：使用模板缓冲区进行高级遮挡测试（如镜面反射、剪切区域）。模板缓冲（stencil buffer）是一个离屏缓冲区（offscreen buffer），它可以用来记录被渲染图元的位置信息。就相当于在屏幕上有一块模板盖在上面，只有位于这个模板中的图元片段，才会被渲染出来。模板测试就是用片段指定的参考值与模板缓冲中的模板值进行比较，如果达到预设的比较结果，模板测试就通过了，然后用这个参考值更新模板缓冲中的模板值；如果没有达到预设的比较结果，就是没有通过测试，就不更新模板缓冲。简单来说，就是<em>根据物体的位置范围</em>决定是否渲染。</li><li>深度测试（Depth Testing）：比较片段的深度值与深度缓冲区中的值，决定是否丢弃不可见的片段。</li><li>系统中的所有缓冲合称帧缓冲（frame buffer）。</li><li>将片段颜色与帧缓冲区中的颜色混合（如透明效果）。</li><li>由于渲染需要花费一定时间，为了避免观察者看到图元渲染并显示在屏幕上的过程，一般都会使用双缓冲机制（double buffering），这意味着场景的渲染都会在屏幕外的后置缓冲区中进行。当场景被渲染到后置缓冲区之后，后置缓冲区会与显示在屏幕上的前置缓冲区（front buffer）交换内容。这个交换的过程通常发生在垂直回扫（vertical retrace）的过程中，因此这样做是可行的。</li></ul></li></ul></li></ul><h3 id="2-opengl-中由顶点数据输入到绘制出一幅图像的具体过程">(2) OpenGL 中由顶点数据输入到绘制出一幅图像的具体过程</h3><p>参考 <a href="https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/%E3%80%82">https://learnopengl-cn.github.io/01 Getting started/04 Hello Triangle/。</a></p><ul><li>创建和绑定缓冲区：创建顶点缓冲对象（VBO）并将顶点数据上传到 GPU。绑定缓冲区使其成为当前使用的缓冲区。通过调用 glGenVertexArrays 创建一个 VAO；使用 glBindVertexArray 绑定 VAO，以便后续的顶点属性配置将记录到此 VAO。在 VAO 绑定的状态下，使用 glVertexAttribPointer 和 glEnableVertexAttribArray 来配置顶点属性。此时，定义了哪些属性应该从当前的 VBO 中读取数据，并设置这些属性的格式和索引。（Optional）可以通过 glBindVertexArray(0) 来解绑 VAO。这使得未来的顶点属性配置不会影响现有的 VAO；</li><li>着色器准备：编写顶点着色器和片元着色器；</li><li>创建和编译着色器：创建着色器对象，附加上代码并编译。创建着色器程序并链接；</li><li>绘制调用：使用 GLSL 着色器程序并调用绘制函数（如 glDrawArrays 或 glDrawElements）来执行实际的绘制操作；</li><li>顶点着色器：mvp 坐标变换转换到裁剪坐标系，以及顶点着色；</li><li>裁剪和屏幕映射：裁剪掉视体外的图元，将当前坐标映射到屏幕坐标；</li><li>图元装配阶段：将顶点着色器的输出数据装配成指定图元的形状，之后还有一个可选的几何着色器阶段，将输入的点或线扩展成多边形（渲染管线中的设置三角形）；</li><li>光栅化：找到哪些像素被三角形覆盖，以及进行插值计算；</li><li>片元着色器：执行光照计算，进行着色；</li><li>测试混合阶段，包括 Alpha 测试、模板测试、深度测试等，然后进行混合。</li></ul><h2 id="2-给定入射光-法线-求反射光方向">2. 给定入射光、法线， 求反射光方向</h2><p>这里默认输入的法线是一个单位向量，所以就是 二倍的 入射光线在法线方向上的投影（点乘：cos） 的长度 乘以法线单位向量，减去 入射光向量。思路是这样的，但是要具体看入射光方向是朝向片元的还是从片元发出的。反射光线的方向（记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathbf{r}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathbf">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）与表面法线 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">n</mi></mrow><annotation encoding="application/x-tex">\mathbf{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">n</span></span></span></span>) 之间的夹角（记为 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\theta_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)），与入射光线方向（记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">l</mi></mrow><annotation encoding="application/x-tex">\mathbf{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">l</span></span></span></span>）和表面法线 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">n</mi></mrow><annotation encoding="application/x-tex">\mathbf{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">n</span></span></span></span>) 之间的夹角完全相同。反射向量 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathbf{r}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathbf">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) 可通过表面法线 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">n</mi></mrow><annotation encoding="application/x-tex">\mathbf{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">n</span></span></span></span>) 和入射光方向 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">l</mi></mrow><annotation encoding="application/x-tex">\mathbf{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">l</span></span></span></span>) 计算得出：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="bold">r</mi><mi>i</mi></msub><mo>=</mo><mn>2</mn><mo stretchy="false">(</mo><mi mathvariant="bold">n</mi><mo>⋅</mo><mi mathvariant="bold">l</mi><mo stretchy="false">)</mo><mi mathvariant="bold">n</mi><mo>−</mo><mi mathvariant="bold">l</mi></mrow><annotation encoding="application/x-tex">\mathbf{r}_i = 2 (\mathbf{n} \cdot \mathbf{l}) \mathbf{n} - \mathbf{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathbf">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathbf">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf">l</span><span class="mclose">)</span><span class="mord mathbf">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">l</span></span></span></span></span></p><h2 id="3-brdf-bidirectional-reflection-distribution-function">3. BRDF (Bidirectional Reflection Distribution Function)</h2><p>辐射度量学 见 <a href="/2025/02/05/CS8803-CGA-L07/"> Radiometry Foundation</a>.</p><h3 id="1-概念">(1) 概念：</h3><p>BRDF 用来描述物体表面如何反射光线。BRDF 表示了从每个入射方向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>射过来的光，有多少被反射到每个出射方向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">\omega_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (更具体的图解和解释见<a href="/2025/01/14/GAMES101-L15-RayTracing3/"> GAMES101 BRDF Notes</a>)。公式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><msub><mi>E</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow></mfrac><mspace width="1em"><mo fence="false" stretchy="true" minsize="3em" maxsize="3em">[</mo><mfrac><mn>1</mn><mrow><mi>s</mi><mi>r</mi></mrow></mfrac><mo fence="false" stretchy="true" minsize="3em" maxsize="3em">]</mo></mspace></mrow><annotation encoding="application/x-tex">f_r(\omega_i \rightarrow \omega_r) = \frac{dL_r(\omega_r)}{dE_i(\omega_i)} = \frac{dL_r(\omega_r)}{L_i(\omega_i) \cos \theta_i d\omega_i} \quad \Bigg[\frac{1}{sr}\Bigg]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="delimsizing size4">[</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">sr</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size4">]</span></span></span></span></span></span></p><p>由公式可以看出，BRDF 的定义是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">\omega_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>出射光辐射率(Radiance)的微分和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>入射光辐照度(Irradiance)的微分之比。</p><h3 id="2-反射方程-和-渲染方程">(2) 反射方程 和 渲染方程</h3><p>基于 BRDF 的公式，将一个半球上所有入射光（入射方向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）在半球上进行积分，则可以得到一个积分形式的公式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_r (p, \omega_r) = \int_{H^2} f_r(p, \omega_i \rightarrow \omega_r) L_i (p, \omega_i) \cos \theta_i d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2719em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.3895em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>这个式子即是<strong>反射方程</strong>。这个积分对于渲染逼真的光照至关重要，它计算有多少光线被反射到相机或任何其他出射方向。</p><p>在反射方程的基础上，等式右边加上一个发光项，就得到了<strong>渲染方程</strong>。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>L</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mo>∫</mo><msup><mi mathvariant="normal">Ω</mi><mo>+</mo></msup></msub><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p, \omega_o) = L_e(p, \omega_o) + \int_{\Omega^+} L_i(p, \omega_i) f_r(p, \omega_i, \omega_o) (n \cdot \omega_i) \, d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2719em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4201em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">Ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7027em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>注意，这里假设所有方向都是指向外的。渲染方程也很好理解，就是从某个视角<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>看向某个特定点，光亮度等于该点自身的发光的亮度，加上从四面八方的入射光线照射到这一点并反射到该视角的光亮度之和。因为任何一条入射光线射到 x 点上可能都会产生视线方向的反射光线，所以需要对半球面做一个积分。这里的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n \cdot \omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>其实就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow><annotation encoding="application/x-tex">cos\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">cos</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>是入射方向与表面法线的夹角。</p><h2 id="4-pbrphysically-based-rendering">4. PBR（Physically Based Rendering）</h2><p>参考：<br><a href="https://blog.csdn.net/poem_qianmo/article/details/85239398">https://blog.csdn.net/poem_qianmo/article/details/85239398</a><br>Realtime Rendering 4th Chapter 9<br><a href="https://learnopengl.com/PBR/Theory">https://learnopengl.com/PBR/Theory</a><br><a href="https://github.com/QianMo/PBR-White-Paper?tab=readme-ov-file">https://github.com/QianMo/PBR-White-Paper?tab=readme-ov-file</a></p><h3 id="1-概念">(1) 概念：</h3><p>基于物理的渲染（PBR）是指 使用<strong>基于物理的原理 和 微平面理论（microfacet theory） 建模的着色/光照模型</strong>，以及使用<strong>从现实中测量的表面参数</strong>来准确表示真实世界材质的渲染理念。PBR 的范畴包括三个方面：基于物理的材质、基于物理的光照、基于物理适配的相机。</p><p>一些基本概念：</p><ul><li><p>微平面理论（Microfacet Theory）。微平面理论是将物体表面建模成做无数微观尺度上有随机朝向的<strong>理想镜面反射</strong>的小平面（microfacet）的理论。在实际的 PBR 工作流中，这种物体表面的不规则性用粗糙度贴图或者高光度贴图来表示。见<a href="/2025/01/19/GAMES101-L17-MaterialsAndAppearances/"> GAMES101 Materials and Appearances</a>。</p></li><li><p>能量守恒 （Energy Conservation）。出射光线的能量永远不能超过入射光线的能量。随着粗糙度的上升镜面反射区域的面积会增加，作为平衡，镜面反射区域的平均亮度则会下降。</p></li><li><p>菲涅尔反射（Fresnel Reflectance）。光线以<strong>不同角度</strong>入射会有<strong>不同的反射率</strong>。相同的入射角度，不同的物质也会有不同的反射率。万物皆有菲涅尔反射。F0 是即 0 度角入射的菲涅尔反射值，即观察方向和表面法线方向在同一方向。F90 则指的是观察方向和表面平行时（grazing angle）的反射率。简单来说，菲涅尔效应即描述视线垂直于表面时反射较弱，而当视线非垂直表面时，夹角越小，反射越明显的一种现象。比如说，当我们站在湖边低头看脚下的湖水，会发现水是透明的，反射不会特别强烈；而如果我们看远处的湖面时，会发现水并不透明，而且反射非常强烈。大多数非金属的 F0 范围是 0.02~0.04，大多数金属的 F0 范围是 0.7~1.0。反射光的光量（入射光的一部分）由菲涅尔反射率（Fresnel reflectance）F 来描述，它取决于入射角。任意角度的菲涅尔反射率可由 F0 和入射角度计算得出，因此一般把 F0 作为材质的特征反射率。</p></li><li><p>线性空间（Linear Space）。光照计算必须在线性空间完成，shader 中输入的 gamma 空间的贴图比如漫反射贴图，需要被转成线性空间，在具体操作时需要根据不同引擎和渲染器的不同做不同的操作。而描述物体表面属性的贴图如粗糙度，高光贴图，金属贴图等必须保证是线性空间。</p></li><li><p>色调映射（Tone Mapping）。也称色调复制（tone reproduction），是将宽范围的照明级别拟合到屏幕有限色域内的过程。因为基于 HDR (High Dynamic Range) 渲染出来的亮度值会超过显示器能够显示最大亮度，所以需要使用色调映射，将光照结果从 HDR 转换为显示器能够正常显示的 LDR。</p></li><li><p>物质的光学特性（Substance Optical Properties） 。现实世界中有不同类型的物质可分为三大类：绝缘体（Insulators），半导体（semi-conductors）和导体（conductors）。在渲染和游戏领域，我们一般只对其中的两个感兴趣：导体（金属）和绝缘体（电解质，非金属）。其中非金属具有单色/灰色镜面反射颜色。而金属具有彩色的镜面反射颜色。即非金属的 F0 是一个 float。而金属的 F0 是一个 float[3]，如下图。</p></li></ul><p><img src="F0.png" alt="金属和非金属的F0"></p><h3 id="2-cook-torrance-brdf">(2) Cook-Torrance BRDF</h3><p>见 <a href="https://learnopengl-cn.github.io/07%20PBR/01%20Theory/">https://learnopengl-cn.github.io/07 PBR/01 Theory/</a></p><h3 id="3-pbr-的计算和实现">(3) PBR 的计算和实现</h3><p>PBR 的光照结果通过反射方程来计算，分为两部分，一个是漫反射部分，一个是镜面反射部分。如下所示是 Cook-Torrance BRDF 反射率方程。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∫</mo><mi mathvariant="normal">Ω</mi></munder><mrow><mo fence="true">(</mo><msub><mi>k</mi><mi>d</mi></msub><mfrac><mi>c</mi><mi>π</mi></mfrac><mo>+</mo><msub><mi>k</mi><mi>s</mi></msub><mfrac><mrow><mi>D</mi><mi>F</mi><mi>G</mi></mrow><mrow><mn>4</mn><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>o</mi></msub><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo fence="true">)</mo></mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mtext> </mtext><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p, \omega_o) = \int\limits_{\Omega} \left( k_d \frac{c}{\pi} + k_s \frac{DFG}{4(\omega_o \cdot n)(\omega_i \cdot n)} \right) L_i(p, \omega_i) n \cdot \omega_i \, d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0555em;vertical-align:-1.6055em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3611em;"><span style="top:-1.8545em;margin-left:-0.4445em;"><span class="pstrut" style="height:3.36em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.3611em;"><span class="pstrut" style="height:3.36em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6055em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">FG</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><a href="https://learnopengl-cn.github.io/07%20PBR/02%20Lighting/">https://learnopengl-cn.github.io/07 PBR/02 Lighting/</a><br><a href="https://learnopengl-cn.github.io/07%20PBR/03%20IBL/01%20Diffuse%20irradiance/">https://learnopengl-cn.github.io/07 PBR/03 IBL/01 Diffuse irradiance/</a></p><h3 id="4-pbr-里面的-d-f-g-项的物理意义菲涅尔项会带来怎样的视觉效果">(4) PBR 里面的 D、F、G 项的物理意义？菲涅尔项会带来怎样的视觉效果？</h3><p>最常用的是 Cook-Torrance 模型，其镜面反射部分表达式为：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mi mathvariant="normal">_</mi><mtext>specular</mtext><mo>=</mo><mfrac><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>F</mi><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>G</mi><mo stretchy="false">(</mo><mi>l</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><mrow><mn>4</mn><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>v</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">f\_{\text{specular}} = \frac{D(h) \cdot F(v, h) \cdot G(l, v, h)}{4 (n \cdot l)(n \cdot v)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord text"><span class="mord">specular</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中：</p><ul><li>D(h)：<strong>法线分布函数（Normal Distribution Function）</strong></li><li>F(v, h)：<strong>菲涅尔项（Fresnel Term）</strong></li><li>G(l, v, h)：<strong>几何遮蔽函数（Geometry / Shadowing-Masking）</strong></li></ul><hr><ul><li><p>D：法线分布函数（Normal Distribution Function, NDF）</p><ul><li>物理意义：描述 <strong>微表面法线 与 半角向量 对齐的概率分布</strong>。 简单说，它表示“多少微面朝向镜面反射方向”。</li><li>微表面越光滑（低粗糙度），D 趋向于锐峰，产生明亮集中的高光；表面越粗糙，D 趋向于扁平或宽分布，产生宽而暗淡的镜面反射。</li><li>一般我们用宏观表面的半矢量 h 来表示微观表面法线 m，因为仅 m = h 的表面点的朝向才会将光线 l 反射到视线 v 的方向，其他朝向的表面点对 BRDF 没有贡献（正负相互抵消）。</li><li>常见模型：<ul><li>Beckmann</li><li>GGX（现代 PBR 中默认）</li></ul></li></ul></li><li><p>F：菲涅尔项（Fresnel Term）</p><ul><li>物理意义：描述光线与表面夹角变化时，反射率随角度增加而上升的现象。</li><li><strong>Fresnel 效应：入射角越斜 → 反射越强（即越“亮”）</strong></li><li>常用模型：<ul><li>Schlick 近似公式（性能高、接近真实）：<p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>F</mi><mn>0</mn></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>F</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><msup><mo stretchy="false">)</mo><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">F(\theta) = F_0 + (1 - F_0)(1 - \cos\theta)^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span></p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">F_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为视角垂直时的反射率（通常为金属颜色或 0.04），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>为<strong>观察方向与半角向量之间的夹角</strong>。</li></ul></li><li>视觉效果：<ul><li>表面斜角处（边缘）看起来<strong>更亮、更金属感</strong></li><li>金属材料更强烈（F 值高）</li><li>增加真实感和材质变化（如镜头转动时反光变化）</li></ul></li></ul></li><li><p>G：几何遮蔽项（Geometry Function）</p><ul><li>物理意义：考虑微面之间的<strong>遮蔽和自遮挡</strong>，即光线和视线是否都能“看到”这个微面。</li><li>若表面太粗糙或视角太斜 → 会有更多遮挡</li><li>限制了高光强度，保持能量守恒</li><li>常见模型：<ul><li>Smith G（广泛使用）</li><li>Schlick-Smith（优化版本，性能好）</li></ul></li><li>视觉效果：<table><thead><tr><th>作用</th><th>表现</th></tr></thead><tbody><tr><td>控制高光能量</td><td>避免高光过亮或能量不守恒</td></tr><tr><td>斜角处高光被遮挡</td><td>让高光“卷入”，更自然</td></tr></tbody></table></li></ul></li></ul><hr><table><thead><tr><th>项目</th><th>控制的方面</th><th>视觉表现</th></tr></thead><tbody><tr><td><strong>D</strong></td><td>微面法线分布</td><td>控制高光的<strong>形状与大小</strong></td></tr><tr><td><strong>F</strong></td><td>光的角度反射比率</td><td>控制高光在<strong>边缘更亮</strong>（Fresnel 效应）</td></tr><tr><td><strong>G</strong></td><td>遮蔽与自遮挡</td><td>控制高光的<strong>能量、强度</strong>，更真实</td></tr></tbody></table><h3 id="5-pbr-材质贴图很多纹理槽位不够应该怎么处理">(5) PBR 材质贴图很多，纹理槽位不够应该怎么处理？</h3><ul><li>合并多个属性到一个通道，比如 roughness 和 metallic 可以存在 8 bit 纹理的高低 4 bit 上</li><li>虚拟纹理，将小贴图合并成大贴图，按需调入</li></ul><h2 id="5-光照模型">5. 光照模型</h2><p>光照模型是用来模拟光线与物体表面交互的模型，目的是根据各种因素（如光源、材质属性、表面方向和观察者位置）计算每个像素或表面的颜色和亮度。</p><h3 id="1-光照模型有哪些">(1) 光照模型有哪些</h3><ul><li><p>局部光照模型（简单，仅考虑直接光照，适合实时渲染）</p><ul><li><p>漫反射光 (Diffuse lighting)：模拟粗糙表面的漫反射。反射光强与入射光和表面法线间的夹角有关系</p><ul><li>Lambertian Reflection Model：一种理想的漫反射光照模型，光源射到表面后均匀地朝四面八方反射相同强度的光（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo>=</mo><msub><mi>I</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi></mrow></msub><mo>×</mo><msub><mi>K</mi><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi></mrow></msub><mo>×</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>N</mi><mo>⋅</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I = I_{diffuse} \times K_{diffuse} \times max(0, N \cdot L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">se</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">se</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mclose">)</span></span></span></span>）</li></ul></li><li><p>镜面反射光（Specular lighting）：模拟光滑表面的高光。看到的反射光强度与观察视角（观察方向和反射光方向的夹角）有关。</p><ul><li><p>Phong Model：结合了环境光、漫反射光和镜面反射光。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo>=</mo><msub><mi>I</mi><mtext>ambient</mtext></msub><mo>+</mo><msub><mi>I</mi><mtext>diffuse</mtext></msub><mo>+</mo><msub><mi>I</mi><mtext>specular</mtext></msub></mrow><annotation encoding="application/x-tex">I = I_{\text{ambient}} + I_{\text{diffuse}} + I_{\text{specular}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">ambient</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">diffuse</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">specular</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mtext>ambient</mtext></msub><mo>=</mo><msub><mi>k</mi><mi>a</mi></msub><mo>⋅</mo><msub><mi>I</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">I_{\text{ambient}} = k_a \cdot I_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">ambient</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mtext>diffuse</mtext></msub><mo>=</mo><msub><mi>k</mi><mi>d</mi></msub><mo>⋅</mo><msub><mi>I</mi><mi>l</mi></msub><mo>⋅</mo><mo stretchy="false">(</mo><mi mathvariant="bold">N</mi><mo>⋅</mo><mi mathvariant="bold">L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I_{\text{diffuse}} = k_d \cdot I_l \cdot (\mathbf{N} \cdot \mathbf{L})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">diffuse</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathbf">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf">L</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mtext>specular</mtext></msub><mo>=</mo><msub><mi>k</mi><mi>s</mi></msub><mo>⋅</mo><msub><mi>I</mi><mi>l</mi></msub><mo>⋅</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi mathvariant="bold">R</mi><mo>⋅</mo><mi mathvariant="bold">V</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">I_{\text{specular}} = k_s \cdot I_l \cdot max(0, (\mathbf{R} \cdot \mathbf{V}))^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">specular</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathbf">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">V</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>，其中 R 是 reflected light vector，V 是 view vector，n 是 shininess factor。</li></ul></li><li><p>Blinn-Phong Model：Phong Model 的改进版，引入半程向量（halfway vector）。</p></li></ul></li><li><p>Cook-Torrance Model：Cook-Torrance 模型是一个基于物理的反射（pbr）模型，它模拟光线如何在<strong>微表面层面上从粗糙表面反射</strong>。然而 Cook-Torrance model 只考虑直接光照（从光源到表面），而不考虑光线在表面之间弹射（这正是全局光照模型所做的）。</p></li></ul></li><li><p>全局光照模型（复杂，既考虑直接光照也考虑间接光照，考虑光从表面多次折射/反射，适合离线渲染）</p><ul><li>Ray Tracing：从摄像机逆向发出光线，多次反射折射达到光源的路径。</li><li>Path Tracing：一种光线追踪的进阶版本，能够模拟柔和阴影、焦散和色彩溢出。非常精确但速度慢。</li><li>辐射度（Radioisty）：模拟表面之间光的漫反射。常用于建筑可视化。</li><li>光子映射 (Photon Mapping)：Two-pass<ul><li>第一步：光子发射与存储<ul><li>从光源发射光子。</li><li>追踪光子在场景中弹射的路径。每次光子击中表面时，把光子的位置、入射方向、能量（通量）存储在光子图中（本质上是一种 KD 树）。</li><li>通常有两种类型的光子图：焦散光子图 用于锐利的聚焦光图案；全局光子图 用于间接漫反射照明。</li></ul></li><li>第二步：渲染（辐射率估计）<ul><li>对于每个可见的表面点（由光线追踪或光栅化确定），收集一定半径范围内的附近光子。通过对附近光子的能量求和来估计辐射率（radiance）。</li><li>与来自局部光照模型的直接光照结合。</li></ul></li></ul></li></ul></li></ul><h3 id="2-phong-光照模型和-blinn-phong-光照模型的区别">(2) Phong 光照模型和 Blinn-Phong 光照模型的区别</h3><p>具体见 <a href="https://learnopengl-cn.github.io/05%20Advanced%20Lighting/01%20Advanced%20Lighting/%E3%80%82">https://learnopengl-cn.github.io/05 Advanced Lighting/01 Advanced Lighting/。</a></p><p>Phone Model 是一个经验模型。Blinn-Phong Model 是 phong 模型的改进版。Phong 模型在处理高光的时候会有光照不连续的问题（尤其是物体反光度 shininess 很低时）。这是因为 phong 模型在计算镜面反射光的时候要计算观察方向和反射光方向夹角的余弦并取其与 0 之间的最大值，这也就是说当两个方向夹角大于九十度时，镜面反射光线的分量就被消除了。Blinn-Phong 模型引入了半程向量解决了这一问题。所谓半程向量，指的是入射光方向和观察方向的角平分线方向向量。在 Blinn-Phong 模型中，计算半程向量和表面法线的点乘，不论从哪个角度看这二者之间的夹角一定是小于九十度的（除非光源在表面之下），当视线正好与反射光线的方向对齐时，半程向量就会与法线完美契合。所以当观察者视线越接近于原本反射光线的方向时，镜面高光就会越强。它产生的效果会与 phong 光照有些许不同，但是大部分情况下看起来会更自然一点，特别是低高光的区域。</p><h2 id="6-全局光照">6. 全局光照</h2><p>全局光照既考虑既考虑场景中来自光源的直接光照，又考虑经过场景中其他物体反射后的间接光照的一种渲染技术。即可以理解为：全局光照 = 直接光照(Direct Light) + 间接光照(Indirect Light)。</p><h3 id="1-ray-tracing-and-path-tracing">(1) Ray Tracing and Path Tracing</h3><p>不细说了，具体见：<br><a href="/2025/01/12/GAMES101-L13-RayTracing1/"> GAMES101 Ray Tracing 1</a><br><a href> GAMES101 Ray Tracing 2</a><br><a href> GAMES101 Ray Tracing 3</a><br><a href="https://www.wolai.com/wt7wKwF46iUv6HAQprDATB"> Realtime rendering 4th Ray Tracing</a></p><h3 id="2-环境光遮蔽ambient-occlusion">(2) 环境光遮蔽（Ambient Occlusion）</h3><p>见<br><a href="https://learnopengl-cn.github.io/05%20Advanced%20Lighting/09%20SSAO/%E3%80%82">https://learnopengl-cn.github.io/05 Advanced Lighting/09 SSAO/。</a><br><a href="https://www.wolai.com/wt7wKwF46iUv6HAQprDATB">https://www.wolai.com/wt7wKwF46iUv6HAQprDATB</a> (Chapter 11.3.6)</p><ul><li>原理：通过将褶皱、孔洞和非常靠近的墙面变暗的方法近似<em>模拟出间接光照</em>。这些区域很大程度上是被周围的几何体遮蔽的，光线会很难流失，所以这些地方看起来会更暗一些。</li><li>屏幕空间算法（screen-space ambient occlusion，SSAO）：<ul><li>基于模型空间的方法，其开销与场景的复杂度成正比。然而，我们完全可以从屏幕空间中已有的数据出发，推导出一些有关遮挡的信息，例如深度和法线。这种基于屏幕空间的算法，具有恒定的开销，其复杂度与与场景的细节程度无关，只与渲染时所使用的画面分辨率有关。在实践中，屏幕空间算法的执行时间，还取决于数据在深度缓冲或者法线缓冲中的分布，因为这种数据分散效应，在进行遮挡计算的时候，会降低 GPU 缓存的命中率，从而延长算法的执行时间。</li><li>原理：对于铺屏四边形(Screen-filled Quad)上的每一个片段，我们都会根据周边深度值计算一个遮蔽因子(Occlusion Factor)。这个遮蔽因子之后会被用来减少或者抵消片段的环境光照分量。遮蔽因子是通过采集片段周围球型核心(Kernel)的多个深度样本，并和当前片段深度值对比而得到的。高于片段深度值样本的个数就是我们想要的遮蔽因子。某处的遮蔽因子越大，环境光照越小。如下图，黄色圆圈代表片段的位置，这张图相当于一个二维剖面，相机位于片段正上方（视线方向同红色箭头），红色圆圈表示高于片段深度值的样本。环境遮挡因子 k_A 的值是通过测试的样本数与总样本数的加权比值。这些样本的权重会随着到像素距离的增大而减小，即距离像素越远，该样本的权重就越小。<br><img src="SSAO.png" alt="SSAO"><br>如果样本数量太低，渲染的精度会急剧减少，会得到波纹(Banding)的效果；样本数量太高则会影响性能。可以通过引入随机性到采样核心(Sample Kernel)的采样中从而减少样本的数目。通过随机旋转采样核心，能在有限样本数量中得到高质量的结果。然而随机性引入了一个很明显的噪声图案，需要通过模糊结果来修复这一问题。<br>SSAO 将球形范围内的所有样本都考虑在内，而不是只考虑表面上半球范围内的样本。这种简化意味着会对表面以下的样本也进行计数。因此，一些教程中不使用球体的采样核心，而使用一个沿着表面法向量的半球体采样核心。通过在法向半球体(Normal-oriented Hemisphere)周围采样，不考虑到片段底部的几何体，从而消除了环境光遮蔽灰蒙蒙的感觉，从而产生更真实的结果。</li></ul></li></ul><h3 id="3-预计算辐射率传输precomputed-radiance-transfer-prt">(3) 预计算辐射率传输(Precomputed Radiance Transfer, PRT)</h3><p>球谐函数（Spherical Harmonics）？</p><h3 id="4-bdrt-mlt-photon-mapping-vertex-connection-and-merging-vcm-instant-radiosity-ir">(4) BDRT, MLT, Photon Mapping, Vertex Connection and Merging (VCM), Instant Radiosity (IR)</h3><p>见 <a href="/2025/01/20/GAMES101-L18-AdvancedTopics/"> GAMES101 Advanced light transport</a>。</p><h3 id="5-实时光线追踪">(5) 实时光线追踪</h3><p>见 <a href="https://www.wolai.com/59v8Mkmo15aMG67ni27AJD%E3%80%82">https://www.wolai.com/59v8Mkmo15aMG67ni27AJD。</a></p><h2 id="7-抗锯齿反走样anti-aliasing">7. 抗锯齿/反走样（Anti-aliasing）</h2><p>参考：</p><p><a href="/2025/01/06/GAMES101-L06-Rasterization2/"> GAMES101 Anti-aliasing</a><br><a href="https://www.wolai.com/aaGGQwtM2CcQYz2C3gUdPS#u2cw8kw1RE3qHrKr3ux6SX"> Realtime Rendering 4th Chapter 5.4</a></p><h3 id="1-锯齿产生原因">(1) 锯齿产生原因</h3><p>当信号或图像包含高频细节但采样不足时，就会出现走样现象（在光栅化游戏中，屏幕的分辨率大体决定了采样率，因此屏幕分辨率越高，走样和锯齿现象就越少）。此时采样信号的频率会比原始信号低，为了对一个信号进行正确的采样（即可以从采样出来的样本中，重建原始信号），采样率必须要在采样信号最大频率的两倍以上。这通常被称作采样定理（sampling theorem），对应的采样率叫做 Nyquist 率或者 Nyquist 极限.</p><p>当使用点样本（像素点渲染）对三维场景进行采样的时候，正常情况下是不会有频宽限制的，这是因为三角形的边界，阴影的边界以及其他会产生不连续信号的现象，会导致三维场景中的频率是没有上限的。此外，无论采样样本排列的有多么紧密，场景中的物体都可以被继续缩小，使得它们根本无法被采样。因此，在使用点样本来渲染场景的时候，我们是无法完全避免走样现象的。</p><h3 id="2-超采样抗锯齿supersampling-antialiasing-ssaa">(2) 超采样抗锯齿(supersampling antialiasing, SSAA)</h3><ul><li>最朴素/暴力的反走样方法</li><li>原理（SSAA = Oversampling + Downsampling）：<ul><li>以高于显示分辨率的分辨率渲染图像（映射到高分辨率缓存中放大）；</li><li>将高分辨率图像降采样（downsample）（对相邻像素样本进行滤波（卷积），一般取临近 2-4 个像素，采样混合后生成最终的像素）回显示分辨率。</li></ul></li><li>GPU 的带宽，执行次数和内存占用会直接成倍的增长。例如：假设我们现在需要一张分辨率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1280</mn><mo>×</mo><mn>1024</mn></mrow><annotation encoding="application/x-tex">1280 \times 1024</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1280</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1024</span></span></span></span>的图像，我们使用该方法（SSAA 4X）时，首先需要离屏渲染一张分辨率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2560</mn><mo>×</mo><mn>2048</mn></mrow><annotation encoding="application/x-tex">2560 \times 2048</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2560</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2048</span></span></span></span>的图像，然后将屏幕上每<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2 \times 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>像素区域内的颜色值进行平均，然后再显示到屏幕上；对于最终生成的图像而言，每个像素都对应了四个采样点（片元着色器被调用的次数成了原来的 4 倍），并使用一个 box 滤波器进行过滤。而且每个子样本都有一个 z-buffer 深度，它们都需要进行完整的着色和填充。</li></ul><h3 id="3-多重采样抗锯齿multisample-antialiasing-msaa">(3) 多重采样抗锯齿(multisample antialiasing, MSAA)</h3><ul><li>概念：MSAA 和 SSAA 都是基于硬件的实现。MSAA 将单一的采样点变为多个采样点。我们不再使用<em>像素中心的单一采样点</em>，而是使用按照特定图案排列的<em>多个子采样点(Subsample)</em> （采样点的数量可以是任意的，更多的采样点能带来更精确的遮盖率）。这些子采样点是否被三角形覆盖决定了像素的遮盖度。如下图的左侧是正常情况下判定三角形是否遮盖的方式。在例子中的这个像素上不会运行片段着色器，因为它的采样点并未被三角形所覆盖。右侧展示的是实施 MSAA 之后的版本，每个像素包含有 4 个采样点。这里，只有两个采样点被三角形覆盖。无论三角形遮盖了多少个子采样点，（每个图元中）每个像素只运行一次片段着色器（不同于 SSAA）。片段着色器通过插值获得像素中心的坐标，然后 MSAA 使用<strong>更大的深度/模板缓冲区</strong>来确定覆盖率。被覆盖的子采样点数量将决定了像素颜色对帧缓冲的影响程度。因为下图的 4 个采样点中只有 2 个被遮盖住了，所以三角形的颜色会有一半与帧缓冲区的颜色（在这里是无色）进行混合。<br><img src="MSAA1.png" alt="MSAA"><br>简单来说，一个像素中如果有更多的采样点被三角形遮盖，那么这个像素的颜色就会更接近于三角形的颜色。最终结果如下图。<br><img src="MSAA2.png" alt="MSAA"><br>MSAA 判断一个三角形是否被像素覆盖的时候会计算多个样本，但是在片元着色器计算像素颜色的时候每个像素还是只计算一次。</li><li>为什么是更大的缓冲区？因为要为每个子样本都存储独立的颜色信息和深度信息。这些信息用于判断子采样点是否被三角形覆盖、被哪个三角形覆盖。如下图，中间的图展示了一个像素被两个物体重叠的情况，其中红色物体覆盖了三个样本，蓝色物体覆盖了一个样本。图中的绿色点代表了像素着色器计算的位置，由于红色三角形覆盖了像素的中心，因此这个位置被用于着色器计算；而蓝色物体的像素着色器将在 1 号样本的位置上进行计算。对于 MSAA 而言，所有的四个样本位置都存储了单独的颜色信息和深度信息，右图展示了 EQAA 的 2f4x 模式 (这里的 EQAA 指的是 Enhanced Quality Anti-Aliasing，它是 AMD 提出的 MSAA 改进版，思路是把 颜色信息 和 覆盖率信息 分离存储。在 MSAA 中 每个 采样点 都存有 颜色 &amp; 深度值；而 EQAA 存储得比 MSAA 少，比如这里只有 2 份。2f4x 是一种 EQAA 配置模式，意思是：2 个 color &amp; depth 信息存储 (f = fragment)，4 个覆盖率采样点 (Coverage samples))，四个样本对应了四个 ID 值，这个 ID 值用于在另一个只包含颜色信息和深度信息的表格中进行检索。<br><img src="MSAA3.png" alt="MSAA"></li><li>MSAA 的速度要比纯超采样的方案快，因为每个片元只会进行一次着色计算。</li><li>现在延迟渲染已经支持 MSAA 了。传统延迟渲染不支持 MSAA（需额外方案）（<a href="https://zhuanlan.zhihu.com/p/135444145">https://zhuanlan.zhihu.com/p/135444145</a> ）。MSAA 对延迟渲染的支持不是很好；有几个原因，一个是 MSAA 本质上是一种发生在光栅化阶段的技术，也就是几何阶段后，着色阶段前，这个技术需要用到场景中的几何信息，但是延迟渲染因为需要节省光照计算的原因，事先把所有信息都放在了 GBuffer 上，着色计算的时候已经丢失了几何信息；而且关键一点是如果强行这么做，MSAA 会增加数倍的带宽性能消耗，因此一般都不会这么做。还有一个原因是是以前 DX9 的时代，MRT (多重渲染目标)技术不支持 MSAA。</li></ul><h3 id="4-快速近似抗锯齿fast-approximate-antialiasing-fxaa">(4) 快速近似抗锯齿(fast approximate antialiasing, FXAA)</h3><ul><li>概念：基于屏幕空间的抗锯齿算法，它通过对图像进行<em>后处理</em>来平滑锯齿边缘（不依赖硬件）。与 SSAA 和 MSAA 不同，它不需要多重采样，也不改变渲染分辨率，而是直接在最终的帧缓冲上操作。本质上是一个图像过滤器，通过检测边缘并对边缘区域的像素进行模糊处理，来减少锯齿。</li><li>工作原理：<ul><li><ol><li>边缘检测<br>FXAA 首先通过分析屏幕空间图像中<strong>亮度或颜色的梯度变化</strong>，快速检测哪些地方存在<strong>锯齿边缘</strong>。</li></ol></li><li><ol start="2"><li>边缘平滑<br>检测到边缘后，FXAA 会对这些区域内的像素进行 <strong>模糊处理</strong> 或 颜色插值，将颜色值在边缘附近平滑过渡，从而消除锯齿。处理时会计算像素周围的<em>相邻像素颜色</em>通过 加权平均 或 线性插值 进行平滑</li></ol></li></ul></li><li>速度极快，适用于实时渲染</li><li>只在 2D 图像 上处理，不能消除 几何/遮挡锯齿</li></ul><h3 id="5-时域抗锯齿temporal-antialiasing-taa">(5) 时域抗锯齿(temporal antialiasing, TAA)</h3><ul><li>利用<strong>时间上的帧间信息</strong>来减少锯齿和抖动。</li><li>效果好，能消除几乎所有锯齿，包括透明物体</li><li>会产生 Ghosting / 拖影（运动物体边缘有残影）</li><li>成本低，比 SSAA 和 MSAA 性能消耗小</li><li>对 快速移动场景 效果不佳，需要运动矢量精确</li><li>流程：<ul><li>历史帧对齐 (Reprojection)：利用 运动矢量（Motion Vectors） 将 前一帧的像素 对齐到当前帧。这样可以准确对应历史帧的像素位置，避免图像拖影或错误混合；</li><li>采样偏移 (Jittering)：在每一帧中，微小地扰动相机采样位置（通常是 sub-pixel 级别）。这样，渲染出的每一帧像素信息会有所不同，类似于<strong>时间上的 Supersampling</strong>；</li><li>历史帧混合 (Temporal Filtering)：将 <em>当前帧像素</em> 与 <em>历史帧对齐后的像素</em> 进行加权平均。平滑掉锯齿，同时减少图像闪烁和噪声。</li></ul></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">上一帧图像 (历史帧) + 运动矢量<br>          ↓<br>  Reprojection（对齐）<br>          ↓<br>当前帧图像 + <span class="hljs-keyword">Jittering</span><br><span class="hljs-keyword"></span>          ↓<br> Temporal Filtering（历史与当前帧加权平均）<br>          ↓<br>最终平滑的抗锯齿图像<br></code></pre></td></tr></table></figure><h3 id="6-深度学习超采样deep-learning-super-sampling-dlss">(6) 深度学习超采样(Deep Learning Super Sampling, DLSS)</h3><p>在较低分辨率下渲染图像，并利用 AI 网络将其重建为高分辨率图像，同时保留细节和边缘清晰度，提升帧率且保证画质。</p><h3 id="7-亚像素形态学抗锯齿subpixel-morphological-antialiasing-smaa">(7) 亚像素形态学抗锯齿（subpixel morphological antialiasing ，SMAA）</h3><p>SMAA 是一种 屏幕空间后处理抗锯齿技术，它属于 形态学抗锯齿（Morphological Anti-Aliasing, MLAA） 的改进版，结合了 FXAA 的速度优势 和 MLAA 的抗锯齿质量，并加入了 亚像素检测 和 时间域信息（在高级模式下）。</p><h2 id="8-阴影技术">8. 阴影技术</h2><p>参考：</p><p><a href="https://learnopengl-cn.github.io/05%20Advanced%20Lighting/03%20Shadows/01%20Shadow%20Mapping/">https://learnopengl-cn.github.io/05 Advanced Lighting/03 Shadows/01 Shadow Mapping/</a><br><a href="https://www.wolai.com/cYLxaNaJYfPnRc66myZvtg"> RTR 4th Chapter 7</a><br><a href="/2025/04/01/GAMES202-L0304-Shadow/"> GAMES202 Shadow</a></p><h3 id="1-shadow-mapping">(1) Shadow Mapping</h3><ul><li><p>原理（two-pass）：</p><ul><li>从<strong>光源视角</strong>渲染场景，生成一个只保存每个像素的深度值的<strong>深度贴图</strong> (Shadow Map)</li><li>在正常渲染时，将每个像素投影到光源空间（先把坐标变换到世界空间通过矩阵变换<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>l</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>=</mo><mi>L</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>P</mi><mi>r</mi><mi>o</mi><mi>j</mi><mo>×</mo><mi>L</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mo>×</mo><msub><mi>p</mi><mrow><mi>w</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{light} = LightProj \times LightView \times p_{world}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.13889em;">tP</span><span class="mord mathnormal">ro</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mord mathnormal">Vi</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到光源裁剪空间再采样 shadow map），比较它与 Shadow Map 中的深度值，如果当前片元在光源空间的 深度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></msub><mo>&gt;</mo><msub><mi>d</mi><mrow><mi>s</mi><mi>h</mi><mi>a</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{current} &gt; d_{shadow}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">rre</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">ha</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则说明它被其他物体挡住，即在阴影中；否则（如二者相等）没有被遮挡，即不在阴影中。注意这里<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></msub><mo>=</mo><mfrac><mrow><msub><mi>p</mi><mrow><mi>l</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mi mathvariant="normal">.</mi><mi>z</mi></mrow><mrow><msub><mi>p</mi><mrow><mi>l</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mi mathvariant="normal">.</mi><mi>w</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">d_{current} = \frac{p_{light}.z}{p_{light}.w}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">rre</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3626em;vertical-align:-0.5481em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8145em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2901em;"><span></span></span></span></span></span></span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5131em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2901em;"><span></span></span></span></span></span></span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5481em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。根据结果 调整光照强度（通常是设为黑色或降低亮度）。</li><li>在 理论上 会觉得两次 Pass 的 z 应该是一样的，因为：同一个物体、同一个世界坐标、同一个 LightView 和 LightProj 矩阵。确实，对于<strong>同一物体的可见面</strong>，在 Shadow Pass 和 Lighting Pass 中拿到的光源空间深度值是相等的。但关键在于在 Lighting Pass 时，不只对 投影者（产生阴影的物体）计算阴影，而是对 所有片元 做阴影检测。Shadow Map 的真正用途是记录最靠近光源的深度（d_shadow）。在 Lighting Pass，对于当前片元，它的世界位置可能 被其他物体遮挡比较它的 d_current 和 Shadow Map 中相同位置的 d_shadow. 如果 当前片元在光源视角下的深度 &gt; Shadow Map 中的深度则说明它被遮挡，在阴影中。</li><li>并不是场景中的所有物体都需要被渲染到光源的视野中。首先，只有能够投射阴影的物体才需要进行渲染，我们将其称为 shadow caster（遮挡物，能够投射出阴影的物体）。例如：如果我们事先知道了地面只能够接收阴影，但是无法投射阴影，那么它就不需要被渲染到阴影贴图中。</li><li>pass1 通过光栅化生成 shadow map，pass2 在 fragment shader 中使用 shadow map。</li><li>image-space algorithm</li></ul></li><li><p>优点：</p><ul><li>简单、高效</li><li>支持所有类型的几何体</li><li>不需要场景几何的信息</li></ul></li><li><p>缺点：</p><ul><li>受限于 <strong>shadow map 的分辨率</strong> (在距离光源比较远的情况下，多个片段可能从深度贴图的同一个值中去采样) 以及 <strong>z-buffer 的数值精度</strong></li><li>因此该算法容易受到锯齿问题的影响，尤其是在物体之间的接触点附近。一个常见的问题是<strong>自阴影锯齿（self-shadow aliasing）</strong>，即一个三角形错误地对自身投射阴影，这个现象通常会被称为表面痤疮（surface acne）或者阴影痤疮（<strong>shadow acne</strong>）。产生这个问题主要有两个原因：其中一个原因是处理器精度的数值限制；另一个原因是几何上的，由于受到阴影贴图分辨率的限制，因此一个点状样本的值会被用来代表一个小范围区域的深度。也就是说，为光源生成的样本，几乎永远不会与屏幕样本位于相同的位置（例如：像素通常会在屏幕样本的中心进行采样）。当光源的存储深度值与观察表面的深度值进行比较时，光源的值可能会略低于表面的值，从而导致自阴影现象的发生。一种帮助避免（但并不总是能消除）各种阴影贴图瑕疵的常见方法是<strong>引入偏移量因子</strong>。</li><li><strong>过大的偏移量</strong>可能导致 所谓的**漏光（light leak）或者 Peter Panning **问题，即物体看起来像是悬浮在表面上方一样。这种瑕疵的出现，是因为物体接触点下方的区域（例如脚下的地面），被向前偏移得太多，因此并没有接收到阴影。</li></ul></li></ul><p>PS: Lighting pass 中使用什么投影？</p><p>所使用的投影类型<strong>取决于光源的类型</strong>：</p><ul><li><p><strong>对于方向光 (Directional Light，例如模拟太阳光):</strong></p><ul><li><strong>使用正交投影 (Orthographic Projection)。</strong></li><li><strong>为什么？</strong> 方向光被认为是无限远的光源，其光线是相互平行的。正交投影的特性是它能够保持物体的相对大小和形状，并且其视景体 (view frustum) 是一个长方体，投影线也是相互平行的。这与方向光平行光线的物理特性完美匹配。使用正交投影可以确保从光源视角看到的场景深度能够准确地反映平行光线照射下的遮挡关系。这个正交投影的视景体需要足够大，以覆盖主摄像机视景体中可能投射或接收阴影的区域。</li></ul></li><li><p><strong>对于点光源 (Point Light) 或聚光灯 (Spotlight):</strong></p><ul><li><strong>使用透视投影 (Perspective Projection)。</strong></li><li><strong>为什么？</strong> 点光源和聚光灯都有一个明确的位置，光线从这个点向外辐射（聚光灯则是在一个锥形范围内辐射）。透视投影的特性是“近大远小”，视景体是一个棱锥台（或圆锥台，在实际渲染中通常用棱锥台近似），投影线会汇聚到视点。这与点光源/聚光灯光线从一个点发散的物理特性一致。使用透视投影可以正确地捕捉到物体离光源越近，其在深度图上占据的区域越大，以及阴影随距离发散的效果。<ul><li>对于点光源，因为它向所有方向发光，通常需要渲染六个方向的透视投影到立方体贴图 (Cube Map) 的各个面上，每个面都相当于一个独立的 shadow map。</li><li>对于聚光灯，其视域本身就是一个锥形，所以单个透视投影非常适合。</li></ul></li></ul></li><li><p>总结：</p></li></ul><p>选择投影类型的根本目的是<strong>尽可能准确地模拟从光源“看”出去的场景</strong>，以便记录哪些表面离光源最近。</p><ul><li><strong>方向光</strong>的光线是平行的，没有单一的“视点”，因此正交投影是合适的模型。</li><li><strong>点光源/聚光灯</strong>的光线是从一个点发散的，有明确的“视点”，因此透视投影是合适的模型。</li></ul><p>这个第一个 pass 的输出（深度图）记录了从光源视角到场景中最近表面的距离。在后续的渲染 pass 中，当渲染主摄像机视角的场景时，每个片元的位置会被转换到光源的<strong>裁剪空间</strong>，并将其深度与 shadow map 中对应位置的深度进行比较，从而判断该片元是否处于阴影之中。</p><h3 id="2-百分比接近滤波percentage-closer-filteringpcf">(2) 百分比接近滤波（Percentage-Closer Filtering，PCF）</h3><p><strong>对阴影贴图技术进行简单的扩展，改善阴影贴图的分辨率问题</strong>，就可以获得质量不错的<strong>伪软阴影</strong>效果。</p><ul><li><p>PCF 是通过在 Shadow Map 中对周围<strong>多个采样点的深度测试结果进行平均</strong>，来实现阴影边缘平滑过渡的抗锯齿技术(仍然是硬阴影，边界只是模糊)。</p></li><li><p>在传统的 Shadow Mapping 中：片元的阴影检测是单点采样 → 0(在阴影中) 或 1(不在阴影中)，阴影边缘会出现明显的锯齿。</p></li><li><p>核心思想：在当前片元的 Shadow Map 坐标附近，进行多次深度比较采样，然后对结果进行平均。</p></li><li><p>步骤：</p><ul><li>在 Shadow Map 中 以当前片元坐标为中心，取一个 采样区域</li><li>对每个采样点，比较当前片元（当前采样点）的 d_current 与 Shadow Map 中存储的 d_shadow</li><li>将所有采样结果 取平均值</li></ul></li><li><p>即假设有 N 个采样点，每个采样点的阴影检测结果为：<br>PCF 采样点的阴影检测公式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>≤</mo><mi>d</mi><mi mathvariant="normal">_</mi><mi>s</mi><mi>h</mi><mi>a</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi mathvariant="normal">_</mi><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">_</mi><mi>s</mi><mi>h</mi><mi>a</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">s_i =\begin{cases}1, &amp; d\_current \leq d\_shadow \\0, &amp; d\_current &gt; d\_shadow\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal">rre</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">s</span><span class="mord mathnormal">ha</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal">rre</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">s</span><span class="mord mathnormal">ha</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>PCF 阴影值：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S = \frac{1}{N} \sum_{i=1}^{N} s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>现实世界中，面光源可以产生柔和的软阴影效果，到达表面上某个位置的光线数量，与该位置所能看见的光源面积大小成比例。而 PCF 算法试图通过反转这个过程，来对一个精确光源或者方向光的软阴影进行近似。PCF 并没有从一个表面位置上来计算光源可见区域的面积，而是从靠近该位置的一组表面位置上，来计算精确光源的可见性。PCF 的名称&quot;percentage-closer filtering&quot;就表明了算法的最终目标，即找到光源可见样本所占的百分比，使用这个百分比来近似照射到表面位置的光线数量。如下图所示，左图中，来自面光源的棕色线代表了半影的范围。对于阴影接收物上的点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">p</mi></mrow><annotation encoding="application/x-tex">\mathbf{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathbf">p</span></span></span></span>，可以对面光源表面进行采样，并通过计算哪些采样点没有被遮挡物遮挡，从而获得该点所接收到的光线数量。右图中的点光源并不会产生半影现象。PCF 通过反转左图中过程，来对面光源效果进行近似：在给定的位置上，对阴影贴图附近的可比较区域进行采样，从而计算有多少样本会被照亮（百分比）。图中红色椭圆代表了在阴影贴图上进行采样的区域，在理想情况下，这个圆形区域的半径，与接收物和遮挡物之间的距离成正比。<br><img src="PCF.png" alt="PCF"></p></li></ul><h3 id="3-级联阴影贴图-cascade-shadow-map-csm">(3) 级联阴影贴图 (Cascade Shadow Map, CSM)</h3><p>目前实时渲染中最常用的硬阴影技术之一，特别是在 开放世界游戏 和 大场景渲染 中。</p><ul><li>在传统 Shadow Mapping 中，Shadow Map 是从光源视角渲染的一张全局深度贴图。在大场景下，<strong>近处物体阴影锯齿严重，远处阴影分辨率浪费</strong>，原因是 Shadow Map <strong>分辨率固定</strong>，越远区域分布得越稀疏，近处阴影细节丢失。</li><li><strong>将摄像机视锥体 (View Frustum) 沿深度方向划分为多个区间 (Cascade)，每个区间生成一张单独的 Shadow Map</strong>。近处区间 分配更高 Shadow Map 分辨率；远处区间分辨率可以降低。</li><li>步骤：<ul><li>a. 视锥体划分 (Frustum Split)<ul><li>常见的划分方式：<br>Uniform Split: 等距离划分<br>Log Split: 近处细，远处疏<br>Practical Split: Uniform + Log 混合（效果最好）</li></ul></li><li>b. 为每个 Cascade 生成 Shadow Map。在 每个子视锥体 对应的 光源视角 下，渲染 Shadow Map</li><li>c. 渲染阶段选择对应 Shadow Map。即在 Lighting Pass 时，判断当前片元位于哪个 Cascade 区间，从而选择对应的 Shadow Map 做阴影检测。</li></ul></li><li>CSM 本质是硬阴影技术，通常搭配 PCF 或 PCSS 等软化技术使用，实际效果可以是 软阴影</li></ul><h3 id="4-软阴影">(4) 软阴影</h3><p>Shadow mapping 可以生成硬阴影，但真实世界的阴影有模糊过渡边缘（软阴影，Soft Shadow）</p><h4 id="百分比渐进软阴影-percentage-closer-soft-shadow-pcss">百分比渐进软阴影 (Percentage Closer Soft Shadow, PCSS)</h4><ul><li>PCSS 是一种基于 Shadow Map 的软阴影技术，用于模拟真实世界的软阴影效果 —— 阴影边缘根据<strong>遮挡物与接收面之间的距离</strong>变得模糊或锐利。</li><li>通过对阴影贴图上的附近区域进行搜索，来找到所有可能的遮挡物，并使用这些遮挡物与表面位置的平均距离，来决定采样区域的宽度。通过动态调整滤波半径来模拟物理上真实的半影扩散效果。</li><li>步骤：<ul><li>a. <strong>Blocker Search</strong> (遮挡物搜索)：在 Shadow Map 中，以当前片元的 Shadow Map 坐标为中心，在一个小范围内进行采样，找出被 blocker 遮挡的采样点（这里通过深度比较来判断哪些是&quot;被遮挡的采样点&quot;，即当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi mathvariant="normal">_</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow><mo>≤</mo><mi>d</mi><mi mathvariant="normal">_</mi><mrow><mi>s</mi><mi>h</mi><mi>a</mi><mi>d</mi><mi>o</mi><mi>w</mi></mrow></mrow><annotation encoding="application/x-tex">d\_{current} \leq d\_{shadow}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal">rre</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal">d</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">ha</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></span>时，当前片元比 Shadow Map 中的 blocker 更近，即未被遮挡，反之被遮挡），<strong>统计平均 blocker 深度 z_avg</strong>；</li><li>b. <strong>Penumbra Size Estimation</strong> (半影区域估算)：<strong>根据 当前片元与 blocker 平均深度的距离，动态估算半影大小</strong> (filter radius)。公式通常类似：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Filter Radius</mtext><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>z</mi><mtext>receiver</mtext></msub><mo>−</mo><msub><mi>z</mi><mtext>avg</mtext></msub><mo stretchy="false">)</mo></mrow><msub><mi>z</mi><mtext>avg</mtext></msub></mfrac><mo>×</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\text{Filter Radius} = \frac{(z_{\text{receiver}} - z_{\text{avg}})}{z_{\text{avg}}} \times k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">Filter Radius</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.5746em;vertical-align:-0.5423em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0323em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.044em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">avg</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5073em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.334em;"><span style="top:-2.357em;margin-left:-0.044em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">receiver</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.044em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">avg</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>。这里 k 是一个调节参数。通过公式看出，接收面 (Receiver) 到遮挡物 (Blocker) 之间的距离越远，半影越宽，阴影越模糊；</li><li>c. <strong>PCF Filtering</strong> (模糊采样)：在估算好的 Filter Radius 范围内，执行 <strong>PCF</strong>。即：在阴影区域内大量采样，对阴影测试结果进行平均，实现边缘模糊效果。</li></ul></li><li>总结：Lighting Pass 每个片元：<ul><li>Blocker Search (查找遮挡物深度) 得到 平均 blocker 深度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">z_{avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">vg</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></li><li>基于平均 blocker 深度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">z_{avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">vg</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 和 类似相似三角形的式子估算半影大小 (Filter Radius)</li><li>在估算得到的 Filter Radius 对应的区域内做 PCF</li><li>得到最终软阴影效果</li></ul></li><li>支持实时渲染，计算量大（solution：稀疏采样）</li></ul><h4 id="方差阴影贴图-variance-shadow-mapping-vsm">方差阴影贴图 (Variance Shadow Mapping, VSM)</h4><p>在 Shadow Map 中存储均值与方差，近似软阴影。</p><ul><li>步骤：<ul><li>a. 存储 Shadow Map<ul><li>对于每个采样点：<p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mn>1</mn></msub><mo>=</mo><mi mathvariant="double-struck">E</mi><mo stretchy="false">[</mo><mi>d</mi><mo stretchy="false">]</mo><mspace width="1em"><mo stretchy="false">(</mo><mtext>平均深度</mtext><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mn>2</mn></msub><mo>=</mo><mi mathvariant="double-struck">E</mi><mo stretchy="false">[</mo><msup><mi>d</mi><mn>2</mn></msup><mo stretchy="false">]</mo><mspace width="1em"><mo stretchy="false">(</mo><mtext>平均深度平方</mtext><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}m_1 = \mathbb{E}[d] \quad (\text{平均深度}) \\m_2 = \mathbb{E}[d^2] \quad (\text{平均深度平方})\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathbb">E</span><span class="mopen">[</span><span class="mord mathnormal">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">平均深度</span></span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathbb">E</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord cjk_fallback">平均深度平方</span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>更具体地，在生成 Shadow Map (第一 Pass) 时，对于每个 Shadow Map 纹理坐标 (u, v)，不是简单存 单个 d 值，而是在一个固定小窗口内 (比如 3×3, 5×5)统计：所有采样点深度的平均值 → 存到 m1；所有采样点深度平方的平均值 → 存到 m2。为什么不能只存单个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>d</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">d^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>？因为如果你只存单个采样点的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>d</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">d^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，方差（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup><mo>=</mo><msub><mi>m</mi><mn>2</mn></msub><mo>−</mo><msubsup><mi>m</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma^2 = m_2 - m_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>）永远是 0。</li></ul></li><li>b. 计算方差<p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup><mo>=</mo><msub><mi>m</mi><mn>2</mn></msub><mo>−</mo><msubsup><mi>m</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma^2 = m_2 - m_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p></li><li>c. Chebyshev 不等式估算可见性<br>根据 <strong>切比雪夫不等式 (Chebyshev’s Inequality)</strong>：<p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>d</mi><mtext>current</mtext></msub><mo>≤</mo><mi>d</mi><mo stretchy="false">)</mo><mo>≤</mo><mfrac><msup><mi>σ</mi><mn>2</mn></msup><mrow><msup><mi>σ</mi><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>d</mi><mtext>current</mtext></msub><mo>−</mo><msub><mi>m</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(d_{\text{current}} \leq d) \leq \frac{\sigma^2}{\sigma^2 + (d_{\text{current}} - m_1)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">current</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4271em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">current</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>这个上界用作 <strong>阴影值</strong>，代表<strong>当前片元被遮挡的概率</strong>。</li></ul></li><li>存在 light leaking</li></ul><h4 id="ray-tracing-based-soft-shadow">Ray Tracing Based Soft Shadow</h4><p>最真实，基于光线追踪，计算阴影笔 umbra 和半影 penumbra 区域，开销大。</p><ul><li>采样光源：对于每个片元，从该片元位置发射多条 Shadow Rays (阴影光线)方向为从片元到光源面积内的多个采样点。</li><li>遮挡检测：每条 Shadow Ray，如果与遮挡物相交，即被遮挡；如果直达光源即不被遮挡。</li><li>统计可见率：统计所有 Shadow Rays 的 遮挡比例。这个比例直接用作 当前像素的阴影值，形成平滑的软阴影边缘。</li><li>具体效果：靠近遮挡物的区域半影区小，阴影边界锐利；远离遮挡物的区域半影区大，阴影边界模糊。</li></ul><h2 id="9-延迟渲染-deferred-rendering">9. 延迟渲染 (Deferred Rendering)</h2><h3 id="1-延迟渲染概念流程">(1) 延迟渲染概念/流程</h3><ul><li>概念：核心思路是先把场景几何信息存到缓冲区 (<strong>G-Buffer</strong>)，再在单独的 Pass 中进行光照计算。它主要为了解决传统正向渲染（Forward Rendering）在<strong>多光源场景</strong>下性能下降的问题。</li><li>流程<ul><li>a. Geometry Pass：首先将场景渲染一次，获取到的待渲染对象的各种几何信息存储到名为 G-buffer 的缓冲区中<br>G-Buffer 通常存储：<ul><li>位置 (Position)</li><li>法线 (Normal)</li><li>材质参数 (Albedo, Specular, Roughness 等)</li><li>深度 (Depth)<br>这一步不做光照计算，但进行深度测试，只保留可见像素</li></ul></li><li>b. Lighting Pass：<ul><li>使用 G-Buffer 中的数据</li><li>遍历场景中所有光源</li><li>逐像素计算光照并写入最终帧缓冲</li></ul></li></ul></li></ul><p>PS: <strong>MRT</strong> (Multiple Render Targets)<br>现代 GPU 原生支持 (OpenGL, DirectX, Vulkan 等)</p><ul><li>传统渲染：<ul><li>一个 Fragment Shader → 只能写入 一个颜色缓冲区 (Color Attachment)</li></ul></li><li>MRT 渲染：<ul><li>一个 Fragment Shader → 可以同时写入 多个颜色缓冲区<br>比如：<br>Color Attachment 0 → 位置<br>Color Attachment 1 → 法线<br>Color Attachment 2 → Albedo (漫反射颜色)<br>Color Attachment 3 → Material 参数（Roughness, Metallic, Specular 等）<br>这样 <strong>一次几何 Pass 就能同时写入所有 G-Buffer 信息</strong>，从而为后面的 Lighting Pass 提供数据。</li></ul></li></ul><h3 id="2-延迟渲染和正向渲染的区别优缺点">(2) 延迟渲染和正向渲染的区别，优缺点？</h3><ul><li>延迟渲染<ul><li>优点：<ul><li>高效处理大量光源：光照计算与几何渲染分离，避免每个像素多次进行光照计算，性能较好。</li><li>减少过度绘制：只对可见像素进行光照计算。</li><li>提供更多屏幕空间信息：在延迟渲染中，对于每个像素，其对应在场景中的位置、法线方向、材质属性（如漫反射系数、镜面反射系数等）都会被存储在 G-buffer 中。这些信息都是关于场景在屏幕空间上的详细描述。例如，位置信息可以精确地指出场景中每个物体在屏幕空间中的投影位置；法线信息可以表示物体表面在该像素点处的朝向，这对于光照计算中确定光线与物体表面的交互关系非常重要。丰富的屏幕空间信息使得延迟渲染可以很容易地支持多种复杂的光照模型和后期处理特效。对于基于屏幕空间的光照模型，如屏幕空间环境光遮蔽（SSAO）、屏幕空间反射（SSR）等。</li></ul></li><li>缺点：<ul><li>内存和带宽消耗高：需要额外的 G-Buffer 存储几何信息，显存占用较大。带宽(bandwidth)指的是 GPU 在每秒钟内从显存 (VRAM) 读写数据的能力，通常以 GB/s 为单位。带宽高原因是写入阶段每个像素要写多个 Buffer，读取阶段每个像素需要读取多个 Buffer。</li><li>材质复杂度受限（G-Buffer 容量有限）</li><li>不支持透明物体：G-Buffer 无法正确处理透明物体的多层叠加效果。透明物体的正确渲染需要：排序（从远到近）；逐片元混合 (Blending) ，即需要知道多个重叠片元的信息。而延迟渲染 G-Buffer，每个像素只存最近的一个片元；后面的透明片元信息会被深度测试丢弃。解决办法是把渲染器分为两个部分：一个是延迟渲染的部分，另一个是专门为了混合或者其他不适合延迟渲染管线的着色器效果而设计的的正向渲染的部分。即透明物体单独使用正向渲染 (Forward Rendering) Pass，也叫 Hybrid Rendering Pipeline (混合渲染管线)。</li><li>迫使对大部分场景的光照使用相同的光照算法：你可以通过包含更多关于材质的数据到 G-Buffer 中来减轻这一缺点。</li><li>抗锯齿问题：传统延迟渲染与 MSAA 不兼容，抗锯齿处理复杂。</li></ul></li></ul></li><li>正向渲染<ul><li>优点：<ul><li>内存占用低：无需额外的 G-Buffer，内存消耗较低。</li><li>支持透明物体：可以很好地处理透明物体的渲染。</li><li>抗锯齿效果好：支持 MSAA，抗锯齿处理简单。</li></ul></li><li>缺点：<ul><li>性能问题：在处理大量光源时，每个像素的光照计算会变得非常耗时。</li><li>灵活性较差：修改光照模型需要重新渲染几何信息。</li></ul></li></ul></li></ul><h3 id="3-如何改进正向渲染">(3) 如何改进正向渲染？</h3><ul><li><p>a. Forward+（Forward Plus）</p><ul><li>把<strong>屏幕</strong>分成小块（Tile），每个 Tile 预计算出有哪些光源会影响它，然后片元阶段只处理这些光</li><li>实现步骤：<ul><li>使用 Compute Shader（compute shader 不参与图形渲染流水线（不输出像素），而是用于在 GPU 上执行任意并行计算任务）扫描所有光源，根据光源影响范围（球体包围）将它们分配到屏幕 Tile</li><li>把光源 ID 存到一个 光源列表缓冲区（light index list）</li><li>在每个片元 Shader 中读取当前 Tile 的光源列表，只遍历这些光源</li></ul></li><li>优点：<ul><li>可以处理上百个动态光源（比传统 Forward 更快）</li><li>保持前向渲染支持透明、MSAA 的优势</li><li>启用光照剪裁，避免浪费计算</li></ul></li></ul></li><li><p>b. Clustered Forward Rendering</p><ul><li>进一步将<strong>空间</strong>划分成 3D 格子（Screen Tile × Depth Slice）</li><li>实现步骤：<ul><li>像 Forward+ 一样划分 Tile</li><li>加入 Z 轴（视锥深度），构成立体格子（Cluster）</li><li>把每个光源分配到对应的 Cluster 列表中</li><li>片元 Shader 中定位所在 Cluster，读取它的光源</li></ul></li><li>优点：<ul><li>精度更高（近处 Tile 更小，光源分配更精准）</li><li>支持大量光源（常用于 VR、AR、移动端）</li><li>很适合方向光、点光、聚光等混合情况</li></ul></li></ul></li><li><p>常见引擎使用的方法</p><table><thead><tr><th>游戏 / 引擎</th><th>渲染方式</th><th>特性说明</th></tr></thead><tbody><tr><td>Unity URP（高端）</td><td>Forward+</td><td>基于 Tile 的光源聚合</td></tr><tr><td>Unreal Engine (Mobile)</td><td>Forward+</td><td>支持透明 + 多光源优化</td></tr><tr><td>Doom Eternal</td><td>Clustered Forward</td><td>超高性能 + 大量动态光源</td></tr><tr><td>Godot 4.x</td><td>Clustered Forward</td><td>基于 Vulkan，轻量灵活</td></tr></tbody></table></li><li><p>常见方法对比</p><table><thead><tr><th>改进方式</th><th>是否重写渲染管线</th><th>光源支持能力</th><th>实现难度</th><th>适合平台</th></tr></thead><tbody><tr><td>Forward</td><td>否</td><td>少量光源</td><td>简单</td><td>普通场景、低端设备</td></tr><tr><td>Forward+</td><td>否</td><td>中等光源</td><td>中</td><td>中高端 PC / 移动</td></tr><tr><td>Clustered Fwd</td><td>是（3D Tile）</td><td>大量光源</td><td>中高</td><td>VR、大型室内场景</td></tr></tbody></table></li></ul><h2 id="10-纹理贴图">10. 纹理贴图</h2><p>将一张二维图像，按照一定的映射关系，将每个像素贴合到物体表面的对应位置。</p><h3 id="1-纹理环绕和纹理过滤采样">(1) 纹理环绕和纹理过滤(采样)</h3><ul><li><p>环绕方式：纹理坐标的范围通常是从(0, 0)到(1, 1)，设置纹理坐标采样超出范围时，采取什么行为</p><ul><li>GL_REPEAT 对纹理的默认行为。重复纹理图像。</li><li>GL_MIRRORED_REPEAT 和 GL_REPEAT 一样，但每次重复图片是镜像放置的。</li><li>GL_CLAMP_TO_EDGE 纹理坐标会被约束在 0 到 1 之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。</li><li>GL_CLAMP_TO_BORDER 超出的坐标为用户指定的边缘颜色。</li></ul></li><li><p>过滤方式：纹理坐标不依赖于分辨率(Resolution)，它可以是任意浮点值，所以 OpenGL 需要知道怎样将纹理像素(Texel)映射到纹理坐标。当物体很大但是纹理的分辨率很低的时候这很重要。</p><ul><li>GL_NEAREST（也叫邻近过滤，Nearest Neighbor Filtering）是 OpenGL 默认的纹理过滤方式。当设置为 GL_NEAREST 的时候，OpenGL 会选择中心点最接近纹理坐标的那个像素。</li><li>GL_LINEAR（也叫线性过滤，(Bi)linear Filtering）它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。</li><li>GL_NEAREST 产生了颗粒状的图案，我们能够清晰看到组成纹理的像素，而 GL_LINEAR 能够产生更平滑的图案，很难看出单个的纹理像素。</li></ul></li></ul><h3 id="2-mipmap多级渐远纹理的概念如何实现">(2) mipmap（多级渐远纹理）的概念，如何实现</h3><p>问题： 当物体 距离相机较远 或 在屏幕上只占很小的区域时：</p><ul><li>一个屏幕像素对应纹理中的多个 texel</li><li>直接采样高分辨率纹理，会出现严重的 <strong>Moiré Pattern（摩尔纹）和 Aliasing（锯齿/闪烁）</strong></li></ul><p>引入 mipmap 解决远距离物体纹理采样时的 aliasing 和采样效率问题，即生成一系列的纹理图像，<strong>后一个纹理图像是前一个的二分之一</strong>。距观察者的距离超过一定的阈值，使用不同的多级渐远纹理进行采样，即最适合物体的距离的那个。由于距离远，分辨率不高也不会被用户注意到。同时，多级渐远纹理另一加分之处是它的性能非常好。</p><h3 id="3-法线贴图及其他各种贴图的作用">(3) 法线贴图(及其他各种贴图)的作用</h3><table><thead><tr><th>贴图方式</th><th>思想概述</th><th>提出年代</th></tr></thead><tbody><tr><td>Bump Mapping (凹凸贴图)</td><td>计算 vertex 的光照时，不是真的使用该 vertex 的法向法向量，而是在原法向法向量上加上一个切分扰动变化的量，达到视觉效果。No self-occlusion, No self-shadow, No silhouette.</td><td>1978</td></tr><tr><td>Displacement Mapping (移位贴图)</td><td>直接作用于 vertex，根据 displacement map 中的数值改变 vertex 的位置，真实改变几何形状，产生真实阴影和轮廓。</td><td>1984</td></tr><tr><td>Normal Mapping (法线贴图)</td><td>normal map 贴图法线信息，存储在 RGB 通道。计算光照时，替代原 vertex 法线。No self-occlusion, No self-shadow, No silhouette.</td><td>1996</td></tr><tr><td>Parallax Mapping (Virtual Displacement Mapping) (视差贴图)</td><td>没有修改 vertex 的位置，贴图时根据 height map 计算纹理坐标的 offset，增强视差效果。No self-occlusion, No self-shadow, No silhouette.</td><td>2001</td></tr><tr><td>Relief Mapping (Steep Parallax Mapping) (浮雕贴图)</td><td>在 Parallax Mapping 基础上进一步改进，增加了遮挡、阴影、轮廓线等效果。支持 self-occlusion, self-shadowing, view-motion parallax, and silhouettes.</td><td>2005</td></tr></tbody></table><h3 id="4-虚拟纹理">(4) 虚拟纹理</h3><ul><li>按需加载和分块管理纹理，这样可以使用超高分辨率的大纹理而不会爆显存。</li><li>只在 GPU 上加载当前帧可见区域的纹理块（tile），不可见的部分不加载。</li></ul><h2 id="11-空间加速结构算法">11. 空间加速结构/算法</h2><p>参考：<br><a href="/2025/01/12/GAMES101-L13-RayTracing1/"> GAMES101 Lecture 13-14</a><br><a href="https://www.wolai.com/q4hLtwuXRJHtc8rytjmQQa"> RTR Chapter 19</a></p><h3 id="1-包围体-bounding-volume">(1) 包围体 Bounding Volume</h3><ul><li>用比所包含的物体更加简单的几何形状来进行相交测试，比使用内部物体本身快得多。</li><li>球体、轴对齐包围盒（axis-aligned bounding box，AABB）(使用 AABB 可以在计算射线的 t 参数时避免点乘法向量，具体见<a href="/2025/01/12/GAMES101-L13-RayTracing1/"> GAMES101 Lecture 13-14</a>)、定向包围盒（oriented bounding box，OBB）和 k-DOP 等</li><li>三维实时渲染中用于视锥体剔除</li></ul><h3 id="2-均匀空间划分-格子-grids">(2) 均匀空间划分 - 格子 Grids</h3><ul><li>在包围盒中建立小格子并把与格子重叠的物体记录在对应的格子里</li><li>按照光线前进的方式遍历格子，如果格子中不包含物体则可以避免求交，进一步提高效率</li><li>格子数量可以通过 常数乘以物体数 来确定</li><li>当有大量大小相近的物体均匀分布在场景中时，格子可以有效提升效率（其他不行）</li></ul><h3 id="3-kd-tree">(3) KD Tree</h3><ul><li>二叉空间划分树（binary space partitioning tree），简称 BSP 树，有着两种明显不同的形式：轴对齐（axis-aligned）和多边形对齐（polygon-aligned）。通过使用一个平面来将空间划分成两部分，然后将场景中的几何物体分类到这两个空间中，从而递归完成 BSP 树的创建。一个值得注意的特性是，如果以某种方式来遍历一个 BSP 树，那么从任何角度来看，树的几何内容都可以从前到后进行排序。对于轴对齐的 BSP 树，这种排序是近似的；而对于多边形对齐的 BSP 树，这种排序则是精确的。</li><li>KD 树是轴对齐的 BSP 树。首先，整个场景被包围在一个轴对齐包围盒（axis-aligned bounding box, AABB）中。然后将这个包围盒递归细分为更小的包围盒。现在，假设我们有一个任意递归级别的包围盒，选择这个包围盒的一个轴并生成一个垂直平面，使用这个平面来将包围盒空间划分为两个子包围盒。这个划分平面可以是固定的也可以变化。如下图，内部节点不存储物体，叶子节点存储物体列表。<br><img src="KDTree.png" alt="KD树"></li><li>在一个包围盒中，可能会有一些物体与划分平面相交，对于这些物体有多种处理方法，例如：这些物体可以被存储在树的这一层中，或者是作为两个子包围盒的成员（冗余），再或者是被这个平面分割成两个单独的物体。以树结构进行存储的好处在于，树中只有物体的一个副本，想要删除一个物体是很简单的。</li><li>实际中常常利用 KD Tree 提供的<strong>粗略的前后排序</strong>。对于<strong>遮挡剔除</strong>算法，以及通过最小化像素过度绘制来降低像素着色器的成本而言，都十分有用。假设遍历一个名为 N 的节点，此时 N 是遍历开始时的根结点。我们会检查节点 N 的划分平面，并在观察者所在平面的一侧来继续对树进行递归遍历。因此，只有当这一半的树结构被遍历完时，我们才会开始遍历树的另一半。但是由于叶子节点中的内容并没有进行排序，而且一个物体可能会位于树的许多节点中，因此这种遍历方式并不会给出精确的前后顺序。然而它能够给出一个粗略的从前到后（front-to-back）排序，这通常来说会很有用。与观察者的位置相比较，通过在节点平面的另一侧开始遍历，可以获得大致的从后向前（back-to-front）排序，这对于<strong>透明排序</strong>而言十分有用。也可以用来测试光线与场景几何的相交情况，将观察者的位置直接转换为光线的原点即可。</li></ul><h3 id="4-八叉树-oct-tree">(4) 八叉树 Oct-Tree</h3><ul><li>类似于轴对齐的 BSP 树。一个 box 会同时沿着三个轴进行分割，并且分割点必须位于 box 的中心。这将会创建 8 个新的 box，因此被称为八叉树。这会使得结构更加规则化，从而让一些查询变得更加高效。</li><li>八叉树是通过将整个场景包围在一个最小的 AABB 中来进行构建的。剩下的过程本质上是递归的，会在满足终止条件时结束。与轴对齐的 BSP 树一样，这些终止条件可以包括达到最大递归深度、或者在一个 box 中获得一定数量的图元。如果满足了某个条件，算法会将这些图元绑定到这个 box 上，并终止递归过程。否则，将会沿着这个 box 的主轴，使用三个平面来对这个 box 进行进一步地细分，从而形成 8 个相同大小的 box。</li><li>四叉树是八叉树的二维等效形式</li></ul><h3 id="4-层次包围体-bounding-volume-hierarchy-bvh">(4) 层次包围体 Bounding Volume Hierarchy, BVH</h3><ul><li>KD Tree 存在的问题：<ul><li>给定一个 bbox，很难检查一个三角形是否与该 bbox 相交。</li><li>如果一个对象与多个单元格重叠，则会在多个叶节点中冗余存储对象。</li></ul></li><li>为解决上述问题，使用 BVH</li><li>构建 BVH<ul><li>查找 BBOX</li><li>递归地将对象集合分割成两个子集</li><li>重新计算子集的边界框</li><li>在必要时停止</li><li>将对象存储在每个叶节点中<br><img src="BVH.png" alt="BVH"></li></ul></li><li>如何细分一个节点？<ul><li>选择一个维度进行分割</li><li>启发式方法#1：始终选择节点中最长的轴</li><li>启发式方法#2：在对象的中位数位置分割节点（给定 n 个元素，我们可以用快速选择算法在 O(n)时间内找到第 i 个最大的元素(快速选择算法)）</li></ul></li><li>终止标准是什么？<ul><li>启发式方法：当节点包含元素少至某个量时停止</li></ul></li><li>优点<ul><li><strong>KD Tree 属于 spatial partition，BVH 属于 object partition</strong></li><li>它确保每个 object 只会存储在一个 bbox 中。</li><li>**边界框是基于 object 计算的，因此 object 完全包含在边界框内。**也就是说，无需担心计算 object 和 bbox 之间的交集。</li><li><strong>KD 树是静态结构</strong>，这意味着对于动态场景，重建或更新它们在计算上是昂贵的。在现代光线追踪应用中，例如游戏中的实时渲染，动态或动画场景很常见。BVH 之类的替代方案更灵活和高效，因为它们允许<em>增量更新和重新拟合</em>，而无需重建整个结构。</li><li>KD 树处理相干光线（例如光线追踪中由主光线或阴影光线生成的光线）的效率不如 BVH。这是因为 KD 树刚性地细分空间，这可能导致相干光线需要更多遍历步骤。BVH 凭借其边界体积，可以封装大片空间区域，从而使相干光线能够更有效地跳过不必要区域的遍历。</li></ul></li></ul><h2 id="12-蒙特卡洛积分">12. 蒙特卡洛积分</h2><p>具体见：<br><a href="/2025/01/14/GAMES101-L16-RayTracing4/"> GAMES101 Lecture 16</a></p><ul><li><p>蒙特卡洛积分 (Monte Carlo Integration)是一种基于随机采样的数值积分方法</p></li><li><p>原理：将积分问题转化为<strong>在积分区域内随机采样并取平均</strong>的问题。</p></li><li><p>反射方程和渲染方程利用蒙特卡洛积分求解。这里以反射方程为例：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_r (p, \omega_r) = \int_{H^2} f_r(p, \omega_i \rightarrow \omega_r) L_i (p, \omega_i) \cos \theta_i d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2719em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.3895em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>这是一个高维积分，直接积分复杂、难以解析，采用蒙特卡洛积分 + 随机光线采样 近似估算像素亮度。</p></li><li><p>默认情况下，每次采样都是完全（伪）随机。对 <strong>低差异序列</strong> （Hammersley 序列：把十进制数字的二进制表示镜像翻转到小数点右边而得）进行蒙特卡洛积分，该序列生成的仍然是随机样本，但样本分布更均匀。当使用低差异序列生成蒙特卡洛样本向量时，该过程称为拟蒙特卡洛积分。拟蒙特卡洛方法具有更快的收敛速度，这使得它对于性能繁重的应用很有用。</p></li><li><p>不用蒙特卡洛怎么表示积分？</p></li></ul><h2 id="13-重要性采样">13. 重要性采样</h2><ul><li>原理：一种<strong>减少蒙特卡洛积分方差</strong>的随机采样策略。重要性采样即通过现有的一些已知条件（分布函数），想办法集中于<strong>被积函数分布可能性较高的区域</strong>(重要的区域)进行采样，进而可高效地计算准确的估算结果的的一种策略。</li></ul><p>普通蒙特卡洛积分：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo>=</mo><msub><mo>∫</mo><mi>D</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi><mo>≈</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I = \int_{D} f(x) \, dx \approx \frac{1}{N} \sum_{i=1}^{N} f(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2719em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4336em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>重要性采样版本：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo>≈</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">I \approx \frac{1}{N} \sum_{i=1}^{N} \frac{f(x_i)}{p(x_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li><p>理解：因为<strong>概率密度函数可能不是均匀分布的</strong>，有些地方出现的概率高，有的地方概率低，因此应该尽可能的多采用概率密度高的区域，<strong>把更多的采样点放在贡献大的地方</strong>，减少浪费在不重要区域的随机采样；否则如果用均匀采样，最后的结果不准确，也造成了计算的浪费</p></li><li><p>举例：在使用路径追踪（或其他计算方法）的时候，我们会从被观察点 p 点随机生成一条入射光线（方向朝外），如果这个光线是均匀分布的话，很有可能可能许多发射出的光线最后都没有与光源相交，这样就造成了很多计算的浪费并造成噪声。重要性采样是说，着重去采样那些更有可能打到光源上的光线，比如更多地采样光源方向的光线。</p><ul><li>Cosine-Weighted Hemisphere Sampling：对于<em>漫反射</em>材质，重要性采样会根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow><annotation encoding="application/x-tex">cos\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">cos</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>分布采样，这样更多光线指向 法线附近，因为这些方向贡献最大。</li><li>Specular BRDF Sampling：对于<em>镜面或高光</em>材质，重要性采样会根据 BRDF 的高光分布调整，更多采样在主要反射方向，快速收敛，减少噪声。</li><li>光源直接采样 (Light Sampling)：为了减少 Direct Lighting Noise，路径追踪中直接从光源表面面积均匀采样点，计算可见性，直接贡献到当前像素亮度（见<a href="/2025/01/14/GAMES101-L16-RayTracing4/"> GAMES101 Lecture 16</a>）。</li><li>对光源的重要性采样和基于 GGX 函数(GGX 是一种 BRDF 中使用的 法线分布函数（NDF），描述了一个粗糙表面上的微法线朝向分布，用于模拟高光区域)的重要性采样有什么区别？都是采样集中于被积函数分布可能性较高的区域，但一个是从周围光源分布的角度出发，一个是从物体材质法线分布的角度出发。</li></ul></li></ul><h2 id="14-伽马矫正gamma-correction">14. 伽马矫正（gamma correction）</h2><ul><li><p>为什么需要 gamma 校正</p><ul><li>显示器的亮度响应是非线性的，大多数显示设备（如 LCD、CRT、LED）亮度输出 不等于 输入电压。设备的亮度通常遵循 幂律曲线：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo>=</mo><msup><mi>V</mi><mi>γ</mi></msup></mrow><annotation encoding="application/x-tex">L = V^{\gamma}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span></span></span></span>，其中 L 为显示亮度，V 为输入电压，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>通常为 2.2 (sRGB 标准)。</li><li>人类所感知的亮度恰好和 CRT 所显示出来相似的指数关系非常匹配。人眼所感知到的正常的灰阶，亮度要增加一倍才会感觉比原来变亮了一倍（如：颜色值从 0.1 到 0.2，我们会感受到一倍的颜色变化，而从 0.4 到 0.8 我们才能感受到相同程度（变亮一倍）的颜色变化），即<strong>物理亮度和感知亮度不一致</strong>。人眼对暗部细节敏感，对高亮区域不敏感。</li><li>光照计算在线性空间完成</li></ul></li><li><p>Gamma 校正是为了补偿显示设备的非线性亮度输出，使得图像的视觉效果更加真实</p></li><li><p>Gamma 校正(Gamma Correction)的思路是在最终的颜色输出到显示器之前先将 Gamma 的倒数作用到颜色上。</p></li><li><p>因为显示器总是在 sRGB 空间中显示应用了 gamma 的颜色，当在计算机上绘制、编辑或者绘制一个图片的时候，所选的颜色都是显示器上看到的。这实际意味着所创建或编辑的图片并不是在线性空间，而是在 sRGB 空间中（sRGB 空间定义的 gamma 接近于 2.2），假如在屏幕上对暗红色翻一倍，便是根据你所感知到的亮度进行的，并不等于将红色元素加倍。结果就是纹理编辑者，所创建的所有纹理都是在 sRGB 空间中的纹理，所以如果我们在渲染应用中使用这些纹理必须考虑到这点。</p></li><li><p>因此，加载纹理时要进行 Gamma 解码(sRGB -&gt; Linear)；然后在线性空间中完成光照计算；最终输出时再进行 Gamma 编码 (Linear -&gt; sRGB).</p></li></ul><h2 id="15-相交测试">15. 相交测试</h2><p>参考：<a href="https://www.wolai.com/e4qUfqmE2gaTaMmahe4odJ"> RTR 4th Chapter 22 Intersection Test Methods</a></p><h3 id="1-射线球体相交">(1) 射线球体相交</h3><ul><li>射线方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mo>+</mo><mi>t</mi><mo>⋅</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">r(t) = o + t \cdot d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>, 这里默认射线的方向向量 d 是单位向量。球体由一个中心点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">c</mi></mrow><annotation encoding="application/x-tex">\mathbf{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">c</span></span></span></span>和一个半径<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>来进行定义: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>p</mi><mo>−</mo><mi>c</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mi>r</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(p) = ||p - c|| - r = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣∣</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord">∣∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>. 其中点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">p</mi></mrow><annotation encoding="application/x-tex">\mathbf{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathbf">p</span></span></span></span>是球面表面上的任意一点。想要求解射线与球体之间的交点，只需要使用射线<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{r}(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>替换方程 22.5 中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">p</mi></mrow><annotation encoding="application/x-tex">\mathbf{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathbf">p</span></span></span></span>即可，即：</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi mathvariant="bold">r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∥</mi><mi mathvariant="bold">r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>−</mo><mi mathvariant="bold">c</mi><mi mathvariant="normal">∥</mi><mo>−</mo><mi>r</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(\mathbf{r}(t))=\|\mathbf{r}(t)-\mathbf{c}\|-r=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathbf">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathbf">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf">c</span><span class="mord">∥</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><ul><li>优化：<ul><li>首先判断射线的起点是否在球体内部，如果在则必定相交：计算一个向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">l</mi><mo>=</mo><mi mathvariant="bold">c</mi><mo>−</mo><mi mathvariant="bold">o</mi></mrow><annotation encoding="application/x-tex">\mathbf{l}=\mathbf{c}-\mathbf{o}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathbf">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">o</span></span></span></span>，它是从射线原点指向球体中心的向量。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>l</mi><mn>2</mn></msup><mo>=</mo><mi mathvariant="bold">l</mi><mo>⋅</mo><mi mathvariant="bold">l</mi></mrow><annotation encoding="application/x-tex">l^{2}=\mathbf{l} \cdot \mathbf{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">l</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">l</span></span></span></span>。如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>l</mi><mn>2</mn></msup><mo>&lt;</mo><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">l^2 &lt; r^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8532em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，那么意味着射线原点位于球体内部，这条射线肯定会击中球体。如果只想检测射线是否击中球体的话，此时就可以结束测试；</li><li>如果想获得精确的交点，那么可以继续进行计算。计算向量在光线方向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">d</mi></mrow><annotation encoding="application/x-tex">\mathbf{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">d</span></span></span></span>上的投影：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mi mathvariant="bold">l</mi><mo>⋅</mo><mi mathvariant="bold">d</mi></mrow><annotation encoding="application/x-tex">s=\mathbf{l} \cdot \mathbf{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">l</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathbf">d</span></span></span></span>。<ul><li>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">s&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，并且射线原点位于球体外部，那么则说明球体位于射线原点背后，射线和球体没有交点。</li><li>否则，使用勾股定理来计算从球心到投影点距离的平方：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mn>2</mn></msup><mo>=</mo><msup><mi>l</mi><mn>2</mn></msup><mo>−</mo><msup><mi>s</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">m^{2}=l^{2}-s^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>。这里进行第二个拒绝测试：如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mn>2</mn></msup><mo>&gt;</mo><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">m^2 &gt; r^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8532em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，那么射线一定会偏离球体，剩下的计算可以直接省略</li><li>如果球体与射线通过了最后的测试，想得到具体的交点坐标需要激素计算。首先计算距离的平方<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>q</mi><mn>2</mn></msup><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup><mo>−</mo><msup><mi>m</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">q^2 = r^2−m^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> (这个标量 r^2 可以只计算一次，然后存储在球体的数据结构中，从而进一步提高效率。在实践中，这种&quot;优化&quot;反而会变慢，因为需要访问更多的内存，这是影响算法性能的一个主要因素) 。由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mn>2</mn></msup><mo>≤</mo><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">m^2 \le r^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9501em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>q</mi><mn>2</mn></msup><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">q^2\ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，这意味着我们可以计算出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><msqrt><msup><mi>q</mi><mn>2</mn></msup></msqrt></mrow><annotation encoding="application/x-tex">q=\sqrt{q^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.2822em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.9178em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.28em" viewbox="0 0 400000 1296" preserveaspectratio="xMinYMin slice"><path d="M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2822em;"><span></span></span></span></span></span></span></span></span>。最后，到交点的距离为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>s</mi><mo>±</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">t = s±q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>。如果只对第一个正交点感兴趣，那么可以使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo>=</mo><mi>s</mi><mo>−</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">t_1 = s−q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>来表示射线原点在球外时的情况，使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub><mo>=</mo><mi>s</mi><mo>+</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">t_2 = s + q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>来表示射线原点在球内时的情况。通过将这个 t 值代入到射线方程中，便可以找到真正的交点。<br><img src="ray-sphere.png" alt="ray and sphere intersection"></li></ul></li><li>最终的伪代码<br><img src="ray-sphere-pseudocode.png" alt="ray and sphere intersection pseudocode"></li></ul></li></ul><h3 id="2-射线-box-相交">(2) 射线 Box 相交</h3><ul><li><p>射线和 AABB 相交可以用平板法，经过扩展后可以处理 OBB (Oriented Bounding Box)，可以返回距离最近的正 t 值（即从射线原点\mathbf{o}到交点的距离，如果存在的话）。</p></li><li><p>计算射线与属于 OBB 的所有平面的相交 t 值。OBB 会被认为是一个包含三个 slab 的集合，如下图左侧二维示意图。对于每个 slab，都有一个最小值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mi>i</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t^{min}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0833em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span>和一个最大值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>t</mi><mi>i</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">t^{max}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9231em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy="false">{</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo separator="true">,</mo><mi>w</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">i \in \{u, v, w\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">}</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>m</mi></msub><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">t_min</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">in</span></span></span></span> 可以理解为射线进入某个 slab 时的 t，而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>m</mi></msub><mi>a</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">t_max</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span></span></span></span> 可以理解为射线离开某个 slab 时的 t。取所有 slab 的 tmin 里最大的和所有 tmax 里最小的，也就是说最后一个进入 slab 的地方视为进入 box 的地方，最先离开 slab 的地方视为离开 box 的地方。</p><p>如下图，左侧展示了由两个平板构成的二维 OBB，右侧展示了两条射线，这两条射线与 OBB 相交。所有相交的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>值都被显示了出来，其中与绿色 slab 的交点下标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>，与橙色 slab 的交点下标为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>值的极值使用方框进行标记。左边的射线击中了这个 OBB，因为自<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>t</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msup><mo>&lt;</mo><msup><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msup></mrow><annotation encoding="application/x-tex">t^{min} &lt; t^{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8638em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span>；而右边的射线则没有击中这个 OBB，因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msup><mo>&lt;</mo><msup><mi>t</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">t^{max} &lt; t^{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7035em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span></span></span></span></span></span></span></span>。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>t</mi><mi>min</mi><mo>⁡</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>max</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msubsup><mi>t</mi><mi>u</mi><mi>min</mi><mo>⁡</mo></msubsup><mo separator="true">,</mo><msubsup><mi>t</mi><mi>v</mi><mi>min</mi><mo>⁡</mo></msubsup><mo separator="true">,</mo><msubsup><mi>t</mi><mi>w</mi><mi>min</mi><mo>⁡</mo></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>t</mi><mi>max</mi><mo>⁡</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>min</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msubsup><mi>t</mi><mi>u</mi><mi>max</mi><mo>⁡</mo></msubsup><mo separator="true">,</mo><msubsup><mi>t</mi><mi>v</mi><mi>max</mi><mo>⁡</mo></msubsup><mo separator="true">,</mo><msubsup><mi>t</mi><mi>w</mi><mi>max</mi><mo>⁡</mo></msubsup><mo fence="true">)</mo></mrow><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} t^{\min } &amp; =\max \left(t_{u}^{\min }, t_{v}^{\min }, t_{w}^{\min }\right),\\[1mm]t^{\max } &amp; =\min \left(t_{u}^{\max }, t_{v}^{\max }, t_{w}^{\max }\right) .\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.325em;vertical-align:-1.4125em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9125em;"><span style="top:-4.032em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8805em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">i</span><span class="mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.2475em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">a</span><span class="mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4125em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9125em;"><span style="top:-4.032em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8805em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">i</span><span class="mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8805em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">i</span><span class="mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8805em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">i</span><span class="mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span></span></span><span style="top:-2.2475em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">min</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">a</span><span class="mtight">x</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">a</span><span class="mtight">x</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">m</span><span class="mtight">a</span><span class="mtight">x</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4125em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><img src="ray-box.png" alt="ray and box intersection"></p></li><li><p>射线与 OBB 相交测试的伪代码。<br><img src="ray-box-pseudocode.png" alt="ray and box intersection pseudocode"></p><ul><li>对于 OBB A 而言，其中心点表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">c</mi></mrow><annotation encoding="application/x-tex">\mathbf{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">c</span></span></span></span> 即代码中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>c</mi></msup></mrow><annotation encoding="application/x-tex">a^c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span></span></span></span>；u、v 和 w 是这个 box 归一化的侧边方向；h_u、h_v 和 h_w 是正的半长距离（从中心到各个 box 面的距离）。</li><li>第 7 行检查了射线方向是否垂直于当前被测试 slab 的法线，即射线是否平行于 slab 平面。如果二者平行，则不可能相交。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span> 在这里代表一个很小的数字，约为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>10</mn><mrow><mo>−</mo><mn>20</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">20</span></span></span></span></span></span></span></span></span></span></span></span>，这是为了避免在除法时发生数值溢出。</li><li>第 8 行和第 9 行中包含了对 f 的除法，实际上，可以先计算一次 1/f，然后再使用这个值来进行相乘，这样做通常会更快，因为除法运算的开销通常会很大。</li><li>第 10 行确保了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中的最小值会存储在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中。</li><li>如果函数在第 13 行返回，则说明射线没有击中 box；类似地，如果在第 14 行返回，则说明 box 位于射线原点的后面。如果这条射线平行于待测 slab（因此无法与这个 slab 相交），则执行第 15 行，它会测试这条射线是否位于 slab 外面。如果射线位于 slab 外面，则代表射线不会击中 box，此时终止测试。</li><li>在第 15 行之后，还可以测试 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>t</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msup><mo>≥</mo><mi>l</mi></mrow><annotation encoding="application/x-tex">t^{min} \ge l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9606em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>，其中 l 是当前射线的长度。这样可以将射线视为一段线段，如果新的交点要大于目前已知的最近交点，则拒绝这个交点。这个测试可以推迟到整个射线与 OBB 测试完成之后再进行，但是在循环内部尝试早期拒绝，通常会更加高效。</li><li>对于 OBB 的特殊情况（即 AABB），还有一些其他优化。例如：第 5 行和第 6 行可以更改为 e = p_i 和 f = d_i，这样可以使得测试速度更快。通常在第 8 行和第 9 行中可以使用 AABB 的最小角<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="bold">a</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\mathbf{a}^{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathbf">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span></span></span></span></span></span></span></span>和最大角<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="bold">a</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\mathbf{a}^{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathbf">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span>，这样可以避免一些加法和减法。</li></ul></li></ul><h3 id="3-如何判断一个点在三角形矩形-扇形内">(3) 如何判断一个点在三角形(矩形、扇形)内</h3><p>判断点是否在三角形内</p><ul><li><p><strong>重心坐标法</strong> (Barycentric Coordinates)</p><ul><li>任意一个在三角形平面上的点 P 都可以由下面这个显式方程表示：</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo>=</mo><mi>α</mi><mi>A</mi><mo>+</mo><mi>β</mi><mi>B</mi><mo>+</mo><mi>γ</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">P = \alpha A + \beta B + \gamma C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">βB</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>+</mo><mi>β</mi><mo>+</mo><mi>γ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\alpha + \beta + \gamma = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>.</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo separator="true">,</mo><mi>β</mi><mo separator="true">,</mo><mi>γ</mi></mrow><annotation encoding="application/x-tex">\alpha, \beta, \gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span> 表示 点 P 相对于三个顶点的&quot;权重&quot;（和恒为一：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>+</mo><mi>β</mi><mo>+</mo><mi>γ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\alpha + \beta + \gamma = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>）。</p><ul><li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mi>β</mi><mo>=</mo><mi>γ</mi><mo>=</mo><mfrac><mn>1</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\alpha = \beta = \gamma = \frac{1}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 点 P 就是三角形的重心 (centroid)；</li><li>所有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>≥</mo><mn>0</mn><mo separator="true">,</mo><mi>β</mi><mo>≥</mo><mn>0</mn><mo separator="true">,</mo><mi>γ</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\alpha \geq 0, \beta \geq 0, \gamma \geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，则点在 三角形内部；</li><li>有一个为 0，则点在边上；</li><li>有两个为 0，则点在顶点上；</li><li>有负值，则点在三角形外部。</li></ul></li><li><p>重心坐标求解：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo>=</mo><mi>α</mi><mi>A</mi><mo>+</mo><mi>β</mi><mi>B</mi><mo>+</mo><mi>γ</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">P = \alpha A + \beta B + \gamma C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">βB</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>想象经过平移，以 A 为原点，可以改写为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo>−</mo><mi>A</mi><mo>=</mo><mi>β</mi><mo stretchy="false">(</mo><mi>B</mi><mo>−</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>γ</mi><mo stretchy="false">(</mo><mi>C</mi><mo>−</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P - A = \beta (B-A) + \gamma (C-A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span></span></p><p>即：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>v</mi><mn>2</mn></msub><mo>=</mo><mi>β</mi><msub><mi>v</mi><mn>0</mn></msub><mo>+</mo><mi>γ</mi><msub><mi>v</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">v_2 = \beta v_0 + \gamma v_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mo>=</mo><mi>B</mi><mo>−</mo><mi>A</mi><mo separator="true">,</mo><msub><mi>v</mi><mn>1</mn></msub><mo>=</mo><mi>C</mi><mo>−</mo><mi>A</mi><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo>=</mo><mi>P</mi><mo>−</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">v_0 = B-A, v_1 = C-A, v_2 = P-A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>。这样就把原问题转换为了一个 求向量线性组合系数的问题：即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">v_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 在以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">v_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为基底的局部坐标系中对应的坐标是多少？<br>通过 点积法 解线性系统，伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">d00 = dot(v0, v0)<br>d01 = dot(v0, v1)<br>d11 = dot(v1, v1)<br>d20 = dot(v2, v0)<br>d21 = dot(v2, v1)<br>denom = d00 * d11 - d01 * d01<br>beta  = (d11 * d20 - d01 * d21) / denom<br>gamma = (d00 * d21 - d01 * d20) / denom<br>alpha = <span class="hljs-number">1</span> - beta - gamma<br><span class="hljs-comment"># Finally check if alpha, beta, and gamma are all in the range of [0, 1].</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>向量叉乘法</strong></p><ul><li><p>原理：<br>对每条边 AB,BC,CA (注意顺序)，判断点 P 是否在边的&quot;内侧&quot;。</p></li><li><p>方法：</p><ul><li><p>a. 计算向量：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>B</mi><mo>=</mo><mi>B</mi><mo>−</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">AB = B - A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mi>C</mi><mo>=</mo><mi>C</mi><mo>−</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">BC = C - B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>A</mi><mo>=</mo><mi>A</mi><mo>−</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">CA = A - C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>P</mi><mo>=</mo><mi>P</mi><mo>−</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">AP = P - A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mi>P</mi><mo>=</mo><mi>P</mi><mo>−</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">BP = P - B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">BP</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>P</mi><mo>=</mo><mi>P</mi><mo>−</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">CP = P - C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></li></ul></li><li><p>b. 计算边与点向量的 2D 叉乘（或 3D z 分量）</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>z</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><mo>×</mo><mi>A</mi><mi>P</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">z_1 = (AB \times AP).z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>z</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>B</mi><mi>C</mi><mo>×</mo><mi>B</mi><mi>P</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">z_2 = (BC \times BP).z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">BP</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>z</mi><mn>3</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>C</mi><mi>A</mi><mo>×</mo><mi>C</mi><mi>P</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">z_3 = (CA \times CP).z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mclose">)</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span></p><p><strong>判断标准：</strong></p><ul><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>z</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>z</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">z_1, z_2, z_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 都是正的或都是负的，则点在三角形内</li><li>否则在外或边界上</li></ul></li></ul></li></ul></li></ul><p><strong>PS</strong>: 重心坐标法是 2D、3D 通用的，而向量叉乘法适用于适用于 2D 或 3D 共面三角形（虽然三角形的顶点在三维空间中，但这三个点都处于同一个平面上）。</p><h3 id="4-射线三角形相交如何判断一条光线是否与一个三角形相交">(4) 射线三角形相交/如何判断一条光线是否与一个三角形相交</h3><ul><li><p>第一种：先判断光线是否和三角形所在的面相交，再判断这个交点是否在三角形内，判断点是否在三角形内；</p></li><li><p>第二种：Moller Trumbore 算法，简称 MT 算法。光线方程 = 重心坐标表示的三角形内部点。求解得到 t，判定 t 是否合理，t &gt; 0，然后重心坐标都是非负的，就是有解，在三角形内。</p><p>任意一个三角形内的点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{f}(u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf" style="margin-right:0.10903em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>都可以由下面这个显式方程给出：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="bold">f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>u</mi><mo>−</mo><mi>v</mi><mo stretchy="false">)</mo><msub><mi mathvariant="bold">p</mi><mn>0</mn></msub><mo>+</mo><mi>u</mi><msub><mi mathvariant="bold">p</mi><mn>1</mn></msub><mo>+</mo><mi>v</mi><msub><mi mathvariant="bold">p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mathbf{f}(u, v)=(1-u-v) \mathbf{p}_{0}+u \mathbf{p}_{1}+v \mathbf{p}_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf" style="margin-right:0.10903em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>是重心坐标，它必须满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">u \geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">v \geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>+</mo><mi>v</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">u + v \leq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。这里的重心坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>可以用于纹理映射，以及法线插值或者颜色插值等操作。也就是说，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>代表了每个顶点对特定位置的贡献权重，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>u</mi><mo>−</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w =(1−u−v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>是第三个权重。这些坐标在其他的一些资料中通常被表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>。</p><p><img src="barycentric.png" alt="barycentric coordinates"></p><p>计算射线<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{r}(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>和三角形<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{f}(u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf" style="margin-right:0.10903em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>的交集，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="bold">f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{r}(t) = \mathbf{f}(u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf" style="margin-right:0.10903em;">f</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，结果为：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="bold">o</mi><mo>+</mo><mi>t</mi><mi mathvariant="bold">d</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>u</mi><mo>−</mo><mi>v</mi><mo stretchy="false">)</mo><msub><mi mathvariant="bold">p</mi><mn>0</mn></msub><mo>+</mo><mi>u</mi><msub><mi mathvariant="bold">p</mi><mn>1</mn></msub><mo>+</mo><mi>v</mi><msub><mi mathvariant="bold">p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mathbf{o}+t \mathbf{d}=(1-u-v) \mathbf{p}_{0}+u \mathbf{p}_{1}+v \mathbf{p}_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathbf">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">t</span><span class="mord mathbf">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>整理可得：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi mathvariant="bold">d</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi mathvariant="bold">p</mi><mn>1</mn></msub><mo>−</mo><msub><mi mathvariant="bold">p</mi><mn>0</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi mathvariant="bold">p</mi><mn>2</mn></msub><mo>−</mo><msub><mi mathvariant="bold">p</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>t</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>u</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>v</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mi mathvariant="bold">o</mi><mo>−</mo><msub><mi mathvariant="bold">p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\left(\begin{array}{ccc}-\mathbf{d} &amp; \mathbf{p}_{1}-\mathbf{p}_{0} &amp; \mathbf{p}_{2}-\mathbf{p}_{0}\end{array}\right)\left(\begin{array}{c}t \\ u \\ v\end{array}\right)=\mathbf{o}-\mathbf{p}_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathbf">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="3.600em" viewbox="0 0 875 3600"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">u</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="3.600em" viewbox="0 0 875 3600"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathbf">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>这意味着重心坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，以及从射线原点到交点的距离<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>，可以通过求解这个线性方程组得到。</p><p>如果记上式中的矩阵为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">M</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="left left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi mathvariant="bold">d</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi mathvariant="bold">p</mi><mn>1</mn></msub><mo>−</mo><msub><mi mathvariant="bold">p</mi><mn>0</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi mathvariant="bold">p</mi><mn>2</mn></msub><mo>−</mo><msub><mi mathvariant="bold">p</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{M}=\left(\begin{array}{lll}-\mathbf{d} &amp; \mathbf{p}_{1}-\mathbf{p}_{0} &amp; \mathbf{p}_{2}-\mathbf{p}_{0}\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathbf">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>，那么上式与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="bold">M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\mathbf{M}^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathbf">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>相乘即可获得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">(t,u,v)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>。</p><p>具体求解见 RTR 4th Chapter 22.8</p></li></ul><h3 id="5-射线多边形相交">(5) 射线多边形相交</h3><p>一个包含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个顶点的多边形，由一个有序的顶点列表<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi mathvariant="bold">v</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold">v</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi mathvariant="bold">v</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\mathbf{v}_0, \mathbf{v}_1, \cdots, \mathbf{v}_{n−1}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>定义，当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>i</mi><mo>&lt;</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \le i &lt; n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>的时候，顶点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\mathbf{v}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">v</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\mathbf{v}_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6528em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>形成一条边；这个多边形最终被从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">v</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\mathbf{v}_{n−1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6528em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\mathbf{v}_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的边所封闭。这个多边形所在的平面可以表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>π</mi><mi>p</mi></msub><mo>:</mo><msub><mi mathvariant="bold">n</mi><mi>p</mi></msub><mo>⋅</mo><mi mathvariant="bold">x</mi><mo>+</mo><msub><mi>d</mi><mi>p</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\pi_{p}: \mathbf{n}_{p} \cdot \mathbf{x}+d_{p}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7306em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathbf">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>。其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">n</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">\mathbf{n}_{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7305em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>是平面的法向量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 平面上任一点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">d_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 则是一个常数。所有满足该条件的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>，都处于这个平面上。</p><p>首先计算射线和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>π</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">\pi_{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>之间的交点，即用射线方程替换上式中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">x</span></span></span></span>。这个方程的解如下：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="bold">n</mi><mi>p</mi></msub><mo>⋅</mo><mo stretchy="false">(</mo><mi mathvariant="bold">o</mi><mo>+</mo><mi>t</mi><mi mathvariant="bold">d</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>d</mi><mi>p</mi></msub><mo>=</mo><mn>0</mn><mspace width="1em"><mo>⟺</mo><mspace width="1em"><mi>t</mi><mo>=</mo><mfrac><mrow><mo>−</mo><msub><mi>d</mi><mi>p</mi></msub><mo>−</mo><msub><mi mathvariant="bold">n</mi><mi>p</mi></msub><mo>⋅</mo><mi mathvariant="bold">o</mi></mrow><mrow><msub><mi mathvariant="bold">n</mi><mi>p</mi></msub><mo>⋅</mo><mi mathvariant="bold">d</mi></mrow></mfrac></mspace></mspace></mrow><annotation encoding="application/x-tex">\mathbf{n}_{p} \cdot(\mathbf{o}+t \mathbf{d})+d_{p}=0 \quad \Longleftrightarrow \quad t=\frac{-d_{p}-\mathbf{n}_{p} \cdot \mathbf{o}}{\mathbf{n}_{p} \cdot \mathbf{d}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7306em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathbf">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathbf">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6684em;vertical-align:-0.024em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3435em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathbf">d</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathbf">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>如果判别式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">∣</mo><msub><mi mathvariant="bold">n</mi><mi>p</mi></msub><mo>⋅</mo><mi mathvariant="bold">d</mi><mo fence="true">∣</mo></mrow><mo>&lt;</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\left|\mathbf{n}_{p} \cdot \mathbf{d}\right|&lt;\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathbf">d</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>成立（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>是一个极小的数，可以取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>10</mn><mrow><mo>−</mo><mn>20</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{−20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">20</span></span></span></span></span></span></span></span></span></span></span></span>或者更小的值，其目的是避免在进行除法运算时发生数值溢出），则我们可以认为射线与多边形平行，不存在交点。这里忽略射线位于多边形平面内的情况。</p><p>如果通过了判别式（射线和平面有交点），就可以把上式中求得的 t 代入射线方程中计算射线与多边形平面的交点：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">p</mi></mrow><annotation encoding="application/x-tex">\mathbf{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathbf">p</span></span></span></span>： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">p</mi><mo>=</mo><mi mathvariant="bold">o</mi><mo>+</mo><mi>t</mi><mi mathvariant="bold">d</mi></mrow><annotation encoding="application/x-tex">\mathbf{p}=\mathbf{o}+t \mathbf{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathbf">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathbf">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">t</span><span class="mord mathbf">d</span></span></span></span></p><p>然后，判断交点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">p</mi></mrow><annotation encoding="application/x-tex">\mathbf{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathbf">p</span></span></span></span>是否位于多边形内部的问题，会由三维问题简化为一个二维问题。这是通过将多边形的所有顶点以及交点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">p</mi></mrow><annotation encoding="application/x-tex">\mathbf{p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathbf">p</span></span></span></span>，投影到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mi>y</mi><mo>−</mo></mrow><annotation encoding="application/x-tex">xy-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">−</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mi>z</mi><mo>−</mo></mrow><annotation encoding="application/x-tex">xz-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">−</span></span></span></span>或者<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mi>z</mi><mo>−</mo></mrow><annotation encoding="application/x-tex">yz-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">yz</span><span class="mord">−</span></span></span></span>的其中一个平面上来实现的，具体要投影在哪个平面上，需要 <strong>使得投影后的多边形面积最大</strong>。也就是说，可以忽略绝对值最大的坐标分量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>max</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mrow><mo fence="true">∣</mo><msub><mi>n</mi><mrow><mi>p</mi><mo separator="true">,</mo><mi>x</mi></mrow></msub><mo fence="true">∣</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">∣</mo><msub><mi>n</mi><mrow><mi>p</mi><mo separator="true">,</mo><mi>y</mi></mrow></msub><mo fence="true">∣</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">∣</mo><msub><mi>n</mi><mrow><mi>p</mi><mo separator="true">,</mo><mi>z</mi></mrow></msub><mo fence="true">∣</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\max \left(\left|n_{p, x}\right|,\left|n_{p, y}\right|,\left|n_{p, z}\right|\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>，并将其他分量保留为二维坐标。例如：给定一个法线<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0.6</mn><mtext>，</mtext><mo>−</mo><mn>0.692</mn><mo separator="true">,</mo><mn>0.4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0.6，- 0.692,0.4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.6</span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.692</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0.4</span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>分量的绝对值最大，因此所有的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>坐标都会被忽略。这里选择最大的那个绝对值，是为了避免投影到一个可能产生退化三角形（零面积）的平面上。请注意，这个分量信息可以进行预先计算，并存储在多边形中以提高效率。在这个投影过程中，多边形和交点的拓扑结构是不变的。<br><img src="ray-polygon.png" alt="ray and polygon intersection"></p><p>然后使用交叉点测试判断射线与平面的交点是否在二维多边形内。交叉点测试是说，如果从某个点出发，沿平面<strong>任意方向</strong>（通常向右）的射线会穿过<strong>奇数条</strong>的多边形边界，那么这个点位于多边形<strong>内部</strong>。</p><p>交叉点测试支持：</p><ul><li>凸多边形</li><li>凹多边形</li><li>任意顺序的顶点列表（有序闭合）<br>不支持：</li><li>自交多边形，即多边形的边与边之间发生了交叉，图形不是简单封闭的。</li><li>点恰好落在边上（需要特殊处理）</li></ul><h3 id="6-如何判断两个三角形是否相交">(6) 如何判断两个三角形是否相交</h3><ul><li><p>三维空间中的通用方法（3D）：<strong>分离轴定理</strong>（Separating Axis Theorem，SAT）</p><ul><li>如果能找到一条轴，使得把两个图形&quot;投影到这条轴上&quot;之后，它们的投影范围是分开的，那么这两个图形在空间中就没有接触或重叠。这条轴称为分离轴。</li><li>如果两个凸多边形（如三角形）在所有可能的分离轴上投影都发生重叠，则它们相交；</li><li>如果存在一个轴，使得两个三角形在该轴上投影没有重叠，则它们不相交。</li><li>适用于 3D 中任意方向三角形</li><li>实际步骤：<ul><li>列出所有可能的分离轴（三维中最多 11 个）：<br>三角形 A 的 3 个边的法线方向<br>三角形 B 的 3 个边的法线方向<br>所有 A 边 × B 边 的叉积方向（最多 9 个）（二维的话没有这一组）</li><li>将两个三角形分别投影到每个轴上，比较投影区间是否重叠<ul><li>存在不重叠的情况，则两个三角形不相交</li><li>所有都重叠，两个三角形相交</li></ul></li></ul></li></ul></li><li><p>面片与面片相交（平面 + 边界）（比 SAT 更快）</p><ul><li>判断两个三角形是否共面</li><li>若共面，转换为 2D 问题（见下一种方法）</li><li>若不共面，检查 A 的三个点是否在 B 的平面两侧</li><li>若不在两侧，则不可能相交</li><li>若在两侧，则求两个平面交线</li><li>计算交线与每个三角形的交点 并 检查交段是否重合（如果这两个三角形相交，那么它们在 L 上的交点也会重叠。否则，这两个三角形就没有交集）<br><img src="tri-tri.png" alt="triangle and triangle intersection"></li></ul></li><li><p>共面情况：转化为 2D 三角形相交判断 (边相交 或 点包含)</p><ul><li>三角形边与边相交 + 点包含</li><li>逐边判断：三角形 A 的每条边是否和三角形 B 的任意边相交？</li><li>两线段是否相交？（2D 线段相交检测）</li><li>点包含：若没有边相交，则判断：</li><li>A 的某一个点是否在 B 内 或 B 的某一个点是否在 A 内</li><li>用重心坐标法或交叉点法判断点在三角形内</li></ul></li></ul><h3 id="7-线线相交">(7) 线/线相交</h3><ul><li><p>二维线段</p><ul><li>计算点在对方线段两端的方向关系<ul><li>判断：C  在  AB  的哪侧、D  在  AB  的哪侧</li><li>判断：A  在  CD  的哪侧、B  在  CD  的哪侧</li></ul></li><li>使用<strong>向量叉乘</strong>判断&quot;是否异侧&quot;：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = (B - A) × (C - A)<br>d2 = (B - A) × (D - A)<br>d3 = (D - C) × (A - C)<br>d4 = (D - C) × (B - C)<br></code></pre></td></tr></table></figure><ul><li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mn>1</mn><mo>⋅</mo><mi>d</mi><mn>2</mn><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d1 \cdot d2 &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mn>3</mn><mo>⋅</mo><mi>d</mi><mn>4</mn><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d3 \cdot d4 &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 则两线段相交。</li><li>如果某些叉乘为 0，也即在线段上（共线或端点重合），则需要额外判断是否重叠</li></ul></li></ul></li><li><p>二维直线/三维直线</p><ul><li>参数法把直线写作光线方程，令二者相等来求解</li><li>具体见 RTR 4th</li></ul></li></ul><h3 id="8-多边形相交如何判定两个不规则多边形发生碰撞">(8) 多边形相交/如何判定两个不规则多边形发生碰撞</h3><p><strong>分离轴定理</strong>（Separating Axis Theorem，SAT）</p><ul><li>如果能找到一条轴，使得把两个图形&quot;投影到这条轴上&quot;之后，它们的投影范围是分开的，那么这两个图形在空间中就没有接触或重叠。这条轴称为分离轴。</li><li>如果两个凸多边形（如三角形）在所有可能的分离轴上投影都发生重叠，则它们相交；</li><li>如果存在一个轴，使得两个三角形在该轴上投影没有重叠，则它们不相交。</li></ul><h2 id="16-view-矩阵-和-projection-矩阵的推导">16. view 矩阵 和 projection 矩阵的推导</h2><p>view 矩阵推导见：<a href="/2025/04/03/view-mat/"> view 矩阵推导</a><br>projection 矩阵推导见：<a href="https://zhuanlan.zhihu.com/p/122411512"> 推导透视矩阵</a>; <a href="https://www.zhyingkun.com/perspective/perspective/"> 深入理解透视矩阵</a></p><p>无论是正交投影还是透视投影矩阵，都是通过裁剪操作移除那些不在视锥体内的部分，只保留可见的部分。两者都将视锥体（只不过正交投影假设视锥体是一个长方体，而透视投影假设视锥体是一个平头锥）映射到一个标准化的立方体 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">[−1,1]^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 范围内。这种标准化确保了所有在视锥体内的点都被统一处理，便于后续的裁剪和光栅化。</p><h2 id="17-多线程下-opengl-的-share_context-的哪些类型可以正常读写vbo-fbo-vao-programe">17. 多线程下 opengl 的 share_context 的哪些类型可以正常读写（vbo fbo vao programe）</h2><h2 id="18-如何判断一个多边形是否是凸多边形">18. 如何判断一个多边形是否是凸多边形</h2><ul><li>检查所有内角是否都小于 180 度。</li><li>检查所有边的法向量方向是否一致。<ul><li>对于多边形的每条边，计算其法向量。</li><li>计算相邻边法向量的叉积。</li><li>如果所有叉积的符号一致，则多边形是凸的；否则是凹的。</li></ul></li><li>检查所有顶点是否都在其他边的一侧。</li></ul><h2 id="19-欧拉角-矩阵-四元数表示旋转的区别和优缺点">19. 欧拉角、矩阵、四元数表示旋转的区别和优缺点</h2><p>参考：《游戏引擎架构》P164</p><p>（1）欧拉角：定义了绕着三个坐标轴的旋转角，来确定刚体的旋转位置的方式，包括俯仰角 pitch，偏航角 yaw 和滚动角 roll；它的优点是比较直观，而且单个维度上的角度也比较容易插值；缺点是它不能进行任意方向的插值，而且会导致万向节死锁的问题，旋转的次序对结果也有影响</p><p>（2）矩阵：优点是不受万向节死锁的影响，可以独一无二的表达任意旋转，并且可以通过矩阵乘法来对点或矢量进行旋转变换；现在多数 CPU 以及所有 GPU 都有内置的硬件加速点积和矩阵乘法；缺点是不太直观，而且需要比较大的存储空间，也不太容易进行插值计算。</p><p>（3）四元数：四元数的好处是能够串接旋转；能把旋转直接作用于点或者矢量；而且能够进行旋转插值；另外它所占用的存储空间也比矩阵小；四元数可以解决万向节死锁的问题。</p><h2 id="20-切线空间法线-切线-副切线-法线贴图">20. 切线空间（法线、切线、副切线）/ 法线贴图</h2><h3 id="1-切线空间">(1) 切线空间</h3><ul><li>切线空间 (Tangent Space) 是指以每个表面点为中心建立的一个局部坐标系，通常由三个正交单位向量组成：<ul><li>法线向量 (Normal, N)：指向<strong>垂直于表面的方向</strong></li><li>切线向量 (Tangent, T)：沿着表面 UV 坐标的 U 方向</li><li>副切线 (Binormal/Bitangent, B)：沿着表面 UV 坐标的 V 方向</li><li>通常通过叉乘计算：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><mi>N</mi><mo>×</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">B = N \times T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></li></ul></li><li>在法线贴图中，纹理中的法线是切线空间法线，渲染时必须将其变换到<strong>世界空间或观察空间</strong>，与光源方向、视线方向进行正确的光照运算。</li><li>Tangent Space 转换时通常会构造：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>B</mi><mi>N</mi><mo>=</mo><mo stretchy="false">[</mo><mi>T</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">TBN = [T,B,N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">TBN</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span>，用于将 Tangent Space 法线 转换到 世界空间法线 公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mrow><mi>w</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>d</mi></mrow></msub><mo>=</mo><mi>T</mi><mi>B</mi><mi>N</mi><mo>×</mo><msub><mi>N</mi><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">N_{world} = TBN \times N_{tangent}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">TBN</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">an</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></li><li>优势：<br>  - <strong>可重用性</strong>与纹理空间绑定：切线空间法线贴图是与模型 UV 坐标绑定的，只需要一张法线贴图，就可以在<strong>不同位置、不同旋转、不同缩放下复用</strong>，与模型变换无关。如果你存储世界空间法线贴图：模型一旦旋转、移动，法线方向就不正确了，每次变换都要重新生成法线贴图，不现实。<br>  - 节省存储：切线空间法线贴图的法线始终在 局部切线空间，可以紧凑<strong>存储为 RGB 纹理</strong> (3 个分量)，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>R</mi><mo separator="true">,</mo><mi>G</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(R,G,B) = (x,y,z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>。z 分量通常可以通过 x、y 推导，存为 2 通道节省空间。而世界空间法线贴图需要额外存储变换信息，且无法复用，存储成本更高<br>  - <strong>适应动态变形模型</strong>：比如 骨骼动画、顶点动画、形变网格。切线空间法线贴图可以随着模型变形自动适应，因为法线贴图信息是 相对于表面 UV 坐标系 的，不需要重新生成法线贴图</li></ul><h3 id="2-法线贴图">(2) 法线贴图</h3><ul><li><p><strong>法线贴图是怎么存储的？</strong></p><p>法线贴图存储的是表面法线向量的信息，这些信息被编码到一张纹理的颜色通道中。法线向量指示了在每个纹素位置上表面的朝向。</p><ul><li>切线空间存储：法线贴图通常存储的是切线空间下的法线方向向量。切线空间是一个局部坐标系，定义在模型的每个表面点上，由法线（Normal）、切线（Tangent）和副切线（Bitangent）三个相互正交的基向量构成。法线贴图中的 RGB 通道，<strong>R 通道对应切线方向分量（T），G 通道对应副切线方向分量（B），B 通道对应法线方向（垂直于表面方向）分量（N）</strong>。因此，一个未经扰动的平面的法线在切线空间中会是 <code>(0, 0, 1)</code>。</li><li>数据编码与解码：由于贴图通道的值范围为 <code>[0,1]</code>，而法线向量的分量范围为 <code>[-1,1]</code>，因此需要对法线向量进行编码和解码。编码时，将法线向量的每个分量映射到 <code>[0,1]</code> 范围内，通常使用公式：<code>tex_channel_value = (normal_component_value + 1.0) / 2.0</code>。在着色器中从纹理采样后，需要进行逆向映射以还原法线分量，将存储值转换回 <code>[-1,1]</code> 范围，使用公式：<code>normal_component_value = tex_channel_value * 2.0 - 1.0</code>。</li><li>经常见到的法线贴图之所以是蓝色的，是因为法线贴图中任意一点的颜色通道的 b（rgb 的 b）值都大于 0.5（在切线空间中，通常假设法线总是指向表面的“外侧”，即 N 分量总是正的）。</li></ul></li><li><p><strong>Z 分量重构 (可选，但常见优化)</strong>：</p><ul><li><strong>如果法线向量是单位向量</strong>（长度为 1，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>N</mi><mi>x</mi><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>N</mi><mi>y</mi><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>N</mi><mi>z</mi><mn>2</mn></msubsup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N_x^2 + N_y^2 + N_z^2 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1972em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>），那么 Z 分量可以通过 X 和 Y 分量计算出来：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>z</mi></msub><mo>=</mo><msqrt><mrow><mn>1.0</mn><mo>−</mo><msubsup><mi>N</mi><mi>x</mi><mn>2</mn></msubsup><mo>−</mo><msubsup><mi>N</mi><mi>y</mi><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding="application/x-tex">N_z = \sqrt{1.0 - N_x^2 - N_y^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.6765em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1635em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">1.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.453em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.453em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.1235em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.88em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6765em;"><span></span></span></span></span></span></span></span></span>。</li><li>这种方法允许我们只在纹理中存储 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">N_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">N_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>（例如，存储在 R 和 G 通道中），从而节省纹理空间和带宽。<strong>B 通道可以留空或用于存储其他数据（如金属度、粗糙度等）</strong>。</li><li><strong>重要假设</strong>：在切线空间中，通常假设法线总是指向表面的“外侧”，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">N_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 分量总是正的。如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">N_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 可能为负（非常罕见，通常表示法线指向物体内部），则简单的平方根重构会出问题。</li><li>在着色器中重构 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">N_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 时，通常会使用 <code>sqrt(max(0.0, 1.0 - Nx*Nx - Ny*Ny))</code> 或 <code>sqrt(saturate(1.0 - Nx*Nx - Ny*Ny))</code> 来避免由于精度问题导致根号内出现负值。</li><li>这种只存储两个分量的法线贴图常被称为 “XY Normal Map” 或 “RG Normal Map”。</li></ul></li><li><p><strong>纹理格式</strong>：</p><ul><li><strong>未压缩格式</strong>：如 <code>RGB8</code> (每个通道 8 位，共 24 位) 或 <code>RGBA8</code> (每个通道 8 位，共 32 位)。简单直观，但文件较大。</li><li><strong>压缩纹理格式</strong>：为了减少显存占用和带宽消耗，通常会使用压缩格式。有损压缩格式（如 BCn）可能会引入微小的误差，导致法线方向发生偏移，从而在光照下产生可见的瑕疵，如块状感或不平整。BC5 对于 XY 法线通常表现良好。要仔细评估压缩质量和性能的平衡。<ul><li><strong>BC5 / ATI2 (3Dc+)</strong>：这是存储双通道数据（如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>N</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">N_x, N_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>）的理想高质量压缩格式。它为每个通道提供类似 DXT5 alpha 通道的压缩质量。Z 分量后续在 shader 中重构。</li><li><strong>BC7</strong>：一种更现代、质量更高、更灵活的压缩格式，可以高质量地压缩 RGB 或 RGBA 数据。如果需要存储全部三个法线分量 (XYZ) 并进行压缩，BC7 是一个好选择。也可以用它来高质量压缩 XY 通道。</li><li><strong>BC1 / DXT1</strong>: 也可以存储 RGB 数据，但通常精度较低（5:6:5 位），且可能产生块状瑕疵，对于平滑的法线贴图效果不是特别理想，除非内存非常紧张。</li><li>移动平台还有 ASTC、ETC2 等压缩格式。</li></ul></li></ul></li><li><p>法线贴图存储的是方向向量数据，而不是直接供人眼观察的颜色。因此，它们应该被当作<strong>线性数据</strong>处理。<strong>绝对不能对法线贴图进行 sRGB (gamma) 校正/转换</strong>。如果在加载纹理或采样时，系统错误地将法线贴图作为 sRGB 纹理处理并应用了 gamma 解码（或在保存时错误应用了 gamma 编码），法线数据会被破坏，导致光照计算错误。确保纹理加载器和采样器设置正确，将法线贴图视为线性格式（例如，在支持的 API 中，使用如 <code>R8G8B8_UNORM</code> 而非 <code>R8G8B8_SRGB</code> 这样的格式，或者确保在纹理导入设置中关闭 sRGB 选项）。</p></li></ul><h2 id="21-vulkan-renderpass-subpass-理解-透明物体放同一个-renderpass-还是不同">21. vulkan renderpass subpass 理解 透明物体放同一个 renderpass 还是不同</h2><h2 id="22-vulkan-memorybarrir">22. vulkan memorybarrir</h2><h2 id="23-vulkan-的-shader-buffer-类型-如何区分频繁更新和偶尔更新">23. vulkan 的 shader buffer 类型 如何区分频繁更新和偶尔更新</h2><h2 id="24-什么是齐次坐标齐次坐标有什么作用">24. 什么是齐次坐标，齐次坐标有什么作用</h2><ul><li>统一表示仿射变换：在欧几里得空间，<strong>平移不能用矩阵乘法表示</strong>，必须用加法。而在齐次坐标空间，所有 平移、旋转、缩放、投影都可以用 4×4 矩阵乘法统一表达，大大简化了图形变换的计算和管线设计。</li></ul><h2 id="25-high-dynamic-range-hdr">25. High Dynamic Range (HDR)</h2><p>参考：<a href="https://learnopengl-cn.github.io/05%20Advanced%20Lighting/06%20HDR/">https://learnopengl-cn.github.io/05 Advanced Lighting/06 HDR/</a></p><ul><li>HDR（高动态范围） 是一种图像表示技术，允许每个像素保存<strong>远超普通图像（LDR）亮度范围</strong>(一般来说，当存储在帧缓冲(Framebuffer)中时，亮度和颜色的值是默认被限制在 0.0 到 1.0 之间的)的信息(LDR 明亮区域容易过曝，暗部死黑)，常用于图形学中真实表现亮度、对比度、反射等效果(保留强光/暗影细节，真实光照)。</li><li>为什么需要 HDR？<ul><li>因为现实世界的亮度范围差距巨大（阳光、室内灯光、阴影）</li></ul></li><li>HDR 渲染：允许用更大范围的颜色值渲染从而获取大范围的黑暗与明亮的场景细节，最后将所有 HDR 值转换成在[0.0, 1.0]范围的 LDR(Low Dynamic Range,低动态范围)（显示器只能显示在 0.0 到 1.0 范围之内的颜色）。转换 HDR 值到 LDR 值得过程叫做色调映射(Tone Mapping)，这些色调映射算法经常会包含一个选择性倾向黑暗或者明亮区域的参数。</li><li>使用浮点帧缓冲(Floating Point Framebuffer)作为颜色缓存，可以存储超过 0.0 到 1.0 范围的浮点值。OpenGL 中默认的帧缓冲默认一个颜色分量只占用 8 位(bits)，而浮点帧缓冲可以存储 16-bit / 32-bit 。</li><li>色调映射算法<ul><li>Reinhard 色调映射：分散整个 HDR 颜色值到 LDR 颜色值上，所有的值都有对应。Reinhard 色调映射算法平均地将所有亮度值分散到 LDR 上。这个算法是倾向明亮的区域的，暗的区域会不那么精细也不那么有区分度。</li></ul><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// Reinhard色调映射</span><br><span class="hljs-type">vec3</span> mapped = hdrColor / (hdrColor + <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>));<br></code></pre></td></tr></table></figure><ul><li>曝光参数（Exposure）：如果有一个场景要展现日夜交替，我们当然会在白天使用低曝光，在夜间使用高曝光，就像人眼调节方式一样。</li></ul><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// 简单的曝光色调映射</span><br><span class="hljs-type">vec3</span> mapped = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>) - <span class="hljs-built_in">exp</span>(-hdrColor * exposure);<br></code></pre></td></tr></table></figure></li></ul><h2 id="26-image-based-lighting-ibl-原理">26. Image-Based Lighting (IBL) 原理</h2><p>参考：<br><a href="https://learnopengl-cn.github.io/07%20PBR/03%20IBL/01%20Diffuse%20irradiance/">https://learnopengl-cn.github.io/07 PBR/03 IBL/01 Diffuse irradiance/</a><br><a href="https://learnopengl-cn.github.io/07%20PBR/03%20IBL/02%20Specular%20IBL/">https://learnopengl-cn.github.io/07 PBR/03 IBL/02 Specular IBL/</a></p><ul><li><p>使用 <strong>真实环境贴图（HDR 环境贴图）作为光照源</strong>，用于模拟来自场景四周的全局间接光照和真实反射环境。IBL 通常使用（取自现实世界或从 3D 场景生成的）环境立方体贴图 (Cubemap) ，我们可以将立方体贴图的每个像素视为光源。</p></li><li><p>IBL 本质是 间接光照技术，仍需额外添加 直接光源（如太阳）。</p></li><li><p>IBL 对 PBR 很有意义。将 IBL 引入 PBR 系统就要考虑如何计算渲染方程。如下所示 Cook-Torrance BRDF 反射率方程，给定任何方向向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，我们需要获取这个方向上场景的辐射度。可以将立方体贴图的每个纹素视为一个光源，使用一个方向向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 对此立方体贴图进行采样。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∫</mo><mi mathvariant="normal">Ω</mi></munder><mo stretchy="false">(</mo><msub><mi>k</mi><mi>d</mi></msub><mfrac><mi>c</mi><mi>π</mi></mfrac><mo>+</mo><msub><mi>k</mi><mi>s</mi></msub><mfrac><mrow><mi>D</mi><mi>F</mi><mi>G</mi></mrow><mrow><mn>4</mn><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>o</mi></msub><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p,\omega_o) = \int\limits_{\Omega}        (k_d\frac{c}{\pi} + k_s\frac{DFG}{4(\omega_o \cdot n)(\omega_i \cdot n)})        L_i(p,\omega_i) n \cdot \omega_i  d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9666em;vertical-align:-1.6055em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3611em;"><span style="top:-1.8545em;margin-left:-0.4445em;"><span class="pstrut" style="height:3.36em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.3611em;"><span class="pstrut" style="height:3.36em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6055em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2963em;vertical-align:-0.936em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">FG</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>为了以更有效的方式解决积分，我们需要对其大部分结果进行预计算。这里可以看到 BRDF 的漫反射 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">k_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和镜面 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">k_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 项是相互独立的，因此可以将积分分成两部分分开研究：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∫</mo><mi mathvariant="normal">Ω</mi></munder><mo stretchy="false">(</mo><msub><mi>k</mi><mi>d</mi></msub><mfrac><mi>c</mi><mi>π</mi></mfrac><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub><mo>+</mo><munder><mo>∫</mo><mi mathvariant="normal">Ω</mi></munder><mo stretchy="false">(</mo><msub><mi>k</mi><mi>s</mi></msub><mfrac><mrow><mi>D</mi><mi>F</mi><mi>G</mi></mrow><mrow><mn>4</mn><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>o</mi></msub><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p,\omega_o) =      \int\limits_{\Omega} (k_d\frac{c}{\pi}) L_i(p,\omega_i) n \cdot \omega_i  d\omega_i      +      \int\limits_{\Omega} (k_s\frac{DFG}{4(\omega_o \cdot n)(\omega_i \cdot n)})          L_i(p,\omega_i) n \cdot \omega_i  d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9666em;vertical-align:-1.6055em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3611em;"><span style="top:-1.8545em;margin-left:-0.4445em;"><span class="pstrut" style="height:3.36em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.3611em;"><span class="pstrut" style="height:3.36em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6055em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.9666em;vertical-align:-1.6055em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3611em;"><span style="top:-1.8545em;margin-left:-0.4445em;"><span class="pstrut" style="height:3.36em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.3611em;"><span class="pstrut" style="height:3.36em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6055em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">FG</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>两个主要贡献：</p><ul><li><p>环境漫反射（Diffuse IBL）：</p><ul><li>模拟环境光照在表面发生散射（如粗糙表面）</li><li>通常通过 Irradiance Map（辐照度图） 实现：在每个采样方向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 上存储其积分结果（每个纹素中存储了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>方向的卷积结果），可以理解为场景中所有能够击中面向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的表面的间接漫反射光的预计算总和。</li><li>低动态范围(Low Dynamic Range, LDR)储存环境贴图：直接使用各个面的图像的颜色值（0.0 和 1.0 之间）。这样虽然可能适合视觉输出，但作为物理输入参数没有用处。PBR 的大部分输入基于实际物理属性和测量，因此为入射光值找到其物理等效值是很重要的。</li><li>HDR 文件格式（.hdr）:存储一张完整的立方体贴图，所有六个面数据都是浮点数，允许指定 0.0 到 1.0 范围之外的颜色值，以使光线具有正确的颜色强度。这个文件格式并非直接存储每个通道的 32 位数据，而是每个通道存储 8 位，再以 alpha 通道存放指数——虽然确实会导致精度损失，但是非常有效率。不同于立方体贴图，将环境信息存储到一张等距柱状投影图(Equirectangular Map) 中（从球体投影到平面上），使水平视角附近分辨率较高，而底部和顶部方向分辨率较低，在大多数情况下是不错的折衷方案，因为大部分有意义的光照和环境信息都在水平视角附近方向。对等距柱状投影采样比对立方体贴图采样效率低，可以先把等距柱状投影映射到一个立方体上。</li><li>stb_image.h 支持将辐射度 HDR 图像直接加载为一个浮点数数组。</li></ul></li><li><p>环境镜面反射（Specular IBL）</p><ul><li><p>模拟表面对环境的镜面反射（如金属、高光）。</p></li><li><p>真实世界中，一个表面的反射光来自于：环境中多个方向的入射光、材质本身的 BRDF、观察方向。如果用直接采样的方法去做每个方向的积分会很慢（光照积分太复杂）。</p></li><li><p>分割求和近似(split sum approximation)将方程的镜面部分分割成两个独立的部分，单独求卷积，然后在 PBR 着色器中求和。即把镜面反射部分：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∫</mo><mi mathvariant="normal">Ω</mi></munder><msub><mi>k</mi><mi>s</mi></msub><mfrac><mrow><mi>D</mi><mi>F</mi><mi>G</mi></mrow><mrow><mn>4</mn><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>o</mi></msub><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub><mo>=</mo><munder><mo>∫</mo><mi mathvariant="normal">Ω</mi></munder><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p,\omega_o) =    \int\limits_{\Omega} k_s\frac{DFG}{4(\omega_o \cdot n)(\omega_i \cdot n)}        L_i(p,\omega_i) n \cdot \omega_i  d\omega_i        =    \int\limits_{\Omega} f_r(p, \omega_i, \omega_o) L_i(p,\omega_i) n \cdot \omega_i  d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9666em;vertical-align:-1.6055em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3611em;"><span style="top:-1.8545em;margin-left:-0.4445em;"><span class="pstrut" style="height:3.36em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.3611em;"><span class="pstrut" style="height:3.36em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6055em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">FG</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9666em;vertical-align:-1.6055em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3611em;"><span style="top:-1.8545em;margin-left:-0.4445em;"><span class="pstrut" style="height:3.36em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.3611em;"><span class="pstrut" style="height:3.36em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6055em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>拆分成：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∫</mo><mi mathvariant="normal">Ω</mi></munder><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub><mo>∗</mo><munder><mo>∫</mo><mi mathvariant="normal">Ω</mi></munder><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p,\omega_o) =  \int\limits_{\Omega} L_i(p,\omega_i) d\omega_i  *  \int\limits_{\Omega} f_r(p, \omega_i, \omega_o) n \cdot \omega_i d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9666em;vertical-align:-1.6055em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3611em;"><span style="top:-1.8545em;margin-left:-0.4445em;"><span class="pstrut" style="height:3.36em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.3611em;"><span class="pstrut" style="height:3.36em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6055em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.9666em;vertical-align:-1.6055em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3611em;"><span style="top:-1.8545em;margin-left:-0.4445em;"><span class="pstrut" style="height:3.36em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.3611em;"><span class="pstrut" style="height:3.36em;"></span><span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6055em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<strong>卷积的第一部分被称为预滤波环境贴图</strong>。它类似于辐照度图，是预先计算的环境卷积贴图，但这次考虑了粗糙度。对这张环境贴图进行 多级模糊，模拟不同粗糙度下的反射效果。因为随着粗糙度的增加，参与环境贴图卷积的采样向量会更分散，导致反射更模糊，所以对于卷积的每个粗糙度级别，我们将按顺序把模糊后的结果存储在预滤波贴图的 mipmap 中，每一 mip level 表示一个粗糙度级别。使用 Cook-Torrance BRDF 的法线分布函数生成采样向量及其散射强度，该函数将法线和视角方向作为输入。由于在卷积环境贴图时事先不知道视角方向，因此 Epic Games 假设视角方向（即镜面反射方向）总是等于输出采样方向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，以作进一步近似。</p><p><strong>卷积的第二部分等于镜面反射积分的 BRDF 部分</strong>。如果我们假设每个方向的入射辐射度都是白色的（即 L(p,x)=1.0），就可以在给定粗糙度、光线 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、法线 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>、夹角 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n \cdot \omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的情况下，预计算 BRDF 的响应结果。Epic Games 将预计算好的 BRDF 对每个粗糙度和入射角的组合的响应结果存储在一张 2D 查找纹理(LUT)上。这张表以 BRDF 的输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n \cdot \omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（范围在 0.0 和 1.0 之间）作为横坐标，以粗糙度作为纵坐标，存储的是菲涅耳响应的系数（R 通道）和偏差值（G 通道）。</p></li><li><p>使用 预滤波环境贴图（Prefiltered EnvMap） 和 BRDF LUT (LookUpTable) 加速 （预计算 + 查表）</p></li></ul></li></ul></li></ul><h3 id="1-ibl-的-specular-部分的卷积做了什么假设这样假设会出现什么问题">(1) IBL 的 specular 部分的卷积，做了什么假设？这样假设会出现什么问题？</h3><p>在计算镜面反射卷积的第一部分时，使用 Cook-Torrance BRDF 的法线分布函数生成采样向量及其散射强度，该函数将法线和视角方向作为输入。由于在卷积环境贴图时事先不知道视角方向， 假设视角方向（即镜面反射方向）总是等于输出采样方向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。预过滤的环境卷积就不需要关心视角方向了。这意味着当从如下图的角度观察表面的镜面反射时，得到的掠角镜面反射效果(light strikes a surface at a very shallow angle and is reflected in a mirror-like fashion)不是很好。</p><p><img src="ibl_grazing_angles.png" alt="ibl_grazing_angles"></p><h3 id="2-ibl-一般会把图像存储在-cubemap-中如果在一些移动端设备上没有提供-cubemap-的相关-api这个时候该怎么处理如果使用柱状投影图会有什么问题">(2) IBL 一般会把图像存储在 cubemap 中，如果在一些移动端设备上，没有提供 cubemap 的相关 api，这个时候该怎么处理？如果使用柱状投影图，会有什么问题？</h3><ul><li><p>a. 直接把各个角度的六张图合并成一张大图，自己定义采样方式。</p></li><li><p>b. 采用等距柱状投影图(Equirectangular Map). 如果使用柱状投影图，会使水平视角附近分辨率较高，而底部和顶部方向分辨率较低。在大多数情况下，这是一个不错的折衷方案，因为大部分有意义的光照和环境信息都在水平视角附近方向。</p></li></ul><h3 id="3-如果需要实时进行卷积操作diffuse-部分怎么做可以更快更高效">(3) 如果需要实时进行卷积操作，diffuse 部分怎么做可以更快，更高效？</h3><ul><li><p>方法 1：<br>“An Efficient Representation for Irradiance Environment Maps” By Ravi Ramamoorthi and Pat Hanrahan, SIGGRAPH 2001<br>环境光照可被投影到球谐基函数上，存储为 一组系数。将环境光照用 Spherical Harmonics（球谐函数）展开，只保留前 3 阶（9 个系数）。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≈</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mn>8</mn></munderover><msub><mi>c</mi><mi>i</mi></msub><mo>⋅</mo><msub><mi>Y</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_o(n) \approx \sum_{i=0}^{8} c_i \cdot Y_i(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：来自环境贴图的预计算球谐系数；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y_i(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>​：在法线方向 n 上的第 i 阶球谐基函数值；n 表面法线方向。<br>只需 9 个 dot product，就能估算半球积分；非常适合 GPU 实时渲染、低频环境光。但只能表达低频光照，不适合锐利阴影、强方向性光源。</p><ul><li>为什么能快速计算卷积？<ul><li>因为球谐有个很棒的性质叫做：<strong>球面卷积在频域中等于系数乘积</strong>，也就是说：<br>预计算：将环境贴图投影成 SH 系数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，运行时：用表面法线 n 计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y_i(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，乘以对应系数即可</li></ul></li></ul></li><li><p>方法 2：少量重要性采样（实时蒙特卡洛积分）<br>如果不能预卷积，可以每帧对环境贴图采样 16~64 个方向。对每个方向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>:</p><p>贡献 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_i(\omega_i) \cdot max(0, n \cdot \omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>将这些方向平均作为漫反射估计值</p></li><li><p>方法 3：使用低 mip 级别模拟漫反射模糊<br>对 cube map 直接采样 mipmap 较低级别（高度模糊，比如 mip 4~5）<br>利用模糊模拟光照卷积（效果类似于 Irradiance）</p></li></ul><h3 id="4-反射探针">(4) 反射探针</h3><ul><li>在 diffuse IBL 中计算积分时，辐射方程除了入射方向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 以外实际上也依赖了位置 p，但在上述计算中是假设它位于辐照度图的中心，这样所有漫反射间接光只能来自同一个环境贴图，这样可能会破坏现实感（特别是在室内）。可以通过在场景中放置多个反射探针来解决此问题，<strong>每个反射探针单独预计算其周围环境的辐照度图</strong>。这样，位置 p 处的辐照度（以及辐射度）是取离其最近的反射探针之间的辐照度（辐射度）内插值。</li><li>多个光照探针如何插值：四面体插值。对于空间中一点 P，可以用四面体的四个顶点坐标的线性组合来表示，即, P=aP0+bP1+cP2+dP3 其中 a+b+c+d=1。</li></ul><h2 id="27-xpbd-原理">27. XPBD 原理</h2><h2 id="28-透视除法的意义透视矫正">28. 透视除法的意义/透视矫正</h2><ul><li><p>透视除法的意义：根据存储深度的信息，构建近大远小的透视效果</p></li><li><p>透视校正插值：</p><ul><li>光栅化中的插值：当 GPU 渲染一个三角形时，它首先会确定这个三角形覆盖了屏幕上的哪些像素（或片元）。对于这些内部的片元，其属性（例如颜色、纹理坐标）的值并不是直接已知的，而是需要根据三角形三个顶点的已知属性值来计算得到。这个计算过程就是插值。</li><li>简单的屏幕空间线性插值在透视下是错误的：如果我们直接在屏幕空间（即三角形投影到 2D 屏幕后的空间）对顶点属性进行线性插值（例如，使用重心坐标直接插值属性本身），在存在透视投影的情况下，结果会是错误的。<ul><li><strong>透视投影的效果</strong>：透视投影使得离观察者较远的物体看起来较小，离观察者较近的物体看起来较大。这意味着，一个在 3D 空间中均匀分布的纹理，当它所在的平面向远处延伸时，其在屏幕上的投影会变得越来越“密集”。</li><li><strong>简单线性插值的问题</strong>：如果在屏幕空间直接线性插值纹理坐标，会导致纹理在倾斜的表面上出现视觉失真，比如“游泳”现象、不自然的压缩或拉伸。例如，一个在 3D 空间中是正方形的纹理格子，在倾斜表面上，靠近观察者的部分可能会被不成比例地拉大，而远离的部分则被过度压缩。</li></ul></li><li>透视校正插值是一种在<strong>光栅化过程中</strong>，能够<strong>正确处理透视投影带来的影响</strong>，从而在屏幕空间中对顶点属性进行“视觉上正确”插值的方法。它确保了<strong>在 3D 空间中线性变化的属性（如沿着一条直线均匀变化的纹理坐标），在投影到屏幕后，其插值结果仍然符合透视规律</strong>。</li><li>核心原理：**虽然属性值 <code>A</code> 本身在屏幕空间不是线性插值的，但 <code>A/w</code> (属性值除以其顶点的裁剪空间 <code>w</code> 分量) 和 <code>1/w</code> 在屏幕空间是线性插值的。**这里的 <code>w</code> 来自于顶点变换到裁剪空间后的齐次坐标 <code>(xc, yc, zc, wc)</code> 中的 <code>wc</code> 分量。在透视投影中，<code>wc</code> 通常与顶点在观察空间中的深度值（例如 <code>-zv</code>）成正比。<br>具体步骤如下：<ul><li><strong>顶点着色器阶段</strong>：<ul><li>顶点着色器计算出每个顶点的裁剪空间坐标 <code>gl_Position = (xc, yc, zc, wc)</code>。</li><li>对于每个需要插值的顶点属性 <code>A</code>（例如纹理坐标 <code>u</code>、<code>v</code>，颜色分量 <code>r</code>、<code>g</code>、<code>b</code>），计算出 <code>A/wc</code> 和 <code>1/wc</code>。</li></ul></li><li><strong>光栅化阶段</strong>：<ul><li>对于三角形内部的每个片元，GPU 会在屏幕空间使用其重心坐标 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>α</mi><mo separator="true">,</mo><mi>β</mi><mo separator="true">,</mo><mi>γ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\alpha, \beta, \gamma)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mclose">)</span></span></span></span> 来线性插值在步骤 1 中计算出的 <code>A/wc</code> 和 <code>1/wc</code> 的值。假设三角形三个顶点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>V</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>V</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">V_0, V_1, V_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的对应值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>A</mi><mn>0</mn></msub><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>0</mn></msub><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A_0/w_0, 1/w_0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A_1/w_1, 1/w_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>2</mn></msub><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A_2/w_2, 1/w_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。那么对于片元 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{frag}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>：<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">/</mi><mi>w</mi><msub><mo stretchy="false">)</mo><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>g</mi></mrow></msub><mo>=</mo><mi>α</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>0</mn></msub><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>β</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>γ</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A/w)_{frag} = \alpha (A_0/w_0) + \beta (A_1/w_1) + \gamma (A_2/w_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>w</mi><msub><mo stretchy="false">)</mo><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>g</mi></mrow></msub><mo>=</mo><mi>α</mi><mo stretchy="false">(</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>β</mi><mo stretchy="false">(</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>γ</mi><mo stretchy="false">(</mo><mn>1</mn><mi mathvariant="normal">/</mi><msub><mi>w</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1/w)_{frag} = \alpha (1/w_0) + \beta (1/w_1) + \gamma (1/w_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mopen">(</span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord">1/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul></li></ul></li><li><strong>计算最终的插值属性值</strong>：<ul><li>对于片元 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{frag}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，其经过透视校正的属性值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{frag}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 通过以下公式得到：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>g</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">/</mi><mi>w</mi><msub><mo stretchy="false">)</mo><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>g</mi></mrow></msub><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>w</mi><msub><mo stretchy="false">)</mo><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{frag} = (A/w)_{frag} / (1/w)_{frag}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mopen">(</span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><br>这个除法操作有效地“撤销”了由于透视投影导致的屏幕空间非线性，并还原了在 3D 空间中应有的线性插值效果。</li></ul></li></ul></li><li><strong>硬件实现与 <code>noperspective</code></strong><ul><li>现代 GPU 的光栅化硬件会自动为从顶点着色器传递到片元着色器的 varying/in-out 变量（如纹理坐标、颜色等）执行透视校正插值。程序员通常不需要手动实现这个数学过程。</li><li>GLSL (以及 HLSL) 也提供了 <code>noperspective</code> 插值限定符。如果一个 varying 变量被声明为 <code>noperspective</code>，那么 GPU 将对其进行简单的屏幕空间线性插值，而不进行透视校正。这在某些特定的效果（例如，某些屏幕空间 UI 元素，或者当知道 <code>w</code> 分量近似恒定，如正交投影下）或者当属性本身就定义在屏幕空间时可能有用。</li></ul></li></ul></li></ul><h2 id="29-ubo-和-ssbo">29. UBO 和 SSBO</h2><ul><li><p>UBO：和普通的 uniform 变量相比，就像是一个结构体，可以容纳更多变量，存储在显存的常量区，速度较快，编译时大小是确定的，而且大小是有限制的，在着色器里可读但不可写，修饰符 uniform，一般用于少量的变量设置，在所有着色器都常用到。</p></li><li><p>SSBO：和 UBO 相比，SSBO 功能更强大，在着色器里是可读可写的，修饰符 buffer，存储在全局变量区，速度比 UBO 慢些，但是其大小可以在编译时不确定，而且大小基本没有限制，一般用于两个着色器之间处理后数据的传递，多见于计算着色器中。</p></li><li><p>UBO 与 SSBO 都可用于多个 shader program 之间共享 uniform 变量</p></li><li><p>UBO 是 GPU 上的一块常量存储区，最大设置为 64KB、128KB（与硬件有关）；SSBO 则应该是对应整个显存，无大小限制，最大设置为显存大小。</p></li></ul><h2 id="30-隐式欧拉积分-显式欧拉积分">30. 隐式欧拉积分 显式欧拉积分</h2><h2 id="31-shader-优化">31. Shader 优化</h2><h3 id="1-基本原则">(1) 基本原则</h3><ul><li><strong>性能分析</strong>：在进行任何优化之前，务必使用 GPU 性能分析工具（如 RenderDoc, NVIDIA Nsight Graphics, AMD Radeon GPU Profiler (RGP), Intel GPA 等）来确定性能瓶颈。了解你的应用是顶点处理受限、片元处理受限、带宽受限还是计算受限。不要过早优化或猜测瓶颈。</li><li><strong>明确优化目标</strong>：针对分析出来的具体瓶颈进行优化。例如，如果片元着色器是瓶颈，那么重点优化它；如果纹理读取是瓶颈，则关注纹理相关的优化。</li><li><strong>了解目标硬件</strong>：不同的 GPU 架构对某些优化技巧的敏感度不同。某些优化在一个平台上效果显著，在另一个平台上可能效果不大甚至有负作用。</li></ul><h3 id="2-算法层面优化">(2) 算法层面优化</h3><ul><li><strong>选择更简单的算法</strong>：如果视觉差异不明显，考虑使用计算复杂度更低的算法（例如，简化的光照模型、近似函数替换复杂函数）。</li><li><strong>预计算</strong>：<ul><li>将可以在 CPU 端完成的计算（每帧、每对象或甚至离线计算）移到 CPU 进行，而不是在每个顶点或片元上重复计算。例如，预先计算 MVP 矩阵的一部分、将光照烘焙到纹理中。</li><li>使用查找表 (LUT - Lookup Tables)：对于复杂的、可重复的函数，可以预先计算结果并<strong>存储到纹理中</strong>，在着色器中通过纹理采样获取。</li></ul></li><li><strong>细节级别 (LOD - Level of Detail)</strong>：为远处的物体或不重要的效果使用更简单的着色器、更少的计算或更低分辨率的纹理。</li></ul><h3 id="3-指令层面优化">(3) 指令层面优化</h3><ul><li><p><strong>最小化昂贵操作</strong>：</p><ul><li><strong>超越函数</strong>：<code>sin</code>, <code>cos</code>, <code>pow</code>, <code>log</code>, <code>exp</code>, <code>sqrt</code>, <code>normalize</code> 等函数通常比基本的算术运算昂贵。如果精度要求不高，可以考虑使用数学近似或查表法。尽量减少其使用频率。</li><li><strong>除法</strong>：除法通常比乘法慢。如果除数是常量或变化不频繁，可以预先计算其倒数，然后用乘法代替。</li><li><code>normalize()</code>：只在绝对必要时才进行归一化。有时未归一化的向量也可以接受，或者可以在流程中较晚或较少频率地进行归一化。</li></ul></li><li><p><strong>善用内置函数</strong>：GPU 硬件通常对 GLSL 内置函数（如 <code>dot</code>, <code>cross</code>, <code>mix</code>, <code>smoothstep</code>, <code>clamp</code>, <code>abs</code>, <code>min</code>, <code>max</code> 等）有高度优化的实现。</p></li><li><p><strong>利用 <code>mad</code> (Multiply-Add) 指令</strong>：表达式 <code>a * b + c</code> 通常可以被 GPU 编译成一条融合乘加 (Fused Multiply-Add, FMA 或 MAD) 指令，这比分开执行乘法和加法更快。尽量写成这种形式。</p></li><li><p><strong>向量化操作</strong>：尽可能使用向量类型 (<code>vec2</code>, <code>vec3</code>, <code>vec4</code>) 并进行向量运算。GPU 是 SIMD（单指令多数据）/SIMT（单指令多线程）架构，处理向量数据效率很高。</p></li><li><p><strong>精度限定符</strong>：尤其在移动平台或嵌入式 GPU 上，合理使用 <code>lowp</code>, <code>mediump</code>, <code>highp</code> 精度限定符。较低精度（如 <code>mediump</code> 用于颜色和纹理坐标，<code>lowp</code> 用于某些简单计算）可以显著提高性能并降低功耗，但会牺牲一定的计算精度。桌面级 GPU 通常对 <code>float</code> (即 <code>highp</code>) 有很好的优化。</p></li><li><p><strong>避免不必要的 Swizzling 和分量访问</strong>：频繁地重组向量分量（如 <code>pos.xy = anotherVec.zw;</code>）或单独访问向量的单个分量（如 <code>color.r = ...; color.g = ...;</code>）有时可能妨碍编译器的向量化优化。</p></li><li><p><strong>循环</strong>：</p><ul><li><strong>避免在着色器中使用依赖于运行时数据的大量迭代或复杂循环</strong>，这可能导致性能大幅下降。</li><li><strong>手动展开小型固定迭代次数的循环</strong>：有时（尤其在旧的编译器或特定情况下）手动展开循环可能比让编译器自动展开带来一些好处，但这会增加代码量。对于现代编译器，通常让其自行决定是否展开。务必通过性能分析验证效果。</li><li><strong>基于纹理的循环</strong>：对于某些迭代过程，可以考虑将其展现在纹理上，通过多次渲染通道（ping-pong 技术）来模拟迭代。</li></ul></li><li><p><strong>减少条件分支 (<code>if</code> 语句)</strong>：</p><ul><li>GPU 上的分支（尤其是在一个 warp/wavefront 内的线程发生分化执行不同路径时）可能会导致显著的性能开销。</li><li><strong>无分支替代方案</strong>：尝试使用 <code>mix()</code>, <code>step()</code>, <code>smoothstep()</code>, <code>clamp()</code>, <code>min()</code>, <code>max()</code>，或数学技巧（如使用 <code>sign()</code> 或算术运算选择值）来替代 <code>if</code> 语句。<br><code>glsl // Bad: if (condition) result = a; else result = b; // Good: result = mix(b, a, float(condition)); // condition is 0.0 or 1.0 // Or: result = condition_is_true_mask * a + (1.0 - condition_is_true_mask) * b; (mask is 0 or 1) </code> - 如果分支不可避免，尽量使分支条件在同一个 SIMD 执行单元组内的线程中保持一致。</li></ul></li><li><p><strong>提前退出 (Early Exit - 主要在片元着色器中)</strong>：</p><ul><li><strong><code>discard</code> (GLSL) / <code>clip(-1.0)</code> (HLSL)</strong>：可以提前终止片元着色器的执行，后续的计算和输出都不会发生。非常适用于 Alpha Test 或者在计算初期就发现片元不可见/不需要特殊处理的情况。</li><li><strong>从 <code>main()</code> 函数中 <code>return</code></strong>：也可以实现提前退出。</li><li><strong>注意</strong>：过度或不当使用 <code>discard</code> 有时可能会干扰 GPU 的某些早期优化（如 Early-Z），或者在某些架构上引入额外开销。需要权衡。</li></ul></li></ul><h3 id="4-数据访问与纹理优化">(4) 数据访问与纹理优化</h3><ul><li><p><strong>最小化纹理采样 (Texture Fetches)</strong>：<br>纹理采样是常见的性能瓶颈，因为它涉及内存访问延迟和带宽消耗。</p><ul><li><strong>使用压缩纹理格式</strong> (如 BCn/DXTC, ETC, ASTC)：显著减少显存占用和带宽需求。</li><li><strong>正确使用 Mipmap</strong>：确保为缩小（minification）的纹理启用了 Mipmapping (<code>GL_TEXTURE_MIN_FILTER</code> 设置为 Mipmap 相关模式如 <code>GL_LINEAR_MIPMAP_LINEAR</code>)。这能提高缓存命中率，减少远处物体的摩尔纹和闪烁。</li><li><strong>选择合适的纹理过滤方式</strong>：双线性过滤 (<code>GL_LINEAR</code>) 比三线性过滤 (<code>GL_LINEAR_MIPMAP_LINEAR</code>) 或各向异性过滤开销小，但视觉质量也较低。按需选择。</li><li><strong>纹理图集 (Texture Atlases)</strong>：将多个小纹理合并到一个大纹理中，可以减少纹理绑定的开销，并可能提高缓存局部性。</li><li><strong>延迟纹理采样</strong>：如果着色器逻辑可能在采样纹理前就通过 <code>discard</code> 丢弃片元，那么将纹理采样操作放到 <code>discard</code> 判断之后。</li></ul></li><li><p><strong>优化缓冲数据布局 (UBOs, SSBOs, Vertex Buffers)</strong>：确保数据紧凑排列，避免不必要的填充，以提高缓存利用率和减少带宽。注意数据对齐（例如，<code>vec3</code> 在 UBO/SSBO 中通常会按 <code>vec4</code> 对齐）。</p></li><li><p><strong>Varying 插值器 (Varyings / Interpolators)</strong>：</p><ul><li>最小化从顶点着色器传递到片元着色器的 varying 变量的数量和大小。每个 varying 都需要占用插值硬件资源和带宽。</li><li>如果可能，对数据进行打包（例如，将一个精度要求不高的法线用两个分量编码）。</li></ul></li></ul><h3 id="5-着色器阶段特定优化">(5) 着色器阶段特定优化</h3><ul><li><strong>顶点着色器</strong>：<ul><li>保持其尽可能轻量，因为它为每个顶点执行。</li><li>将与顶点本身无关、但对整个物体或实例相同的计算（如模型矩阵的某些部分）放到 CPU 端。</li></ul></li><li><strong>片元着色器 (Fragment Shader)</strong>：</li><li>通常是性能瓶颈的主要来源，因为它为屏幕上的大量片元执行。</li><li><strong>减少 Overdraw</strong>：避免同一像素被多次不必要地着色。使用 Z-Prepass、从前到后渲染不透明物体等技术可以帮助减少 Overdraw。</li><li><strong>最大化 Early-Z/Stencil 剔除效果</strong>：确保不透明物体先渲染，并且片元着色器不执行会禁用 Early-Z 的操作（如修改 <code>gl_FragDepth</code>，或在可以避免的情况下早期使用 <code>discard</code>）。</li></ul><h3 id="6-管理着色器变体-shader-permutations-uber-shaders">(6) 管理着色器变体 (Shader Permutations / Uber Shaders)**</h3><ul><li><strong>避免过于复杂的“超级着色器” (Uber Shaders)</strong>：一个包含大量 <code>#if</code> / <code>#ifdef</code> 或运行时 <code>if</code> 来切换不同功能的着色器可能会变得非常庞大，导致编译时间长、寄存器压力大、性能下降。</li><li><strong>使用着色器变体</strong>：为不同的功能组合编译多个专门的、更小的着色器版本。可以通过预处理器宏 (<code>#define</code>) 在编译时生成这些变体。</li></ul><h2 id="32-billboard-有什么作用原理是什么">32. billboard 有什么作用？原理是什么？</h2><ul><li>Billboard（广告牌）技术 是一种<strong>让二维图像（通常是一个四边形 Quad）始终面向摄像机</strong>的图形技术，看起来像三维物体，但实际上是<strong>贴在板子上的图</strong>。</li><li>典型应用：<ul><li>3D 树叶、草地、远景山体</li><li>火焰、爆炸、烟雾、光斑（Bloom）</li><li>粒子系统（Particle System）</li><li>UI 标签、单位血条、地图标注</li></ul></li><li>核心思想：动态地计算 Quad 的朝向，使其始终面向摄像机。</li><li>具体做法：更新顶点位置或变换矩阵，让面片面向 View 方向（如：让 Quad 的法线始终朝向摄像机位置）。</li></ul><h2 id="33-双重缓冲-和-垂直同步">33. 双重缓冲 和 垂直同步</h2><ul><li>当绘制 3D 图像时，GPU 会把结果渲染到帧缓冲（Framebuffer）中，而显示器会周期性地从帧缓冲读取图像来刷新屏幕。。</li><li>如果 GPU 弱显示器强，会导致显卡一帧还没画完显示器就读取并显示了，而<strong>双重缓冲</strong>是使用两个帧缓冲区（前缓冲区 + 后缓冲区）轮流渲染和显示，避免屏幕读取过程中被修改内容。<ul><li>GPU 在后缓冲区渲染下一帧的图像</li><li>显示器在前缓冲区读取当前帧的图像<br>完成渲染后，两个缓冲进行交换。</li></ul></li><li>如果 GPU 强显示器弱，例如显示器以 60Hz、144Hz 的频率刷新，显示器刷新一次的时间够 GPU 渲染若干帧，导致一帧还没显示完又开始画下一帧，从而造成撕裂。<strong>垂直同步（V-Sync）</strong> 会强制 GPU 等显示器刷新完成后再交换缓冲。</li></ul><h2 id="34-移动端-pc-端-gpu-显存架构">34. 移动端、PC 端 GPU 显存架构</h2><h3 id="1-移动端架构和-pc-端架构">(1) 移动端架构和 PC 端架构</h3><ul><li>显存架构的不同</li></ul><table><thead><tr><th>特性</th><th>移动端 GPU</th><th>PC / 桌面 GPU</th></tr></thead><tbody><tr><td><strong>显存类型</strong></td><td>与 CPU 共享主内存（统一内存）</td><td>独立高速显存（GDDR / HBM）</td></tr><tr><td><strong>带宽</strong></td><td>非常有限（&lt; 100 GB/s）</td><td>非常高（500 GB/s ~ 1 TB/s）</td></tr><tr><td><strong>显存访问延迟</strong></td><td>相对低，但容量受限</td><td>带宽高但更依赖缓存结构优化</td></tr><tr><td><strong>容量限制</strong></td><td>通常小于 8GB（与系统共享）</td><td>独立配置 8~24GB 或更大</td></tr><tr><td><strong>功耗控制</strong></td><td>极端敏感（电池续航约束）</td><td>不敏感，主要靠散热/风扇解决</td></tr></tbody></table><ul><li><p>移动端采用<strong>统一内存架构（UMA: Unified Memory Architecture）</strong></p><ul><li>特点：<ul><li>GPU 和 CPU 共享一套物理内存（如 LPDDR5）</li><li>减少了显存复制开销</li><li>易于硬件集成（SoC）</li></ul></li><li>问题：<ul><li><strong>内存带宽有限</strong>，故渲染/纹理要精打细算</li><li><strong>缓存更重要</strong>，故需要 tile-based 渲染</li></ul></li></ul></li><li><p>GPU 架构设计的不同</p><table><thead><tr><th>特性</th><th>移动端 GPU</th><th>PC GPU</th></tr></thead><tbody><tr><td><strong>渲染架构</strong></td><td>Tile-based deferred rendering（TBDR）</td><td>Immediate Rendering（立即渲染）</td></tr><tr><td><strong>目标优化方向</strong></td><td>节能 + 带宽压缩 + tile 缓存</td><td>性能极致 + 多并发 pipeline</td></tr><tr><td><strong>计算能力（ALU 数量）</strong></td><td>少量（适合低分辨率）</td><td>大量（高吞吐浮点并行）</td></tr><tr><td><strong>纹理压缩/访问优化</strong></td><td>极度依赖 ETC/ASTC 等压缩方案</td><td>带宽高+缓存层级多，压缩可选</td></tr><tr><td><strong>合批能力</strong></td><td>强调 batching，避免 state switch</td><td>资源充足，状态切换代价小</td></tr></tbody></table></li><li><p>为什么移动端采用这种解决方案？</p><ul><li>节能</li><li>移动内存带宽有限，因此需要 tile cache + 减少 draw call</li><li>CPU + GPU + RAM 一体封装</li><li>面向中低分辨率</li><li>目标内容简单，不需要复杂后处理和高精度计算</li></ul></li><li><p>总结对比</p><table><thead><tr><th>维度</th><th>移动端 GPU</th><th>PC / 桌面 GPU</th></tr></thead><tbody><tr><td>显存架构</td><td>统一内存（CPU + GPU 共用）</td><td>独立显存（GDDR / HBM）</td></tr><tr><td>渲染架构</td><td>Tile-based 渲染（TBDR）</td><td>Immediate 渲染</td></tr><tr><td>带宽</td><td>低（高效压缩 + 缓存）</td><td>高（大吞吐配合缓存）</td></tr><tr><td>能耗</td><td>超低功耗（数瓦）</td><td>高性能 + 高功耗（百瓦级）</td></tr><tr><td>优化方向</td><td>合批、压缩、剔除、Tile 缓存</td><td>多线程、多流水线并行、宽带宽策略</td></tr></tbody></table></li><li><p>移动端 GPU 为了节能与带宽受限环境而生，采用统一内存 + tile-based 渲染架构；而 PC GPU 则拥有独立显存与超高带宽。两者设计目标不同，因此架构和使用策略差异显著。</p></li></ul><h3 id="2-tbr-和-tbdr">(2) TBR 和 TBDR</h3><ul><li><p>TBR（Tiled-Based Rendering）：将屏幕划分为小块（Tile），然后逐 Tile 进行渲染。</p><ul><li>流程：<ul><li>屏幕划分为 Tile 区域（例如 16x16、32x32 像素块）</li><li>将所有三角形投影到屏幕，判断每个三角形影响哪些 Tile（binning）</li><li>逐 Tile 渲染：<ul><li>载入 Tile 的相关几何数据、光照、纹理；</li><li>在片上缓存中执行几何和像素着色，片上缓存（On-chip Cache）是集成在 GPU 芯片内部的一块高速缓存，在渲染过程中临时存储数据（如像素颜色、深度、法线等），以避免频繁访问外部内存（RAM）；</li><li>整个 Tile 渲染完后，把结果一次性写入主内存的帧缓冲区。整个 Tile 渲染过程不需要反复访问外部显存（外部访问耗电高延迟大）</li></ul></li></ul></li><li>优点：<ul><li>显著减少内存带宽：Tile 渲染通常在片上缓存中完成</li><li>减少过绘：可在 Tile 内提前剔除遮挡三角形（早 Z）</li><li>更适合移动端：内存资源紧张，带宽节省极大</li></ul></li></ul></li><li><p>TBDR：在 TBR 基础上引入了 延迟渲染（Deferred Rendering），进一步提升多光源支持和节省内存。</p></li></ul><h3 id="3-在-tbdr-上怎么处理半透明物体">(3) 在 TBDR 上怎么处理半透明物体？</h3><p>分 Pass / 混合渲染</p><ul><li>所有不透明物体：用 TBDR 渲染（走 G-buffer + 光照）</li><li>所有半透明物体：用传统前向渲染（Forward Pass）后处理叠加</li></ul><h2 id="35-帧同步和状态同步">35. 帧同步和状态同步</h2><h3 id="1-帧同步和状态同步">(1) 帧同步和状态同步</h3><p>“所谓同步，就是要多个客户端表现效果是一致的，例如我们玩王者荣耀的时候，需要十个玩家的屏幕显示的英雄位置完全相同、技能释放角度、释放时间完全相同，这个就是同步。而对于大多数游戏，不仅客户端的表现要一致，而且需要客户端和服务端的数据是一致的。所以，同步是一个网络游戏概念，只有网络游戏才需要同步，而单机游戏是不需要同步的。”</p><ul><li>帧同步（Frame Sync）和状态同步（State Sync）是多玩家游戏中常见的两种网络同步模型，用于保证客户端之间的一致性。</li><li>帧同步：“在帧同步中，服务器或主机仅同步 玩家输入或操作指令（如移动、攻击键等），然后由各客户端使用完全一致的逻辑和初始状态，帧帧执行来还原游戏过程。”<ul><li>特点：<ul><li><strong>逻辑计算在客户端</strong>；</li><li>网络传输数据小（只传操作）；</li><li>所有客户端必须保证<strong>逻辑完全一致</strong>；</li><li>易于防外挂（判断逻辑不变）；</li><li>不适合大型复杂游戏（同步成本高）。</li></ul></li><li>适用场景：<ul><li>RTS（如《星际争霸》）；</li><li>MOBA（如《王者荣耀》使用帧同步+服务仲裁）；</li><li>小游戏；</li><li>动作对战类手游（节省流量 + 响应快）。</li></ul></li></ul></li><li>状态同步：“在状态同步中，服务器会<strong>同步游戏对象的完整状态信息</strong>（如坐标、血量、动画状态等），客户端根据服务器下发的状态来更新显示。”<ul><li>特点：<ul><li><strong>服务器负责游戏逻辑计算</strong>；</li><li>网络传输开销大（大量对象状态）</li><li>客户端主要用于渲染和表现（非权威）；</li><li>延迟较高时容易出现瞬移、补帧、插值；</li><li>易于防作弊（服务器控制所有状态）。</li></ul></li><li>适用场景：<ul><li>MMO（如《魔兽世界》）</li><li>大型多人射击（如《绝地求生》）</li><li>FPS;</li><li>大型开放世界；</li><li>高延迟环境（因客户端无法决定状态）</li></ul></li></ul></li></ul><table><thead><tr><th>对比项</th><th>帧同步</th><th>状态同步</th></tr></thead><tbody><tr><td>同步内容</td><td>玩家操作指令（输入）</td><td>游戏对象的完整状态</td></tr><tr><td>计算发生地</td><td>客户端</td><td>服务器</td></tr><tr><td>带宽使用</td><td>低</td><td>高</td></tr><tr><td>一致性要求</td><td>极高，需逻辑一致</td><td>相对低，由服务器统一控制</td></tr><tr><td>延迟感知</td><td>低</td><td>高</td></tr><tr><td>防作弊能力</td><td>强（无法伪造状态）</td><td>强（状态不可伪造）</td></tr><tr><td>使用场景</td><td>MOBA、RTS、小游戏</td><td>MMO、FPS、大型开放世界</td></tr></tbody></table><hr><h3 id="2-常见游戏类别">(2) 常见游戏类别</h3><ul><li><p>RTS（Real-Time Strategy，实时战略游戏）</p><ul><li>定义：玩家<strong>同时控制多个单位/建筑</strong>，进行资源采集、生产、作战等操作，游戏是<strong>实时进行的</strong>（非回合制）。</li><li>代表游戏：<ul><li>《星际争霸 StarCraft》</li><li>《帝国时代 Age of Empires》</li><li>《红色警戒 Red Alert》</li></ul></li><li>特点：<ul><li>控制多个单位</li><li>资源经营 + 战斗并重</li><li>大量逻辑同步（AI、战斗状态等）</li><li>通常采用 <strong>帧同步</strong>（操作同步）</li></ul></li></ul></li><li><p>MOBA（Multiplayer Online Battle Arena，多人在线战术竞技）</p><ul><li>定义：玩家控制一个角色，与队友组队对抗另一队玩家，目标是推塔、团战、夺胜点等。</li><li>代表游戏：<ul><li>《英雄联盟 LOL》</li><li>《Dota 2》</li><li>《王者荣耀》</li></ul></li><li>特点：<ul><li>每位玩家只控制一个英雄</li><li>强竞技性、高节奏、低延迟要求</li><li>技能、普攻、移动精度高</li><li>多采用 <strong>帧同步</strong>（+ 服务器仲裁）</li></ul></li></ul></li><li><p>MMO（Massively Multiplayer Online，大型多人在线游戏）</p><ul><li>定义：支持<strong>上百上千名玩家同时在线</strong>，拥有持久世界、角色成长、社交、战斗、任务系统等内容。</li><li>代表游戏：<ul><li>《魔兽世界 World of Warcraft》</li><li>《剑网 3》</li><li>《梦幻西游》</li></ul></li><li>特点：<ul><li>大地图、开放世界</li><li>非常多实体对象（玩家、NPC、怪物）</li><li>网络压力大</li><li>多使用 <strong>状态同步</strong>（服务器权威控制一切）</li></ul></li></ul></li><li><p>FPS（First-Person Shooter，第一人称射击）</p><ul><li>定义：玩家从“自己视角”出发，使用武器进行射击，强调<strong>精准瞄准、反应速度和低延迟体验</strong>。</li><li>代表游戏：<ul><li>《CS:GO》</li><li>《使命召唤 Call of Duty》</li><li>《Apex 英雄》</li></ul></li><li>特点：<ul><li>视角 = 玩家眼睛</li><li>对延迟、预测、补偿要求极高</li><li>技术上采用 <strong>状态同步 + 客户端预测 + 延迟补偿</strong></li></ul></li></ul></li></ul><hr><p>对比总结表：</p><table><thead><tr><th>类型</th><th>控制方式</th><th>同步模型</th><th>典型特征</th><th>网络重点</th></tr></thead><tbody><tr><td>RTS</td><td>控制多个单位</td><td>帧同步</td><td>多单位、资源、战术</td><td>客户端需完全一致计算</td></tr><tr><td>MOBA</td><td>控制一个英雄</td><td>帧同步 + 仲裁</td><td>技能释放、团战节奏快</td><td>快速响应、低延迟</td></tr><tr><td>MMO</td><td>大量玩家</td><td>状态同步</td><td>大地图、成长系统</td><td>大量状态、服务器压力大</td></tr><tr><td>FPS</td><td>第一人称角色</td><td>状态同步 +预测</td><td>精准瞄准、延迟敏感</td><td>延迟补偿、预测与回滚</td></tr></tbody></table><h3 id="3-客户端预测">(3) 客户端预测</h3><ul><li>客户端预测是指，客户端在尚未收到服务器确认之前，自己先对操作进行预执行（预测），以<strong>减少延迟感，提高响应速度</strong>。通俗讲：玩家一按键，游戏立刻表现出效果（比如角色动了）（不等服务器返回才开始动），同时把指令发给服务器，等服务器确认回来，再决定是否修正。这样能使玩家感觉操作是即时的，但同时通过服务仲裁仍然保持了数据一致性。但无法预测其他玩家的状态/操作，例如如果是被打，就只能等待服务器同步。</li><li>为什么需要客户端预测？<ul><li>因为网络是有延迟的（几十 ~ 上百 ms）：</li><li>如果每次都“等服务器响应再显示结果” ，会感觉角色延迟、顿挫、卡顿，尤其在快节奏对战游戏中（MOBA、FPS）</li></ul></li></ul><h3 id="4-服务仲裁">(4) 服务仲裁</h3><ul><li>服务仲裁（Server Arbitration） 是指：服务器对客户端上报的操作或状态进行验证、决定是否接受或修正的机制，用于防止作弊和保持游戏状态一致。</li></ul><h3 id="5-帧同步如何处理延迟">(5) 帧同步如何处理延迟</h3><p>帧同步的流程大致如下：</p><ul><li><p>玩家客户端产生<strong>操作指令</strong>（如移动、攻击）</p></li><li><p>将操作发送给<strong>服务器或主机</strong></p></li><li><p>等待<strong>所有玩家操作</strong>汇总后统一执行当前帧</p></li><li><p>每一帧都必须 <strong>“等待所有人”</strong>，才能同步执行</p></li><li><p>这就意味着：<strong>某个玩家网络稍卡，所有人都要等他！</strong></p></li></ul><p><strong>常用策略</strong></p><ul><li><p>固定帧延迟（帧延迟缓存）</p><ul><li>客户端并不立即使用“当前帧”的指令，而是<strong>延迟 N 帧后再执行</strong>。</li><li>例如设置延迟为 2 帧：<ul><li>第 0 帧收到输入 → 第 2 帧再执行</li><li>所有客户端都这样处理 → 保证<strong>帧对齐 + 同步一致</strong></li></ul></li><li>优点：<ul><li>容忍轻微网络抖动（ping 波动）</li><li>保证逻辑一致性</li></ul></li><li>缺点：<ul><li>操作延迟 = N 帧时间（60fps 下约 33~66ms）</li></ul></li></ul></li><li><p>输入预测（Input Prediction）（客户端体验优化）</p><ul><li>客户端在等待远端同步帧时，<strong>提前预测自己的操作结果</strong>进行渲染，后续如果预测错误再纠正。</li><li>常见于：<ul><li>自己移动 / 放技能等可预测性高的行为</li><li>显著减少输入延迟感</li></ul></li><li>风险：<ul><li>预测失败会“跳一下” ，故需配合补帧插值等手段平滑修复</li></ul></li></ul></li><li><p>帧同步 + 服务端仲裁（Hybrid Model）</p><ul><li>类似《王者荣耀》的方式，客户端用帧同步跑逻辑，但<strong>服务器负责最终仲裁操作是否合法、是否命中、是否越界</strong>。</li><li>好处：<ul><li>保持帧同步流畅性</li><li>增强安全性（防外挂）</li><li>某些状态可由服务器即时修正，避免外挂干扰同步状态</li></ul></li></ul></li><li><p>帧补发 / 快速追帧（Catch-up）*</p><ul><li>对于网络延迟高/卡帧玩家，允许客户端 <strong>快速补帧</strong> 来赶上当前同步帧：</li><li>连发多帧操作包</li><li>快进模拟逻辑，跳过渲染帧赶进度</li><li>不能无限追，否则太卡就被踢掉</li></ul></li><li><p>王者荣耀帧同步处理延迟的策略</p><ul><li>客户端帧延迟设置为 2 ～ 4 帧</li><li>同步操作 + 预测输入显示</li><li>实时帧率补偿（断帧重连）</li><li>服务器仲裁技能/命中判断</li><li>延迟高于阈值玩家会被托管或提示断开</li></ul></li></ul><table><thead><tr><th>技术手段</th><th>作用</th></tr></thead><tbody><tr><td>帧延迟缓存</td><td>抵抗抖动，保证帧对齐</td></tr><tr><td>输入预测</td><td>降低操作延迟感，提升手感</td></tr><tr><td>服务端仲裁</td><td>保证公平性、防止作弊</td></tr><tr><td>补帧/追帧机制</td><td>处理短时网络波动，保证同步</td></tr></tbody></table><h2 id="36-z-fighting-是什么怎么处理-动近平面和远平面哪一个比较好">36. z-fighting 是什么/怎么处理？ 动近平面和远平面哪一个比较好？</h2><h3 id="1-深度缓冲定义-原因-解决方法">(1) 深度缓冲定义、原因、解决方法</h3><ul><li>定义：Z-Fighting（Z 轴冲突 / 深度冲突） 是指在图形渲染中，由于两个表面/像素之间的<strong>深度值过于接近</strong>，导致 GPU 无法准确判断哪个在前，最终出现像素闪烁、锯齿、乱跳等“闪动”现象。</li><li>主要原因：<ul><li>两个面或两个像素的 Z 值几乎相同，超出 GPU 深度缓冲精度（Z-buffer resolution）</li><li>深度缓冲精度不够（尤其是 16-bit z-buffer）</li><li>远近裁剪范围设置不合理，导致精度集中在远处，近处精度不足（常见）（深度缓冲并非线性分布，<strong>精度在 Near Plane 附近更高</strong>）</li></ul></li><li>解决方法：<ul><li>直接修改模型顶点数据或位置：添加一点用户无法注意到的偏移量<ul><li>贴图浮雕、道路白线、UI 面板等都可以做“偏移贴近”</li></ul></li><li>polygon offset（OpenGL/DirectX）：由 GPU 在光栅化阶段修改深度值的渲染偏移机制（仅影响深度写入，不动模型位置）<ul><li>例如在 OpenGL 中<figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs glsl">glEnable(GL_POLYGON_OFFSET_FILL);<br>glPolygonOffset(factor, units); <span class="hljs-comment">// 例如 glPolygonOffset(1.0f, 1.0f)</span><br></code></pre></td></tr></table></figure></li><li>常用于阴影贴图、地表投影、Decal 渲染</li></ul></li><li>改善深度缓冲精度<ul><li>使用 24-bit 或 32-bit float Z-buffer</li><li>使用 反向 Z-buffer（Reverse Z）(把近平面映射到 Z=1，远平面映射到 Z=0)</li><li>在远近平面距离很大的场景尤其有效</li></ul></li><li>调整摄像机的 Near/Far 平面比值<ul><li>避免 Near 太小、Far 太大</li><li>传统 Z-buffer 的深度精度是非线性的，分布在 Near 附近。</li><li>建议：Near ≈ 0.1，Far ≈ 100（比值尽量控制在 &lt; 1000）</li></ul></li><li>多个 pass 分开渲染</li></ul></li></ul><h3 id="2-为什么深度缓存是非线性的">(2) 为什么深度缓存是非线性的</h3><p>核心原因：透视投影矩阵的深度映射是非线性的。</p><p>在透视投影中，我们会将场景中的一个点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">z_{view}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（摄像机空间的 z 值）映射到标准化设备坐标（NDC）的 z 值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>n</mi><mi>d</mi><mi>c</mi></mrow></msub><mo>∈</mo><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">z_{ndc} \in [-1,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，最终再转成深度值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi></mrow></msub><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">z_{depth} \in [0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8252em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">pt</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>。</p><p>这个映射关系是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mrow><mi>n</mi><mi>d</mi><mi>c</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>a</mi><mo>⋅</mo><mi>z</mi><mo>+</mo><mi>b</mi></mrow><mi>z</mi></mfrac></mrow><annotation encoding="application/x-tex">z_{ndc} = \frac{a \cdot z + b}{z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>其中 a、b 是由 Near 和 Far 决定的常数。这也就是说，深度缓冲区中的值并不是线性分布的（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>z</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>），它在 近平面 附近变化非常剧烈，在 远平面 变化非常平缓。</p><h2 id="37-a寻路">37. A*寻路</h2><p>引入启发式函数，优化了 Dijkstra 算法 。</p><p>每个节点 n 的总评估代价：</p><p>f(n)=g(n)+h(n)<br>其中，<br>f(n)：当前节点的综合优先级<br>g(n)：从起点到当前节点的已知路径成本<br>h(n)：启发式估计：从当前节点到终点的预估成本</p><h2 id="38-手写-blinn-phong-shader">38. 手写 blinn-phong shader</h2><p><strong>顶点着色器</strong></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><br><span class="hljs-keyword">layout</span>(<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;     <span class="hljs-comment">// 顶点位置</span><br><span class="hljs-keyword">layout</span>(<span class="hljs-keyword">location</span> = <span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aNormal;  <span class="hljs-comment">// 顶点法线</span><br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> model;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> view;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> projection;<br><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> FragPos;     <span class="hljs-comment">// 片元位置（世界空间）</span><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> Normal;      <span class="hljs-comment">// 法线（世界空间）</span><br><br><span class="hljs-type">void</span> main()<br>&#123;<br>    <span class="hljs-type">vec4</span> worldPos = model * <span class="hljs-type">vec4</span>(aPos, <span class="hljs-number">1.0</span>);<br>    FragPos = worldPos.xyz;<br>    Normal = <span class="hljs-type">mat3</span>(<span class="hljs-built_in">transpose</span>(<span class="hljs-built_in">inverse</span>(model))) * aNormal; <span class="hljs-comment">// 保证变换后法线正确</span><br>    <span class="hljs-built_in">gl_Position</span> = projection * view * worldPos;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>片元着色器</strong></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> FragPos;<br><span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> Normal;<br><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> FragColor;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> lightPos;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> viewPos;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> lightColor = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>);<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> objectColor = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.3</span>);<br><br><span class="hljs-type">void</span> main()<br>&#123;<br>    <span class="hljs-comment">// 环境光</span><br>    <span class="hljs-type">float</span> ambientStrength = <span class="hljs-number">0.1</span>;<br>    <span class="hljs-type">vec3</span> ambient = ambientStrength * lightColor;<br><br>    <span class="hljs-comment">// 漫反射</span><br>    <span class="hljs-type">vec3</span> norm = <span class="hljs-built_in">normalize</span>(Normal);<br>    <span class="hljs-type">vec3</span> lightDir = <span class="hljs-built_in">normalize</span>(lightPos - FragPos);<br>    <span class="hljs-type">float</span> diff = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(norm, lightDir), <span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">vec3</span> diffuse = diff * lightColor;<br><br>    <span class="hljs-comment">// 镜面反射（Blinn-Phong）</span><br>    <span class="hljs-type">float</span> specularStrength = <span class="hljs-number">0.5</span>;<br>    <span class="hljs-type">vec3</span> viewDir = <span class="hljs-built_in">normalize</span>(viewPos - FragPos);<br>    <span class="hljs-type">vec3</span> halfDir = <span class="hljs-built_in">normalize</span>(lightDir + viewDir);<br>    <span class="hljs-type">float</span> spec = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(norm, halfDir), <span class="hljs-number">0.0</span>), <span class="hljs-number">32.0</span>); <span class="hljs-comment">// shininess = 32</span><br>    <span class="hljs-type">vec3</span> specular = specularStrength * spec * lightColor;<br><br>    <span class="hljs-comment">// 合成最终颜色</span><br>    <span class="hljs-type">vec3</span> result = (ambient + diffuse + specular) * objectColor;<br>    FragColor = <span class="hljs-type">vec4</span>(result, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="39-手写旋转平移缩放矩阵">39. 手写旋转，平移，缩放矩阵</h2><h3 id="1-平移">(1) 平移</h3><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">T(tx, ty, tz) =\begin{bmatrix}1 &amp; 0 &amp; 0 &amp; tx \\\\0 &amp; 1 &amp; 0 &amp; ty \\\\0 &amp; 0 &amp; 1 &amp; tz \\\\0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:8.4001em;vertical-align:-3.9501em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M403 1759 V84 H666 V0 H319 V1759 v4800 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="mord mathnormal">x</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M347 1759 V0 H0 V84 H263 V1759 v4800 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="2-缩放">(2) 缩放</h3><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>s</mi><mi>x</mi><mo separator="true">,</mo><mi>s</mi><mi>y</mi><mo separator="true">,</mo><mi>s</mi><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>y</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>z</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">S(sx, sy, sz) =\begin{bmatrix}sx &amp; 0  &amp; 0  &amp; 0 \\\\0  &amp; sy &amp; 0  &amp; 0 \\\\0  &amp; 0  &amp; sz &amp; 0 \\\\0  &amp; 0  &amp; 0  &amp; 1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">sy</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">sz</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:8.4001em;vertical-align:-3.9501em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M403 1759 V84 H666 V0 H319 V1759 v4800 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">sy</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">sz</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M347 1759 V0 H0 V84 H263 V1759 v4800 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="3-旋转">(3) 旋转</h3><p>绕 x 轴旋转：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">R_x(\theta) =\begin{bmatrix}1 &amp; 0           &amp; 0          &amp; 0 \\\\0 &amp; \cos\theta  &amp; -\sin\theta &amp; 0 \\\\0 &amp; \sin\theta  &amp; \cos\theta  &amp; 0 \\\\0 &amp; 0           &amp; 0           &amp; 1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:8.4001em;vertical-align:-3.9501em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M403 1759 V84 H666 V0 H319 V1759 v4800 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M347 1759 V0 H0 V84 H263 V1759 v4800 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>绕 y 轴旋转：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">R_y(\theta) =\begin{bmatrix}\cos\theta  &amp; 0 &amp; \sin\theta &amp; 0 \\\\0           &amp; 1 &amp; 0          &amp; 0 \\\\-\sin\theta &amp; 0 &amp; \cos\theta &amp; 0 \\\\0           &amp; 0 &amp; 0          &amp; 1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:8.4001em;vertical-align:-3.9501em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M403 1759 V84 H666 V0 H319 V1759 v4800 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M347 1759 V0 H0 V84 H263 V1759 v4800 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>绕 z 轴旋转：</p><p>绕 Z 轴旋转，就是 XY 平面内的旋转，像旋转一个二维平面上的向量一样。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">R_z(\theta) =\begin{bmatrix}\cos\theta &amp; -\sin\theta &amp; 0 &amp; 0 \\\\\sin\theta &amp; \cos\theta  &amp; 0 &amp; 0 \\\\0          &amp; 0           &amp; 1 &amp; 0 \\\\0          &amp; 0           &amp; 0 &amp; 1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:8.4001em;vertical-align:-3.9501em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M403 1759 V84 H666 V0 H319 V1759 v4800 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.45em;"><span style="top:-6.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.95em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.4499em;"><span style="top:-6.4499em;"><span class="pstrut" style="height:10.4em;"></span><span style="width:0.667em;height:8.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="8.400em" viewbox="0 0 667 8400"><path d="M347 1759 V0 H0 V84 H263 V1759 v4800 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v4800 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.9501em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="40-gpu-driven-rendering">40. GPU Driven Rendering</h2><ul><li>概念：GPU Driven Rendering 是一种渲染架构，其中渲染管线的关键调度逻辑（如实例剔除、批次生成、Draw Call 构建）由 GPU 而不是 CPU 来完成。 使用 GPU Driven 后，CPU 只需上传一次数据，后续全部由 GPU 自主驱动完成。</li><li>流程：<ul><li>场景数据全部上传 GPU<ul><li>Mesh、Transform、材质、LOD、剔除信息、包围盒</li><li>存入 SSBO / StructuredBuffer / Texture Buffer</li></ul></li><li>Compute Shader 执行剔除 + 可见性检测<ul><li>视锥剔除（Frustum Culling）</li><li>LOD 判断（根据距离或屏幕大小）</li><li>Occlusion Culling（GPU 压栈）</li></ul></li><li>生成 Indirect DrawCommand<ul><li>使用 glDrawIndirect() 或 vkCmdDrawIndirect() 等方式</li><li>动态生成渲染命令，不走 CPU</li></ul></li><li>真正渲染<ul><li>GPU 直接使用 Indirect Buffer 来执行渲染</li></ul></li></ul></li><li>优势：<ul><li>GPU 内部做并行剔除+渲染，减少 CPU-GPU 通信 少量 Command buffer + 低同步成本</li><li>更适合大型场景/海量实例 数百万实例也能流畅运行</li><li>动态内容更新效率更高 可结合 HZB、Instance Buffer 动态调整</li></ul></li><li>实现哪些功能？<ul><li>实例剔除：GPU 判断哪些实例在视野内，哪些可以跳过</li><li>LOD 自动切换：按照屏幕尺寸或距离，GPU 自主选择 LOD</li><li>遮挡剔除：使用 HZB 或 Z-buffer 进行可见性测试</li><li>批次生成（Draw Call 生成）：GPU 组装 Indirect Draw Buffer，供后续绘制</li><li>动态物体驱动：如粒子、草地、动画、布料等由 Compute 更新</li><li>海量实例绘制（百万级）：用 GPU Instancing/Cluster 渲染大规模对象</li><li>可见性反馈 / 更新：支持反馈机制（如物体加载、streaming）</li></ul></li></ul><h2 id="41-大世界场景需要注意哪些问题城市场景有什么优化思路">41. 大世界场景需要注意哪些问题/城市场景有什么优化思路？</h2><p>LOD（根据摄像机距离或屏幕空间大小动态选择不同精度模型，远的对象用低模，近的对象用高模）, 场景空间划分，CSM，剔除，纹理过多导致的带宽或者显存问题…</p><h2 id="42-gpu-实例化和静态批处理">42. GPU 实例化和静态批处理</h2><h3 id="1-gpu-实例化和静态批处理有什么区别各自有什么优劣">(1) GPU 实例化和静态批处理有什么区别，各自有什么优劣？</h3><p><strong>GPU 实例化（Instancing）</strong> 和 <strong>静态批处理（Static Batching）</strong> 都是用于减少绘制调用（Draw Call）以提升 GPU 渲染性能的技术，但它们适用的对象、原理和优劣点有很大差异。</p><ul><li><p>GPU 实例化（Instancing）：允许使用 <strong>一个 Draw Call</strong> 来渲染<strong>多个几何结构相同但变换、颜色、贴图等不同</strong>的对象。例如，绘制 1000 棵相同模型的树。又如草地、人群、粒子系统等，这些对象需要在每一帧中进行更新和渲染。</p><p>它依赖 GPU 特性，如：</p><ul><li><p><code>glDrawElementsInstanced</code>（OpenGL）</p></li><li><p><code>DrawMeshInstanced</code>（Unity）</p></li><li><p><code>ID3D11DeviceContext::DrawInstanced</code>（DirectX）</p></li><li><p>优点：</p><ul><li><strong>大幅减少 Draw Call 数量</strong>，适合大量重复物体</li><li>保留每个实例的独立变换、颜色等差异（通过 Instance Buffer）</li><li>动态物体可用</li></ul></li><li><p>缺点：</p><ul><li>模型必须相同（或结构非常相似）</li><li>不是所有平台/硬件都高效支持大量实例</li><li>每个实例仍有一定 GPU 成本（比如 instance ID 处理）</li></ul></li></ul></li><li><p>静态批处理（Static Batching）：多个静态（不动）物体在加载阶段或运行时被合并为<strong>一个大网格</strong>，作为一个整体发送到 GPU，从而通过<strong>减少顶点提交次数</strong>来优化性能。比如，10 个不动的建筑合并成一个大模型再绘制。</p><ul><li><p>优点：</p><ul><li><strong>非常适合静态场景（建筑、地形、道具等）</strong></li><li>内存消耗较低（合并后只需存一个网格）</li><li>在不支持 Instancing 的平台上也适用</li></ul></li><li><p>缺点：</p><ul><li>对象不能移动（Transform 变换代价大）</li><li>不能单独剔除（整体剔除或整体绘制）</li><li>合并过程会占用 CPU 和内存资源</li></ul></li></ul></li><li><p>对比总结</p></li></ul><table><thead><tr><th>特性</th><th>GPU 实例化</th><th>静态批处理</th></tr></thead><tbody><tr><td>对象是否可动</td><td>可以</td><td>不可以（静态）</td></tr><tr><td>是否共享网格数据</td><td>是</td><td>否（合并为新网格）</td></tr><tr><td>是否共享材质</td><td>是</td><td>是（需相同材质）</td></tr><tr><td>是否节省 Draw Call</td><td>是</td><td>是</td></tr><tr><td>内存消耗</td><td>较小（只要 instance buffer）</td><td>较大（合并生成新网格）</td></tr><tr><td>剔除粒度</td><td>可逐实例剔除（支持 GPU 剔除）</td><td>整体剔除</td></tr><tr><td>适用场景</td><td>大量重复物体、可动物体</td><td>静态场景、地图装饰</td></tr></tbody></table><h3 id="2-如何生成成千上万相同的对象">(2) 如何生成成千上万相同的对象？</h3><ul><li>通过<strong>实例化</strong>技术（Instancing / GPU Instance）实现大规模重复物体（如森林、士兵、粒子等）高效渲染</li><li>实例化（Instancing） 是一种 GPU 渲染优化技术，它允许使用同一个几何体模型，一次性高效绘制多个副本（实例），每个实例可以拥有不同的位置、缩放、颜色等属性。</li><li>例如在 OpenGL 中（其他图形 API 中也有），在不使用实例化的情况下，如果想画 1000 棵树，要调用 1000 次 <code>glDrawArrays</code> 或 <code>glDrawElements</code>，每次都要传模型数据和变换矩阵。使用实例化后只调用一次：<code>glDraw*Instanced(...)</code>，把所需的数据向 GPU 只上传一次，并对每个实例用不同变换矩阵。这样减少 CPU 到 GPU 通信开销。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">glDrawArraysInstanced</span>(...);<br><span class="hljs-built_in">glDrawElementsInstanced</span>(...);<br><span class="hljs-built_in">glVertexAttribDivisor</span>(attributeIndex, <span class="hljs-number">1</span>); <span class="hljs-comment">// 每实例变化一次</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="43-纹理贴图的压缩算法">43. 纹理贴图的压缩算法</h2><p>按平台支持/压缩方式/图像质量来分类。</p><hr><h3 id="1-dxtc-s3tcdirectx-texture-compression">(1) DXTC / S3TC（DirectX Texture Compression）</h3><ul><li>Windows 和主机平台最广泛使用的压缩格式。</li></ul><h4 id="代表算法">代表算法：</h4><table><thead><tr><th>名称</th><th>通道支持</th><th>压缩率</th><th>简介</th></tr></thead><tbody><tr><td><strong>DXT1</strong></td><td>RGB (无 alpha)</td><td>1:6（8 bpp → 4 bpp）</td><td>最常用，透明只支持 binary（1bit）</td></tr><tr><td><strong>DXT3</strong></td><td>RGBA (显式 alpha)</td><td>1:4（8 bpp → 8 bpp）</td><td>保留 alpha 通道精度，适合遮罩</td></tr><tr><td><strong>DXT5</strong></td><td>RGBA (渐变 alpha)</td><td>1:4</td><td>用 alpha 插值更平滑</td></tr></tbody></table><ul><li>OpenGL 里对应叫 <strong>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</strong> 等</li></ul><h3 id="2-etc-etc2ericsson-texture-compression">(2) ETC / ETC2（Ericsson Texture Compression）</h3><ul><li>用于 <strong>OpenGL ES / Android / 移动平台</strong></li></ul><table><thead><tr><th>名称</th><th>支持</th><th>简介</th></tr></thead><tbody><tr><td><strong>ETC1</strong></td><td>RGB</td><td>只支持 RGB，无 alpha，压缩率约 1:6</td></tr><tr><td><strong>ETC2</strong></td><td>RGBA</td><td>增强版，支持 alpha、sRGB、1/2 通道</td></tr></tbody></table><ul><li>安卓移动设备默认支持 ETC1/ETC2，适合贴图压缩。</li></ul><h3 id="3-astcadaptive-scalable-texture-compression">(3) ASTC（Adaptive Scalable Texture Compression）</h3><ul><li>现代设备推荐，支持最多特性</li></ul><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>可变分辨率块大小</td><td>4x4 ~ 12x12 任意块，质量 vs 空间可自由权衡</td></tr><tr><td>支持高通道、HDR</td><td>RGBA、RGBE、HDR、sRGB 均可</td></tr><tr><td>高压缩比 + 高质量</td><td>比 DXT/ETC 更清晰，占用更小</td></tr><tr><td>OpenGL 支持版本</td><td>OpenGL ES 3.2+, Vulkan, Apple GPU</td></tr></tbody></table><ul><li>被认为是“<strong>最先进的纹理压缩算法之一</strong>”</li></ul><h2 id="44-骨骼动画的实现">44. 骨骼动画的实现</h2><h2 id="45-opengl">45. OpenGL</h2><h3 id="1-glfw-是什么">(1) glfw 是什么</h3><p>用于创建 OpenGL / OpenGL ES / Vulkan 窗口、创建并管理 OpenGL 上下文和处理输入（键盘、鼠标、手柄等），支持多平台（Windows, macOS, Linux）。</p><h3 id="2-上下文是什么">(2) 上下文是什么</h3><p>是一块记录所有 OpenGL <strong>状态、资源、渲染命令</strong>的“执行环境”，包含着你创建的所有纹理、着色器、缓冲对象、状态机等信息。必须有一个激活的上下文，OpenGL 才能正常运行。</p><h3 id="3-opengl-与-opengles-区别">(3) opengl 与 openglES 区别</h3><p>OpenGL ES 是 OpenGL 的简化版本，专为移动设备和嵌入式系统设计，特性精简但高效，是 Android 和 WebGL 的图形基础。</p><h3 id="4-opengl-调试">(4) OpenGL 调试</h3><p><a href="https://learnopengl-cn.github.io/06%20In%20Practice/01%20Debugging/">https://learnopengl-cn.github.io/06 In Practice/01 Debugging/</a></p><p>把要检查的变量输入到 fragment 的颜色（如法线坐标、纹理坐标等）；glfw 上下文调试（回调函数）；renderdoc；四个角渲染上不同颜色的标志；Nvidia Nsight；让某些 fragment 偏红；…</p><h3 id="5-opengl-抖动阶段做了什么处理">(5) OpenGL 抖动阶段做了什么处理？</h3><ul><li><p>抖动（Dithering） 是指在将高精度颜色值输出为低精度（如 8-bit）时，通过<strong>引入微小的随机扰动或有序扰动</strong>，来减少量化引起的色带（banding）现象。在 片元着色器输出颜色、经过混合（Blending）、<strong>准备写入颜色缓冲时</strong>，OpenGL 会将 float 类型的颜色值转换为整数（如 float → 8-bit），在转换之前，根据当前启用的抖动方式，对颜色值加上细微扰动，这样在最终 8-bit 色彩空间中表现得更平滑，避免出现色带。</p></li><li><p>为什么需要抖动？<br>例如，有一个渐变从 0.0 到 1.0。如果用 8-bit 表示，只能表示 256 个值，这样在颜色变化缓慢的区域（例如天光、暗角、雾），就会出现明显色块（Color Banding）。而抖动能通过“模拟随机误差”的方式欺骗人眼，让过渡看起来更自然平滑。</p></li><li><p>glEnable(GL_DITHER) 默认启用；glDisable(GL_DITHER) 手动禁用</p></li></ul><h3 id="6-texturelod-的用法">(6) textureLod 的用法</h3><p><code>textureLod</code> 是 GLSL 中提供的一个纹理采样函数，允许显式地指定要采样的 Mipmap 层级 (Level of Detail - LOD)。常规的 <code>texture()</code> 函数会自动计算并选择合适的 Mipmap 层级。</p><ul><li><p><strong>用途</strong>：</p><ul><li><strong>精确控制 LOD</strong>：在某些特殊效果中，你可能不希望 GPU 自动计算 LOD，而是想强制从特定的 Mipmap 级别采样。例如，在实现景深效果时，模糊的远处物体可能需要从较高的 Mipmap 级别（更模糊的纹理版本）采样。</li><li><strong>调试 Mipmap</strong>：可以方便地逐级查看各个 Mipmap 层的内容，以确认 Mipmap 是否正确生成。</li><li><strong>避免自动计算的瑕疵</strong>：在某些边缘情况或特定视角下，自动 LOD 计算可能不完美，导致一些视觉瑕疵（如 Moiré pattern 的不完全消除，或不期望的模糊）。<code>textureLod</code> 可以绕过这个问题。</li><li><strong>非标准纹理过滤</strong>：在一些高级渲染技术中，如某些类型的光线追踪或自定义过滤方案，开发者可能需要自己计算 LOD 或直接指定。</li><li><strong>顶点着色器中的采样</strong>：在顶点着色器中，通常无法进行自动 LOD 计算（因为缺乏屏幕空间导数信息），如果需要在顶点着色器中从特定 Mipmap 级别采样，<code>textureLod</code> 就是必要的。</li></ul></li><li><p><strong>GLSL 语法</strong> (以 2D 纹理为例)：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-type">vec4</span> <span class="hljs-built_in">textureLod</span>(<span class="hljs-type">sampler2D</span> sampler, <span class="hljs-type">vec2</span> P, <span class="hljs-type">float</span> lod)<br></code></pre></td></tr></table></figure><ul><li><code>sampler2D sampler</code>: 纹理采样器 uniform 变量。</li><li><code>vec2 P</code>: 纹理坐标。</li><li><code>float lod</code>: 你要采样的 Mipmap 层级。这是一个浮点数。<ul><li>整数部分通常直接指定 Mipmap 级别（例如，0.0 表示基础级别，1.0 表示第一级 Mipmap，依此类推）。</li><li>对于 <code>textureLod</code>，其主要目的是选择一个<em>特定</em>的 Mipmap 级别进行采样。硬件通常会使用这个 <code>lod</code> 值来选择最接近的或者由该 <code>lod</code> 值指定的整数级别。GLSL 规范指出，如果 <code>lod</code> 是负数或大于最大定义的 mipmap 级别，结果是未定义的。</li></ul></li></ul></li><li><p>如果不提供 level (使用 <code>texture()</code> 函数)，GPU 如何知道要采样哪一层的 Mipmap 呢？</p></li></ul><p>当不显式提供 LOD（例如使用 <code>texture()</code>, <code>texture2D()</code>, <code>textureCube()</code> 等标准采样函数）时，GPU 会<strong>自动计算并选择最合适的 Mipmap 层级</strong>。这个过程主要发生在<strong>片元着色器中</strong>，依赖于以下机制：</p><ul><li><p><strong>屏幕空间导数 (Screen-Space Derivatives)</strong>：</p><ul><li>GPU 在处理片元时，通常以 2x2 的片元块 (quad) 并行处理。它可以<strong>比较同一个块中相邻片元的纹理坐标</strong>。</li><li>通过计算纹理坐标 <code>P</code> <strong>相对于屏幕空间 x 轴和 y 轴的变化率</strong>，得到导数：<ul><li><code>dFdx(P)</code>：纹理坐标 P 在屏幕空间 x 方向上的变化。</li><li><code>dFdy(P)</code>：纹理坐标 P 在屏幕空间 y 方向上的变化。</li></ul></li><li>这些导数告诉 GPU，<strong>当屏幕上的位置移动一个像素时，纹理坐标会改变多少</strong>。</li></ul></li><li><p><strong>计算细节级别 (Level of Detail - LOD / Lambda <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span>)</strong>:</p><ul><li>利用这些导数，GPU 可以估算出当前屏幕像素投影到纹理空间时所覆盖的区域大小（称为“纹理足迹”或 “footprint”）。</li><li>一个简化的思想是：<em>如果一个屏幕像素覆盖了纹理上很大一块区域（例如，物体离相机很远，纹理被 сильно 缩小），那么就需要使用较低分辨率的 Mipmap 层级（即 LOD 值较大，层级数也较大，例如 Mipmap level 3, 4 等更模糊的图像）。反之，如果一个屏幕像素只覆盖了纹理上很小一块区域或单个纹素（例如，物体离相机很近，纹理被放大或以原始大小显示），那么就需要使用较高分辨率的 Mipmap 层级（LOD 值较小，层级数也较小，例如 Mipmap level 0, 1）</em>。</li><li>GPU 会根据这个覆盖区域的大小计算出一个浮点数值，通常称为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> (lambda)。这个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值就代表了理想的 Mipmap 层级。一个常用的（非常简化的）计算公式雏形类似：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mo>≈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mtext>max</mtext><mo stretchy="false">(</mo><mtext>length</mtext><mo stretchy="false">(</mo><mtext>dFdx</mtext><mo stretchy="false">(</mo><mi>P</mi><mo>⋅</mo><mtext>textureSize</mtext><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>length</mtext><mo stretchy="false">(</mo><mtext>dFdy</mtext><mo stretchy="false">(</mo><mi>P</mi><mo>⋅</mo><mtext>textureSize</mtext><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\lambda \approx \log_2(\text{max}(\text{length}(\text{dFdx}(P \cdot \text{textureSize})), \text{length}(\text{dFdy}(P \cdot \text{textureSize}))))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord text"><span class="mord">max</span></span><span class="mopen">(</span><span class="mord text"><span class="mord">length</span></span><span class="mopen">(</span><span class="mord text"><span class="mord">dFdx</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">textureSize</span></span><span class="mclose">))</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">length</span></span><span class="mopen">(</span><span class="mord text"><span class="mord">dFdy</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">textureSize</span></span><span class="mclose">))))</span></span></span></span><br>（实际公式会更复杂并考虑各向异性等因素，<code>textureSize</code> 是纹理在 0 级 mipmap 的尺寸）。</li></ul></li><li><p><strong>纹理过滤参数的应用 (<code>GL_TEXTURE_MIN_FILTER</code>)</strong>:</p><ul><li>一旦计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值，GPU 会根据纹理对象设置的<strong>缩小过滤器 (<code>GL_TEXTURE_MIN_FILTER</code>)</strong> 来决定具体如何采样：<ul><li><strong>不使用 Mipmap 的过滤模式 (如 <code>GL_NEAREST</code>, <code>GL_LINEAR</code>)</strong>: GPU 只会从 Mipmap level 0 采样，并应用指定的近邻或线性过滤。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值在这种情况下不用于选择 Mipmap 级别。</li><li><strong>使用 Mipmap 的过滤模式</strong>:<ul><li><strong><code>GL_NEAREST_MIPMAP_NEAREST</code></strong>: GPU 选择与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值最接近的单个 Mipmap 层级，然后从该层级中使用近邻采样（取单个纹素）。</li><li><strong><code>GL_LINEAR_MIPMAP_NEAREST</code></strong>: GPU 选择与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值最接近的单个 Mipmap 层级，然后从该层级中使用线性插值采样（在该层级内对 2x2 纹素进行双线性过滤）。</li><li><strong><code>GL_NEAREST_MIPMAP_LINEAR</code> (三线性过滤的一种)</strong>: GPU 选择与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值相邻的<strong>两个</strong> Mipmap 层级。从这两个层级中分别使用近邻采样，然后根据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值的小数部分在这两个采样结果之间进行线性插值。</li><li><strong><code>GL_LINEAR_MIPMAP_LINEAR</code> (真正的三线性过滤)</strong>: GPU 选择与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值相邻的<strong>两个</strong> Mipmap 层级。从这两个层级中分别使用线性插值采样（即<strong>在每个选定的 Mipmap 层级内部进行双线性过滤</strong>），然后根据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值的小数部分在这<strong>两个双线性过滤结果之间进行线性插值</strong>。这是质量最高的 Mipmap 过滤方式，能提供最平滑的 LOD 过渡。</li></ul></li></ul></li></ul></li><li><p><strong>其他影响因素</strong>:</p><ul><li><code>glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_LOD_BIAS, bias)</code>: 可以给计算出来的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span> 值增加一个偏移量，从而整体上使纹理显得更清晰或更模糊。</li><li><code>GL_TEXTURE_MIN_LOD</code> 和 <code>GL_TEXTURE_MAX_LOD</code>: 可以限制 GPU 选择 Mipmap 层级的范围。</li></ul></li></ul><h3 id="7-opengl-的渲染管线">(7) OpenGL 的渲染管线</h3><ul><li><p><strong>应用程序阶段 (CPU 端)</strong></p><ul><li><strong>描述</strong>: 负责准备场景数据、加载模型和纹理、设置渲染状态、更新变换矩阵、以及发出 OpenGL 绘图指令（如 <code>glDrawArrays</code>, <code>glDrawElements</code>）。</li><li><strong>输出</strong>: 顶点数据、纹理数据、uniform 变量、绘图指令等被发送到 GPU。</li></ul></li><li><p><strong>顶点获取</strong></p><ul><li><strong>描述</strong>: GPU 根据应用程序的指令从<strong>顶点缓冲对象 (Vertex Buffer Objects, VBOs)</strong> 中读取顶点数据。<strong>顶点数组对象 (Vertex Array Objects, VAOs)</strong> 定义了这些顶点数据的结构和来源（即顶点属性如何从 VBOs 中解析）。</li><li><strong>输出</strong>: 单个顶点及其属性（位置、颜色、法线、纹理坐标等）。</li></ul></li><li><p><strong>顶点着色器 (Vertex Shader)</strong></p><ul><li><strong>类型</strong>: <strong>可编程阶段</strong>。</li><li><strong>描述</strong>: 这是管线中的第一个可编程阶段，为<strong>每个顶点</strong>执行一次。</li><li><strong>主要职责</strong>:<ul><li>对顶点位置进行坐标变换（例如，从模型空间变换到观察空间，再到裁剪空间，通常通过模型-视图-投影 (MVP) 矩阵完成）。</li><li>处理其他每顶点属性（例如，变换法线，传递或生成纹理坐标）。</li></ul></li><li><strong>必需输出</strong>: <code>gl_Position</code> (裁剪空间中的顶点位置)。</li><li><strong>可选输出</strong>: 其他 <code>out</code> 变量，用于将数据传递给后续阶段（如片元着色器）。</li></ul></li><li><p><strong>曲面细分着色器 (Tessellation Shaders) - 可选阶段</strong></p><ul><li><strong>类型</strong>: <strong>可编程阶段</strong>（由两个子着色器组成，以及一个固定功能阶段）。</li><li><strong>描述</strong>: 用于<strong>动态地增加或减少几何体的细节级别</strong>，将输入的图元“面片 (patch)”细分成更多的小图元。<ul><li><strong>曲面细分控制着色器 (Tessellation Control Shader, TCS)</strong>: 决定面片的细分程度（设置所谓的“曲面细分级别”），并可以修改控制点属性。</li><li><strong>图元生成器 (Primitive Generator - 固定功能)</strong>: 根据 TCS 输出的细分级别，在面片内部生成新的顶点和连接性，形成更小的图元（点、线、三角形）。</li><li><strong>曲面细分评估着色器 (Tessellation Evaluation Shader, TES)</strong>: 计算由图元生成器产生的新顶点的位置和其他属性。</li></ul></li><li><strong>用途</strong>: 创建平滑曲面、地形细节自适应等。</li></ul></li><li><p><strong>几何着色器 (Geometry Shader) - 可选阶段</strong></p><ul><li><strong>类型</strong>: <strong>可编程阶段</strong>。</li><li><strong>描述</strong>: 以完整的图元（点、线、三角形）作为输入。它可以：<ul><li>直接将输入图元传递到下一阶段。</li><li>修改输入图元。</li><li>丢弃输入图元。</li><li><strong>生成新的图元</strong>（例如，将点扩展为四边形，沿边挤出“鳍”来创建体积感）。</li></ul></li><li><strong>用途</strong>: 程序化生成几何体（如毛发、草叶）、几何体放大、创建阴影体（旧技术）等。</li></ul></li><li><p><strong>图元组装 (Primitive Assembly)</strong></p><ul><li><strong>类型</strong>: 固定功能为主。</li><li><strong>描述</strong>: 将顶点着色器（或曲面细分评估着色器、几何着色器）输出的顶点按照指定的绘图模式（如 <code>GL_TRIANGLES</code>, <code>GL_LINES</code>）组装成图元（三角形、线段、点）。</li></ul></li><li><p><strong>裁剪 (Clipping)</strong></p><ul><li><strong>类型</strong>: 固定功能。</li><li><strong>描述</strong>: 将完全或部分位于<strong>裁剪空间 (Clip Space)</strong> 视景体之外的图元进行裁剪或剔除。裁剪过程可能会在图元与裁剪平面相交处生成新的顶点。裁剪空间通常由顶点着色器输出的 <code>gl_Position</code> 的 x, y, z 分量相对于其 w 分量来定义（通常范围是 -w 到 +w）。</li></ul></li><li><p><strong>透视除法 (Perspective Divide)</strong></p><ul><li><strong>类型</strong>: 固定功能。</li><li><strong>描述</strong>: 裁剪后的顶点坐标（裁剪空间坐标 <code>gl_Position.xyzw</code>）通过除以其 <code>w</code> 分量，转换为<strong>归一化设备坐标 (Normalized Device Coordinates, NDC)</strong>。NDC 的 x, y, z 分量通常在 <code>[-1, 1]</code> 的范围内。</li></ul></li><li><p><strong>视口变换 (Viewport Transform)</strong></p><ul><li><strong>类型</strong>: 固定功能。</li><li><strong>描述</strong>: 将 NDC 坐标映射到<strong>窗口坐标 (Window Coordinates)</strong> 或屏幕像素坐标。这个变换基于 <code>glViewport()</code> 和 <code>glDepthRange()</code> 的设置。</li></ul></li><li><p><strong>光栅化 (Rasterization)</strong></p><ul><li><strong>类型</strong>: 固定功能。</li><li><strong>描述</strong>: 将（经过变换和裁剪后的）几何图元（现在处于屏幕空间）转换为一系列的<strong>片元 (Fragments)</strong>。片元是对应屏幕上一个像素的候选“样本”，它携带了位置信息以及从顶点属性插值而来的数据（如颜色、纹理坐标、法线等）。</li><li><strong>插值</strong>: 顶点属性（如颜色、纹理坐标）会在此阶段进行透视校正插值，以供片元着色器使用。</li></ul></li><li><p><strong>片元着色器 (Fragment Shader)</strong></p><ul><li><strong>类型</strong>: <strong>可编程阶段</strong>。</li><li><strong>描述</strong>: 为光栅化阶段生成的<strong>每个片元</strong>执行一次（如果启用了多重采样，则可能每个像素的每个样本执行一次）。</li><li><strong>主要职责</strong>: 计算片元的最终颜色。</li><li><strong>输入</strong>: 从光栅化阶段接收插值后的顶点属性（例如，纹理坐标、法线、颜色）。</li><li><strong>操作</strong>: 可以进行纹理采样、光照计算、应用雾效以及其他任何逐片元的视觉效果。</li><li><strong>输出</strong>: 一个或多个颜色值（用于写入颜色缓冲区，支持多渲染目标 MRT），也可以选择性地写入深度值 (<code>gl_FragDepth</code>)，或者通过 <code>discard</code> 指令丢弃该片元。</li></ul></li><li><p><strong>逐片元操作 (Per-Fragment Operations)</strong></p><ul><li><strong>类型</strong>: 固定功能为主，但行为可配置。</li><li><strong>描述</strong>: 在片元着色器执行之后，但在片元最终写入帧缓冲之前，会进行一系列测试和操作。这些操作可以决定片元是否被丢弃，或者它如何与帧缓冲中已有的值组合。</li><li><strong>顺序通常是 (具体顺序和可用性可能因实现和版本而略有不同)</strong>：<ul><li><strong>像素所有权测试 (Pixel Ownership Test)</strong>: 确定像素是否属于当前的 OpenGL 上下文。</li><li><strong>剪裁测试 (Scissor Test)</strong>: (<code>glEnable(GL_SCISSOR_TEST)</code>) 如果启用，丢弃位于剪裁矩形之外的片元。</li><li><strong>模板测试 (Stencil Test)</strong>: (<code>glEnable(GL_STENCIL_TEST)</code>) 将片元的模板参考值与模板缓冲区中的值进行比较，并根据比较结果和预设操作来更新模板缓冲区。片元可能因此被丢弃。</li><li><strong>深度测试 (Depth Test / Z-Test)</strong>: (<code>glEnable(GL_DEPTH_TEST)</code>) 将片元的深度值与深度缓冲区中的值进行比较。如果片元被遮挡（例如，比已存深度更远），则被丢弃。<strong>Early-Z 测试</strong>如果条件允许，可能在片元着色器之前进行；否则，标准的深度测试（有时称为 Late-Z）在此处进行。</li><li><strong>混合 (Blending)</strong>: (<code>glEnable(GL_BLEND)</code>) 如果启用，将传入片元的颜色与颜色缓冲区中已有的颜色根据混合因子和混合方程进行组合（例如，用于实现透明效果）。</li><li><strong>抖动 (Dithering)</strong>: (<code>glEnable(GL_DITHER)</code>) 如果启用，可以通过抖动来模拟更丰富的颜色（在颜色精度有限的显示器上）。</li><li><strong>逻辑操作 (Logic Operations)</strong>: (较少使用) 可以对传入片元颜色和颜色缓冲区中的颜色执行位逻辑操作。</li></ul></li></ul></li><li><p><strong>帧缓冲写入 (Framebuffer Write)</strong></p><ul><li><strong>描述</strong>: 通过了所有测试的片元最终会被写入到当前绑定的<strong>帧缓冲对象 (Framebuffer Object, FBO)</strong> 的相应缓冲区中（一个或多个颜色附件、深度附件、模板附件）。</li><li>可以通过颜色掩码 (<code>glColorMask</code>) 和深度掩码 (<code>glDepthMask</code>) 控制具体哪些分量被写入。</li></ul></li></ul><h3 id="8-mvp-变换">(8) MVP 变换</h3><ul><li><p>顶点着色器接收的原始顶点位置通常定义在<strong>模型空间 (Model Space)</strong> （模型的局部坐标系）。</p></li><li><p><strong>模型变换 (Model Transform)</strong>：通过乘以一个<strong>模型矩阵 (Model Matrix)</strong>，顶点从模型空间变换到<strong>世界空间 (World Space)</strong>。世界空间是一个统一的坐标系，场景中的所有物体都相对于这个空间定位。</p></li><li><p><strong>视图变换 (View Transform)</strong>：接着，通过乘以一个<strong>视图矩阵 (View Matrix)</strong>，顶点从世界空间变换到<strong>观察空间 (View Space)</strong>。观察空间是以摄像机为原点和参考方向的坐标系。</p></li><li><p><strong>投影变换 (Projection Transform)</strong>：最后，通过乘以一个<strong>投影矩阵 (Projection Matrix)</strong>，顶点从观察空间变换到<strong>裁剪空间 (Clip Space)</strong>。<strong>投影矩阵定义了摄像机的视锥体</strong>（在观察空间中的可视范围），并将这个视锥体内<strong>映射到一个规范的、通常是立方体的裁剪空间中</strong>，这个目标空间就是裁剪空间。投影可以是：</p><ul><li><strong>透视投影 (Perspective Projection)</strong>：模拟人眼的近大远小效果，视锥体是棱锥台。</li><li><strong>正交投影 (Orthographic Projection)</strong>：所有平行线在投影后保持平行，常用于 2D 渲染或工程制图，视锥体是长方体。</li></ul></li><li><p><strong><code>gl_Position</code> 输出</strong>:<br>在顶点着色器中，计算得到的最终裁剪空间坐标（是一个 <code>vec4</code> 类型的齐次坐标 <code>(x, y, z, w)</code>）必须赋值给内置的输出变量 <code>gl_Position</code>。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// 在顶点着色器中</span><br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> bactériesPosition_modelSpace; <span class="hljs-comment">// 模型空间顶点位置</span><br><span class="hljs-comment">// ... 其他属性 ...</span><br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> u_ModelMatrix;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> u_ViewMatrix;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> u_ProjectionMatrix;<br><br><span class="hljs-type">void</span> main() &#123;<br>    <span class="hljs-type">vec4</span> position_worldSpace = u_ModelMatrix * <span class="hljs-type">vec4</span>(bactériesPosition_modelSpace, <span class="hljs-number">1.0</span>);<br>    <span class="hljs-type">vec4</span> position_viewSpace = u_ViewMatrix * position_worldSpace;<br>    <span class="hljs-built_in">gl_Position</span> = u_ProjectionMatrix * position_viewSpace; <span class="hljs-comment">// 输出到裁剪空间</span><br>    <span class="hljs-comment">// 或者直接： gl_Position = u_ProjectionMatrix * u_ViewMatrix * u_ModelMatrix * vec4(bactériesPosition_modelSpace, 1.0);</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当顶点着色器（或者几何着色器/曲面细分着色器，如果有）输出了所有顶点的 <code>gl_Position</code> (裁剪坐标) 后，这些坐标会经过 OpenGL 管线中一系列固定的、不可编程（但可配置）的阶段进行处理：</p><ul><li><p><strong>图元组装 (Primitive Assembly)</strong>：<br>来自顶点处理阶段的顶点被组装成指定的图元，如点、线段或三角形，这取决于你在绘制命令中指定的模式（例如 <code>GL_TRIANGLES</code>）。</p></li><li><p><strong>裁剪 (Clipping)</strong>：</p><ul><li><strong>目的</strong>：移除完全或部分位于<strong>裁剪视体 (Clip Volume)</strong> 之外的图元部分。裁剪视体通常是一个规范的立方体（在透视投影的上下文中，它是在透视除法之前定义的，例如，对于每个分量 <code>x, y, z</code>，其范围是 <code>-w</code> 到 <code>w</code>）。</li><li><strong>过程</strong>：<ul><li>完全在裁剪视体内部的图元会被保留。</li><li>完全在裁剪视体外部的图元会被丢弃。</li><li>与裁剪视体边界相交的图元会被裁剪。这意味着与边界相交的边会被切割，并可能生成新的顶点（其属性会根据原始顶点属性进行插值），以形成新的、完全位于裁剪视体内部的图元。</li></ul></li></ul></li><li><p><strong>透视除法 (Perspective Division)</strong>：</p><ul><li><strong>目的</strong>：将齐次裁剪坐标转换为<strong>归一化设备坐标 (Normalized Device Coordinates - NDC)</strong>。这个步骤实现了透视效果中的“近大远小”。</li><li><strong>过程</strong>：裁剪后的 <code>gl_Position</code> 的 <code>x</code>, <code>y</code>, <code>z</code> 三个分量分别除以其 <code>w</code> 分量。</li></ul><ul><li><strong>NDC 范围</strong>：经过透视除法后，所有在视锥体内的坐标都被映射到一个通常为 <code>[-1, 1]</code> 立方体的 NDC 空间中（<code>z</code> 分量的范围也可能是 <code>[0, 1]</code>，这取决于配置，例如通过 <code>glClipControl</code>）。</li></ul></li><li><p><strong>视口变换 (Viewport Transform)</strong>：</p><ul><li><strong>目的</strong>：将 NDC 坐标映射到屏幕坐标。</li><li><strong>过程</strong>：NDC 的 <code>x</code> 和 <code>y</code> 坐标（范围 <code>[-1, 1]</code>）会根据 <code>glViewport(x, y, width, height)</code> 函数设置的视口参数（指定了屏幕上渲染区域的左下角坐标和宽高）进行缩放和平移。NDC 的 <code>z</code> 坐标（范围 <code>[-1, 1]</code> 或 <code>[0, 1]</code>）会根据 <code>glDepthRange(nearVal, farVal)</code> 设置的深度范围（通常是 <code>[0, 1]</code>）进行映射。</li><li>这些窗口坐标将用于确定片元在屏幕上的最终位置。</li></ul></li></ul></li></ul><h2 id="46-超分算法">46. 超分算法</h2><h3 id="1-超分算法">(1) 超分算法</h3><ul><li>概念：通过插值、卷积或深度学习等方法重建出高分辨率图像的细节和边缘。</li><li>方法：<ul><li>传统插值方法：双线性、双立方插值等，效果有限</li><li>CNN 深度学习方法：如 SRCNN、ESPCN、EDSR，学会补全细节</li><li>实时图形超分：例如 FSR、DLSS，用于实时渲染图像增强</li></ul></li></ul><h3 id="2-实时图形超分算法real-time-super-resolution">(2) 实时图形超分算法（Real-time Super Resolution）</h3><p>这些算法能<strong>用低分辨率渲染图像 + 补充数据重建高分辨率输出</strong>，核心目标是“低成本获得高画质”。</p><ul><li><p>FSR（FidelityFX Super Resolution）</p><table><thead><tr><th>版本</th><th>原理</th><th>特点与适用场景</th></tr></thead><tbody><tr><td><strong>FSR 1.0</strong></td><td>空域超分（Spatial SR）</td><td>快速、轻量、无依赖，但边缘模糊</td></tr><tr><td><strong>FSR 2.0+</strong></td><td><strong>时域重建（Temporal SR）</strong></td><td>结合历史帧、深度、运动矢量，质量高</td></tr><tr><td>FSR 3</td><td>支持帧生成（类似 DLSS3）</td><td>添加帧插值，提升流畅度</td></tr></tbody></table><ul><li>特点：<ul><li>开源</li><li>不依赖 AI 模型或特定硬件</li><li>跨平台：PC / Console / Steam Deck</li></ul></li></ul></li><li><p>DLSS（NVIDIA Deep Learning Super Sampling）</p><table><thead><tr><th>版本</th><th>特性</th></tr></thead><tbody><tr><td>DLSS 1.0</td><td>早期 AI 超分，效果一般</td></tr><tr><td>DLSS 2.0</td><td>TSR + AI 反锯齿，高质量</td></tr><tr><td><strong>DLSS 3.0</strong></td><td>加入帧插值（Frame Generation）</td></tr></tbody></table><ul><li>特点：<ul><li>使用 NVIDIA 专用 Tensor Core 和 AI 模型</li><li>非开源，需 RTX GPU 支持</li><li>图像锐度、边缘清晰度好于 FSR</li></ul></li></ul></li><li><p>XeSS（Intel Xe Super Sampling）</p><ul><li>类似 DLSS，用 AI 重建图像</li><li>同时支持：<ul><li>AI 加速模式（Intel GPU）</li><li>通用模式（无 AI，用 SIMD 实现）</li></ul></li><li>效果介于 DLSS 和 FSR2 之间</li><li>适用于 ARC GPU / PC 平台</li></ul></li><li><p>TAAU（TAA + Upsample）</p><ul><li>Temporal Anti-Aliasing + Upscaling，由 Epic Games 提出（用于 UE4/5）</li><li>特点：<ul><li>基于传统 TAA + 运动矢量 + 抖动采样</li><li>效果接近 FSR2.0，但更轻量</li><li>开源免费，广泛应用于虚幻引擎项目</li></ul></li></ul></li><li><p>CAS + EASU（Contrast Adaptive Sharpening）</p><ul><li>FSR 1.0 的两个组件：<ul><li><strong>EASU（Edge Adaptive Spatial Upsample）</strong>：边缘感知放大算法</li><li><strong>CAS（Contrast Adaptive Sharpening）</strong>：锐化图像、增强细节</li></ul></li><li>非常适合移动端 / 轻量渲染 / UI 放大等场景。</li></ul></li><li><p>画质提升基本原理</p><ul><li><p>输入内容：</p><ul><li>当前帧低分图像（color）</li><li>历史帧图像</li><li>深度图（depth）</li><li>运动矢量（motion vectors）</li></ul></li><li><p>重建步骤：</p><ul><li>对历史像素进行重投影</li><li>利用当前帧+历史帧混合补全细节</li><li>检测抖动/鬼影并做反锯齿</li><li>高质量 Upscale 到目标分辨率<br>最后加锐化（可选）</li></ul></li></ul></li></ul><h2 id="47-vulkan-的同步机制">47. vulkan 的同步机制</h2><h2 id="48-vulkan-中的-fence-semaphorebarrier-有什么区别">48. Vulkan 中的 Fence、Semaphore，Barrier 有什么区别？</h2><h2 id="49-alpha-test">49. Alpha test</h2><ul><li><p><strong>Alpha Test</strong> 逐片元地根据片元的 alpha (α) 值与一个预设的参考 alpha 值进行比较，来决定是否<strong>完全丢弃</strong>该片元，从而不将其写入帧缓冲或深度缓冲。简单来说，它是一种实现“要么完全不透明，要么完全透明”的硬边缘效果的技术，而不是平滑的半透明效果。</p></li><li><p><strong>工作机制：</strong></p><p>Alpha 测试通常包含两个主要部分：</p><ul><li><p><strong>Alpha 函数 (Alpha Function)</strong>：定义了如何将片元的 alpha 值与参考 alpha 值进行比较。常见的函数有：</p><ul><li><code>GL_NEVER</code>: 永不通过 (所有片元都被丢弃)。</li><li><code>GL_LESS</code>: 如果片元 alpha &lt; 参考 alpha，则通过。</li><li><code>GL_EQUAL</code>: 如果片元 alpha = 参考 alpha，则通过。</li><li><code>GL_LEQUAL</code>: 如果片元 alpha ≤ 参考 alpha，则通过。</li><li><code>GL_GREATER</code>: 如果片元 alpha &gt; 参考 alpha，则通过 (最常用的函数之一)。</li><li><code>GL_NOTEQUAL</code>: 如果片元 alpha ≠ 参考 alpha，则通过。</li><li><code>GL_GEQUAL</code>: 如果片元 alpha ≥ 参考 alpha，则通过。</li><li><code>GL_ALWAYS</code>: 始终通过 (等同于禁用 Alpha Test)。</li></ul></li><li><p><strong>参考 Alpha 值 (Reference Alpha Value)</strong>：这是一个由开发者设定的阈值（通常在 [0, 1] 范围内），用于与片元的 alpha 值进行比较。</p></li></ul></li><li><p>**流程：**对于每个即将被渲染的片元，其 alpha 值会从纹理、顶点颜色或其他计算中得出。然后，这个 alpha 值会与设定的参考 alpha 值根据选定的 Alpha 函数进行比较。</p><ul><li><strong>如果比较结果为“真” (Pass)</strong>：片元通过测试，并继续在图形渲染管线中进行后续处理（例如，深度测试、写入颜色缓冲等）。</li><li><strong>如果比较结果为“假” (Fail)</strong>：片元被<strong>丢弃 (discarded)</strong>。这意味着该片元不会对颜色缓冲或深度缓冲产生任何影响。它就像从未存在过一样。</li></ul></li><li><p><strong>目的和用途：</strong></p><p>Alpha 测试的主要目的是在<strong>不使用复杂几何模型</strong>的情况下，创建出具有<strong>锐利、不规则边缘</strong>的透明效果，常用于：</p><ul><li><strong>植被/树叶 (Foliage)</strong>：用一个简单的四边形贴上带有树叶图案和透明背景的纹理，通过 Alpha Test 丢弃透明背景部分，只渲染树叶。</li><li><strong>栅栏、网格、铁丝网 (Fences, Grates)</strong>：同样使用带有孔洞图案的纹理。</li><li><strong>精灵图 (Sprites)</strong>：例如，游戏中角色的 2D 图像，其轮廓不规则，背景透明。</li><li><strong>贴花 (Decals)</strong>：需要透明背景的贴图。</li><li><strong>某些特效</strong>：如火焰或烟雾的硬边缘部分（尽管这些通常更多地使用 Alpha Blending）。</li></ul></li><li><p><strong>Alpha Test 与 Alpha Blending 的区别：</strong></p><p>两种不同的透明处理技术：</p><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">Alpha Test</th><th style="text-align:left">Alpha Blending</th></tr></thead><tbody><tr><td style="text-align:left"><strong>效果</strong></td><td style="text-align:left">硬边缘，二进制透明 (完全可见或完全不可见)</td><td style="text-align:left">平滑边缘，半透明 (部分可见)</td></tr><tr><td style="text-align:left"><strong>片元处理</strong></td><td style="text-align:left">丢弃不通过测试的片元</td><td style="text-align:left">将片元颜色与帧缓冲中已有的颜色根据 alpha 值混合</td></tr><tr><td style="text-align:left"><strong>深度写入</strong></td><td style="text-align:left">不通过测试的片元不写入深度缓冲</td><td style="text-align:left">通常会写入深度缓冲 (除非特殊设置)，但可能导致排序问题</td></tr><tr><td style="text-align:left"><strong>渲染顺序</strong></td><td style="text-align:left"><strong>顺序无关 (Order-Independent)</strong></td><td style="text-align:left"><strong>顺序相关 (Order-Dependent)</strong>，透明物体通常需要从后向前渲染</td></tr><tr><td style="text-align:left"><strong>复杂度</strong></td><td style="text-align:left">概念和实现相对简单</td><td style="text-align:left">需要考虑混合方程和渲染顺序</td></tr></tbody></table><p>这里注意到 Alpha test 是顺序无关而 Alpha blending 是顺序相关的，需要从后向前渲染透明物体。这也是为什么延迟渲染不支持透明物体，因为 G-Buffer 无法正确处理透明物体的多层叠加效果。透明物体的正确渲染需要：排序（从远到近）；逐片元混合 (Blending) ，即需要知道多个重叠片元的信息。而延迟渲染 G-Buffer，每个像素只存最近的一个片元；后面的透明片元信息会被深度测试丢弃。</p></li><li><p><strong>在现代图形 API 中的状态：</strong></p><ul><li><p><strong>旧版 OpenGL (固定管线)</strong>：Alpha Test 是一个固定的管线状态，通过 <code>glEnable(GL_ALPHA_TEST)</code> 启用，并使用 <code>glAlphaFunc(function, referenceValue)</code> 设置比较函数和参考值。</p></li><li><p><strong>现代 OpenGL (核心模式, Core Profile) / Vulkan / Metal / DirectX 10+</strong>：传统的固定功能 Alpha Test <strong>已被废弃或移除</strong>。取而代之的是在<strong>片元着色器 (Fragment Shader)</strong> 中手动实现此逻辑。</p><ul><li><p>在 GLSL (OpenGL Shading Language) 中，通常这样做：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">// 在片元着色器中</span><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> ourTexture;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">float</span> alphaThreshold; <span class="hljs-comment">// 参考 alpha 值</span><br><br><span class="hljs-keyword">in</span> <span class="hljs-type">vec2</span> TexCoords;<br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> FragColor;<br><br><span class="hljs-type">void</span> main() &#123;<br>    <span class="hljs-type">vec4</span> texColor = <span class="hljs-built_in">texture</span>(ourTexture, TexCoords);<br>    <span class="hljs-keyword">if</span> (texColor.a &lt; alphaThreshold) &#123; <span class="hljs-comment">// 例如，使用 LESS 函数的逻辑</span><br>        <span class="hljs-keyword">discard</span>; <span class="hljs-comment">// 丢弃片元</span><br>    &#125;<br>    FragColor = texColor;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 HLSL (High-Level Shading Language for DirectX) 中，可以使用 <code>clip()</code> 函数或类似的 <code>discard</code> 逻辑。</p></li></ul></li></ul></li><li><p><strong>优点：</strong></p><ul><li>实现简单，尤其是在旧的固定管线中。</li><li>渲染顺序无关，避免了 Alpha Blending 的排序问题。</li><li>被丢弃的片元不会写入深度缓冲，这意味着它们不会错误地遮挡后面的物体。</li></ul></li><li><p><strong>缺点：</strong></p><ul><li>由于是硬切割，边缘可能会出现锯齿（走样），特别是在低分辨率或近距离观察时。可以使用抗锯齿技术（如 MSAA）来缓解，但效果有限。</li><li>无法实现平滑的半透明过渡效果。</li></ul></li></ul><h2 id="50-early-z-和-pre-z-pass">50. early-z 和 pre-z pass</h2><h3 id="1-early-z">(1) Early-Z</h3><ul><li><p>Early-Z 是一种现代 GPU 硬件特性。它允许 GPU <strong>在执行片元着色器 (Fragment Shader) 之前</strong>，对片元进行深度测试。</p><ul><li>当一个图元（如三角形）被光栅化成一系列片元后，GPU 会获取每个片元的深度值。</li><li>在片元着色器执行之前，GPU 会将该片元的深度值与深度缓冲 (Depth Buffer) 中对应位置已存储的深度值进行比较。</li><li>如果深度测试表明该片元被之前渲染的物体所遮挡（即它的深度值大于或等于深度缓冲中的值，具体取决于深度测试函数），那么这个片元就会被<strong>立即丢弃</strong>。而传统的渲染管线是先进入片元着色器，计算出该片元的颜色，再进行深度测试等。等于说省去了计算颜色的过程。</li><li><strong>关键点</strong>：对于被 Early-Z 剔除的片元，其对应的片元着色器<strong>根本不会被执行</strong>。而只有片元着色器才能决定是否写入深度缓冲，Early-Z 不能最终决定是否写入深度缓冲。</li></ul></li><li><p><strong>好处</strong></p><ul><li><strong>显著节省计算资源</strong>: 片元着色器通常是渲染管线中计算量最大的部分之一，包含了光照、纹理采样、阴影计算等复杂逻辑。避免为被遮挡的片元执行着色器可以大幅减少 GPU 的计算负载。<ul><li><strong>减少带宽占用</strong>: 不执行片元着色器也意味着不需要为这些被遮挡的片元去读取纹理数据，也不需要将颜色结果写回帧缓冲。</li><li><strong>提高帧率</strong>: 尤其是在有大量重叠（overdraw）和复杂片元着色器的场景中，Early-Z 能有效提高渲染性能。</li></ul></li></ul></li><li><p><strong>限制</strong></p><ul><li><p><strong>片元着色器行为</strong>:</p><ul><li><strong>不能修改深度</strong>: 如果片元着色器显式写入深度值 (例如，在 GLSL 中写入 <code>gl_FragDepth</code>)，Early-Z 通常会被禁用，因为 GPU 无法在着色器执行前知道最终的深度值。</li><li><strong>Alpha Test / <code>discard</code> / <code>clip</code></strong>: 如果片元着色器使用了 Alpha Test (旧固定管线功能) 或者在 shader 中使用了 <code>discard</code> (GLSL) / <code>clip()</code> (HLSL) 指令来丢弃片元，情况会变得复杂。如果一个片元通过了早期深度测试（意味着它可见），但随后在片元着色器中被 <code>discard</code>，它就不会更新深度缓冲。这可能导致后续本应被它遮挡的片元错误地通过深度测试并被渲染。现代 GPU 对此有一定的处理能力，例如允许即使 <code>discard</code> 也写入深度（或者有特殊的交互模式），但通常来说，修改片元覆盖率或深度值的操作会使 Early-Z 失效或效果减弱。注意只有片元着色器才能写入深度缓存，early-z 时期不能决定最终写入深度缓冲。</li><li>不透明物体由远往近渲染，early-z 将没有任何优化效果。在渲染前，将不透明物体从近往远渲染的话，Early-Z 能发挥最大的性能优化（可以让 cpu 将物体按照由近到远的顺序排好，再交付给 GPU 进行渲染），但是如果是复杂的场景，CPU 性能消耗很大，严格按照由近到远的顺序渲染，将不能同时搭配批处理优化手段。有没有其他方法？ -&gt;pre-z</li></ul></li><li><p>渲染状态：没有会干扰早期深度测试的特殊渲染状态（例如，某些混合模式如果依赖于先执行片元着色器才能确定深度写入行为，也可能受影响）。</p></li></ul></li></ul><h3 id="2-pre-z-pass">(2) Pre-Z Pass</h3><p>Pre-Z Pass 是一种渲染<strong>技术</strong>（而不是硬件特性），它在主要的颜色渲染遍 (Color Pass) <strong>之前</strong>增加一个额外的、专门的渲染遍，其唯一目的是预先填充（或“预热”）深度缓冲。通常，如果一个场景从前向后绘制不透明物体，Early-Z 即使没有 Pre-Z Pass 也能发挥一定作用，因为深度缓冲会逐步被近处的物体填充。但如果绘制顺序混乱，或者场景非常复杂，Pre-Z Pass 就能通过预先建立一个“干净”的深度轮廓，来显著提高 Early-Z 在主颜色渲染通道中的效率。</p><ul><li><p>流程</p><ul><li><strong>第一遍 (Pre-Z Pass)</strong>:<ul><li>渲染场景中所有不透明的几何体。</li><li><strong>禁用颜色写入</strong>: 通过 API 设置，例如 <code>glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE)</code>。这样片元着色器的颜色输出会被忽略，不会写入颜色缓冲。</li><li><strong>启用深度写入</strong>: 确保深度测试和深度写入都已开启，例如 <code>glDepthMask(GL_TRUE)</code>。</li><li><strong>简化着色器</strong>: 在这一遍中，可以使用一个非常简单的甚至为空的片元着色器，因为不需要计算颜色。顶点着色器仍然需要正常工作以进行顶点变换。</li></ul></li><li><strong>第二遍 (Main Color Pass)</strong>:<ul><li>正常渲染场景中的几何体，进行完整的颜色计算（光照、纹理等）。</li><li>此时，深度缓冲已经包含了场景中大部分遮挡信息。</li><li>关闭深度写入，<strong>深度测试函数通常设为“等于” (GL_EQUAL) 或“小于等于” (GL_LEQUAL)</strong>。如果设为 <code>GL_EQUAL</code>，则只有那些在 Pre-Z Pass 中写入了深度的片元（即最表层的片元）才会执行其片元着色器。如果设为 <code>GL_LEQUAL</code>，则会正常进行深度测试，但由于深度缓冲已经被预填充，Early-Z 的效率会非常高。</li></ul></li></ul></li><li><p>好处</p><ul><li><strong>最大化 Early-Z 的效果</strong>: Pre-Z Pass 的主要目的是为后续的颜色渲染遍提供一个“完美”的深度缓冲，使得 Early-Z 能够剔除尽可能多的被遮挡片元。</li><li><strong>显著减少 Overdraw</strong>: 即使渲染顺序不是从前到后，Pre-Z Pass 也能确保在颜色遍中，只有那些最终可见的片元（或至少是那些在 Pre-Z Pass 中可见的片元）才需要执行昂贵的片元着色器。</li><li><strong>改善复杂场景性能</strong>: 对于具有大量物体和复杂遮挡关系的场景，效果尤为明显。</li><li>z-pre pass 也是透明渲染的一种方案（<a href="https://zhuanlan.zhihu.com/p/553445129%EF%BC%89%EF%BC%8C3%E4%B8%AApass%EF%BC%9A">https://zhuanlan.zhihu.com/p/553445129），3个pass：</a><ul><li>pass1：处理不透明部分<br>开启 Alpha test，仅通过不透明的像素；<br>关闭背面剔除；<br>开启深度写入，设置深度测试为 LESS/LEQUAL</li><li>pass2：处理透明部分的背面<br>开启 Alpha test 仅通过透明的像素；<br>剔除正面；<br>关闭深度写入，设置深度测试为 LESS/LEQUAL</li><li>pass3：处理透明部分的正面<br>开启 Alpha test 仅通过透明的像素；<br>剔除背面;<br>开启深度写入，设置深度测试为 LESS/LEQUAL - 问题：会带来非常多 OverDraw 的问题 - 解决-&gt;使用 Early-Z 剔除-&gt;透明度测试开启时 Early-Z 无法使用的解决方案：使用一个简单的 shader 进行透明度测试形成 Z-Buffer，即添加一个 pre-z pass 在最前面，其他 pass 不变。</li><li>pass1：准备 Z-Buffer<br>开启透明度测试只通过不透明的像素<br>关闭背面剔除<br>开启深度写入，深度测试设置为 LESS/LEQUAL<br>关闭颜色缓冲区写入<br>用一个只返回透明度的简单片元着色器</li></ul></li></ul></li><li><p>代价</p><ul><li><strong>额外的绘制调用</strong>: 需要对场景中的几何体进行两次绘制（一次 Pre-Z Pass，一次 Color Pass），这会增加 CPU 开销（提交绘制调用）和 GPU 的顶点处理开销。</li><li><strong>权衡</strong>: 只有当 Pre-Z Pass 节省的片元处理开销大于其带来的额外顶点处理和绘制调用开销时，这项技术才是有益的。通常对于片元着色器复杂、overdraw 严重的场景是划算的。</li></ul></li></ul><p>PS: 延迟渲染对比前向渲染+early-z &amp; pre-z pass 的优势（<a href="https://www.zhihu.com/question/1895926773939679270/answer/1896551553118229141%EF%BC%89">https://www.zhihu.com/question/1895926773939679270/answer/1896551553118229141）</a></p><h2 id="51-ecsentity-component-system的原理和实现">51. ECS（Entity-Component-System）的原理和实现</h2><ul><li><p>ECS 是一种将游戏对象数据与逻辑分离的架构，核心是：Entity 是纯 ID，Component 是纯数据，System 是纯逻辑，极大地提高了模块化、性能和并发性。</p></li><li><p>为什么 ECS？</p><ul><li><p>传统 OOP 模式中，类继承层次深、耦合高、不宜拓展。例如，有个物体既能移动又能发光。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Enemy</span> : <span class="hljs-keyword">public</span> GameObject &#123;<br>  <span class="hljs-type">int</span> health;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>ECS 则通过组合取代继承：</p><ul><li>Entity：一个 ID，不携带任何数据，用于唯一标识一个游戏对象</li><li>Component：纯数据结构（无逻辑），用于组织附加在实体上的数据（如 Transform、Velocity）。每个组件代表一个功能单元。例如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Transform</span> &#123; vec3 pos; &#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Velocity</span> &#123; vec3 vel; &#125;;<br></code></pre></td></tr></table></figure></li><li>System：对拥有特定组件的实体集合执行逻辑处理。例如：物理系统处理具有 Transform + Velocity 的实体。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PhysicsSystem</span><span class="hljs-params">(World&amp; world)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [e, trans, vel] : world.<span class="hljs-built_in">view</span>&lt;Transform, Velocity&gt;()) &#123;<br>    trans.pos += vel.vel \* deltaTime;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>ECS 的实现机制</p><ul><li>内存结构上：稀疏存储 + SoA（结构体数组） - 所有 Component<t> 存储在连续数组中，提高缓存命中率 - 每类组件独立存储（方便批处理）</t></li><li>Entity -&gt; Component 映射<ul><li>使用稀疏数组或哈希表管理 Entity-Component 映射关系</li></ul></li><li>System 会查询“拥有某些组件”的实体列表<ul><li>使用 bitmask 或 archetype 进行加速</li></ul></li></ul></li></ul><h2 id="51-主流图形-api-的特性和优劣">51. 主流图形 API 的特性和优劣</h2><table><thead><tr><th>特性</th><th>OpenGL</th><th>DirectX11</th><th>Vulkan</th><th>DirectX12</th><th>Metal</th></tr></thead><tbody><tr><td>编程模型</td><td>高级（状态机）</td><td>高级（状态机）</td><td>低级（命令驱动）</td><td>低级（命令驱动）</td><td>类 Vulkan（封装）</td></tr><tr><td>多线程性能支持</td><td>差</td><td>差</td><td>极好</td><td>极好</td><td>好</td></tr><tr><td>跨平台性</td><td>最好</td><td>仅 Windows</td><td>优秀</td><td>仅 Windows</td><td>仅 Apple</td></tr><tr><td>显存控制 / 显式资源管理</td><td>自动</td><td>自动</td><td>完全显式</td><td>完全显式</td><td>显式</td></tr><tr><td>编译时验证 / 管线状态封装</td><td>动态绑定</td><td>动态绑定</td><td>PSO 编译前验证</td><td>PSO 系统</td><td>类似 PSO</td></tr></tbody></table><h1 id="references">References</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/430541328">https://zhuanlan.zhihu.com/p/430541328</a></li><li><a href="https://zhuanlan.zhihu.com/p/577501864">https://zhuanlan.zhihu.com/p/577501864</a></li><li><a href="https://zhuanlan.zhihu.com/p/479490559">https://zhuanlan.zhihu.com/p/479490559</a></li><li><a href="https://zhuanlan.zhihu.com/p/410664823">https://zhuanlan.zhihu.com/p/410664823</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>interview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graphics Interviews Resources</title>
    <link href="/2025/03/29/graphics-interview/"/>
    <url>/2025/03/29/graphics-interview/</url>
    
    <content type="html"><![CDATA[<p>Time is like a wild donkey. It’s time to prepare for interviews again. Here, I just wanna summarize some useful resources I found.</p><h1 id="c">C++</h1><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzNTIxMjMyNg==&mid=2247503612&idx=1&sn=e61bd51c61280c367dceb363db2dda94&chksm=c390dccbdbf1c42da25106f3dbf40a9ed6c22eccbb8c83d4d7a2d964ab2bf5794d06b9de93fa&scene=126&sessionid=1743132859#rd"> Debug C++ with online tools and GPTs</a></p></li><li><p>A tool that provides a view into how the C++ compiler interprets and transforms source code: <a href="https://cppinsights.io/">https://cppinsights.io/</a></p></li></ul><h1 id="operating-systems">Operating Systems</h1><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzNTIxMjMyNg==&mid=2247491524&idx=1&sn=da687cba6ef316f15d2ab8c2940dc2f0&chksm=c2b03b8df5c7b29b883d9bbd264f67dcaa390b59529cb38bc403aecb8dc869a52b25fdde7933&scene=178&cur_album_id=1742549539124756481#rd"> Operating Sys 1</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzNTIxMjMyNg==&mid=2247491527&idx=1&sn=224ebb8ca8b8722a9fc99e40e0e51c07&chksm=c2b03b8ef5c7b298b62a0e86b5c015d7da2f525a5acab716db02984f4ee8c88f470360fa33ae&scene=178&cur_album_id=1742549539124756481#rd"> Operating Sys 2</a></p></li></ul><h1 id="graphics">Graphics</h1><ul><li>PBR renderer<ul><li><a href="https://www.zhihu.com/question/66022851/answer/2559739030">https://www.zhihu.com/question/66022851/answer/2559739030</a></li><li><a href="https://google.github.io/filament/Filament.html#imagingpipeline">https://google.github.io/filament/Filament.html#imagingpipeline</a></li></ul></li><li>Interesting Blogs<ul><li><a href="https://interplayoflight.wordpress.com/">https://interplayoflight.wordpress.com/</a></li></ul></li></ul><h1 id="ue">UE</h1><p>Some video tutorials.</p><p><a href="https://www.youtube.com/watch?v=P6kJq2n8DZA">https://www.youtube.com/watch?v=P6kJq2n8DZA</a></p><p><a href="https://www.youtube.com/watch?v=xCf3SEOEDAo">https://www.youtube.com/watch?v=xCf3SEOEDAo</a></p><p><a href="https://www.bilibili.com/video/BV1SKSiYEEZs/?vd_source=d5d1fc23c9f3d97a9b182ed5178e15cd">https://www.bilibili.com/video/BV1SKSiYEEZs/?vd_source=d5d1fc23c9f3d97a9b182ed5178e15cd</a></p><h1 id="design-patterns">Design Patterns</h1><ul><li><a href="https://gameprogrammingpatterns.com/contents.html"> Game Programming Patterns (book) </a></li></ul><h1 id="interview-experiences">Interview Experiences</h1>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>interview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L04-Transformation Cont.</title>
    <link href="/2025/03/23/GAMES101-L04-TransformationCont-makeup/"/>
    <url>/2025/03/23/GAMES101-L04-TransformationCont-makeup/</url>
    
    <content type="html"><![CDATA[<h1 id="view-camera-transformation-modelview-transformation">View / Camera Transformation (ModelView Transformation)</h1><p>To define a camera, we need 3 variables.</p><ul><li>Position <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>e</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span></li><li>Look at / gaze direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>g</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></li><li>Up direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>t</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8785em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8785em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">t</span></span><span style="top:-3.1841em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> (assuming perpendicular to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>g</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span>)</li></ul><p>For convenience, we always consider the camera to the origin, up at Y, look at <strong>-Z</strong>. And Transform the objects along with the camera. We define a matrix <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{view}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to transform the camera (at any possible positions) to our default state as described above.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{view}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> in math:</p><ul><li>Translate e to origin</li><li>Rotate g to -Z</li><li>Rotate t to Y</li><li>Rotate <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo>×</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">g \times t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> to X</li></ul><p>As shown in the figure below, since rotate a random axis to x/y/-z can be complex, we can first get the inverse matrix. Then since the rotation matrix is orthogonal matrix, its transpose matrix equals its inverse matrix. So we can easily get the rotation matrix we need.<br><img src="Mview.png" alt="Mview"></p><h1 id="projection-transformation">Projection Transformation</h1><h2 id="two-projections">Two projections</h2><ul><li>Prospective projection （透视投影）(causes “near big far small” phenomenon)</li><li>Orthographic projection (正交投影) (suppose the camera is at infinity)</li></ul><h2 id="orthographic-projection">Orthographic projection</h2><p><img src="ortho_proj.png" alt="orthographic projection" title="Orthographic Projection"><br>Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mo>&lt;</mo><mi>r</mi><mo separator="true">,</mo><mi>b</mi><mo>&lt;</mo><mi>t</mi><mo separator="true">,</mo><mi>f</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">l&lt;r, b&lt;t, f&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> because of looking at -Z, also that’s why openGL use left-handed coords).<br>To do so,</p><ul><li>Center the cuboid by translating.</li><li>Scale into canonical cube.</li></ul><p>In math orthographic projection matrix can be wriiten as:</p><p><img src="ortho_proj_mat.png" alt="orthographic projection matrix" title="Orthographic Projection Matrix"></p><h2 id="perspective-projection">Perspective projection</h2><ul><li>Further objects are smaller</li><li>Parellel lines are not parellel; converge to a single point</li></ul><p>We first convert perspective projection to orthographic projection, then perform orthographic projection.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi></mrow></msub><mo>=</mo><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><msub><mi>M</mi><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi><mo>−</mo><mo>&gt;</mo><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{persp} = M_{ortho}M_{persp-&gt;ortho}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">ers</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">ers</span><span class="mord mathnormal mtight">p</span><span class="mord mtight">−</span><span class="mrel mtight">&gt;</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>. More detailed explanations see <a href="https://www.zhyingkun.com/perspective/perspective/">https://www.zhyingkun.com/perspective/perspective/</a>.</p><p>To define the optic cone for perspective projection, we only need two factors: aspect ratio and fov.<br><img src="optic_cone.png" alt="optic cone" title="Optic Cone: FOV and Aspect Ratio"></p><p>The l, r, b, t previous mentioned in the orthographic projection can be calculated based on aspect ratio and fov. Here, |n| refers to the distance to the near plane.<br><img src="optic_cone_calc.png" alt="optic_cone_calc" title="Optic cone: calculation"></p><h1 id="summary-of-mvp">Summary of MVP</h1><ol><li><p>Model Transformation<br><strong>Purpose</strong>: Positions objects in the world. Transforms vertices from the object’s local space (model space) to world space.<br>Typical operations:<br>Translation (moving the object).<br>Rotation (rotating the object).<br>Scaling (resizing the object).</p><p>M = T⋅R⋅S<br>where T is translation, R is rotation, and S is scaling.</p></li><li><p>View Transformation<br><strong>Purpose</strong>: Positions the camera and orients it in the scene.<br>Transforms vertices from world space to camera space (or view space), as if the camera is at the origin.</p><p>V = Inverse of camera transformation matrix</p></li><li><p>Projection Transformation<br><strong>Purpose</strong>: Projects 3D points in camera space onto a 2D plane (screen space).<br>Converts vertices from camera space to clip space.<br>Two types of projection:<br>Orthographic Projection: Preserves sizes and parallel lines (used for CAD, 2D games, etc.) (cuboid to canonical cube <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">[-1, 1]^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>).<br>Perspective Projection: Mimics how the human eye sees, with objects farther away appearing smaller (frustum to canonical cube).<br>Example: Maps a frustum (a truncated pyramid for perspective projection) or a box (orthographic) onto the normalized device coordinates (NDC).</p><p>P = Projection matrix</p></li></ol><p><strong>About NDC</strong></p><ul><li><p>Range:</p><p>Coordinates are confined to a canonical cube: x, y ,z are in the range <code>[−1,1]</code>. After projection, this range represents the visible portion of the scene.</p></li><li><p>Purpose:</p><p>To standardize the coordinate space, regardless of the screen resolution or the aspect ratio of the viewport. Simplifies clipping and culling operations since only coordinates inside <code>[−1,1]</code> in all three dimensions are visible.</p></li><li><p>Coordinate Meaning:</p><p>x and y determine the 2D position on the screen relative to the viewport. z represents depth information, often used for depth testing to resolve which objects are in front of others.</p></li></ul><p><strong>Final Transformation</strong><br>The combined transformation matrix MVP is:</p><p>MVP = P⋅V⋅M</p><p>Applied to vertex coordinates v (in homogenous coordinates):<br>v’ = MVP ⋅ v</p><p>After applying MVP:</p><ul><li>The coordinates are in clip space.</li><li>Clip space coordinates are divided by their w-component to normalize them, resulting in NDC.</li><li>Finally, NDC is mapped to screen space using the viewport transformation.</li></ul><h1 id="whats-after-mvp">What’s after MVP?</h1><h2 id="canonical-cube-to-screen">Canonical Cube to Screen</h2><p><strong>Screen:</strong></p><ul><li>an array of pixels (pixel is short for picture element)</li><li>size of the array - resolution</li><li>a typical kind of raster display</li></ul><p><strong>Raster</strong></p><ul><li>rasterize == drawing onto the screen</li></ul><p><strong>Screen Space (屏幕空间)</strong><br><img src="screen_space.png" alt="Screen Space" title="Screen Space"><br>Here the definition is slightly different from the tiger book. Pixel (x, y) is centered at (x+0.5, y+0.5)</p><ul><li>Irrelevant to z</li><li>Transform in xy plane: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mn>2</mn></msup><mi>t</mi><mi>o</mi><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo stretchy="false">]</mo><mo>×</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-1, 1]^2 to [0, width] \times [0, height]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mclose">]</span></span></span></span></li><li>Viewport transform (视口变换) matrix:<br><img src="viewport_transform.png" alt="Viewport Transform" title="Viewport Transform"></li></ul><p>In fact, here we assume the viewport’s left-bottom is (0,0). More generally, our viewport matrix can be constructed according to the function below.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// @brief Viewport transformation matrix</span><br><span class="hljs-comment">/// @param x - x-coordinate of the viewport&#x27;s bottom-left corner</span><br><span class="hljs-comment">/// @param y - y-coordinate of the viewport&#x27;s bottom-left corner</span><br><span class="hljs-comment">/// @param w - width of the viewport</span><br><span class="hljs-comment">/// @param h - height of the viewport</span><br><span class="hljs-comment">/// @return - Viewport transformation matrix</span><br><span class="hljs-function">mat&lt;4, 4&gt; <span class="hljs-title">ViewPort</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> x, <span class="hljs-type">const</span> <span class="hljs-type">int</span> y, <span class="hljs-type">const</span> <span class="hljs-type">int</span> w, <span class="hljs-type">const</span> <span class="hljs-type">int</span> h)</span></span>&#123;<br>    <span class="hljs-comment">// Pixel (x, y) is centered at (x+0.5, y+0.5)</span><br>    <span class="hljs-comment">// x_screen = x + (x_ndc + 1) * 0.5 * width</span><br>    <span class="hljs-comment">// y_screen = y + (y_ndc + 1) * 0.5 * height</span><br>    <span class="hljs-comment">// Irrelevant to z</span><br>    <span class="hljs-comment">// Transform in xy plane, [-1, 1] -&gt; [0, width] and [0, height]</span><br>    mat&lt;<span class="hljs-number">4</span>, <span class="hljs-number">4</span>&gt; viewport = <span class="hljs-built_in">mat</span>&lt;<span class="hljs-number">4</span>, <span class="hljs-number">4</span>&gt;().<span class="hljs-built_in">identity</span>();<br>    viewport[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = w / <span class="hljs-number">2.0</span>; <span class="hljs-comment">// Calculate the value for the x-axis scaling based on width</span><br>    viewport[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = h / <span class="hljs-number">2.0</span>; <span class="hljs-comment">// Calculate the value for the y-axis scaling based on height</span><br>    viewport[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>] = x + w / <span class="hljs-number">2.0</span>; <span class="hljs-comment">// Calculate the value for the x-axis translation based on x-coordinate and width</span><br>    viewport[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] = y + h / <span class="hljs-number">2.0</span>; <span class="hljs-comment">// Calculate the value for the y-axis translation based on y-coordinate and height</span><br>    <span class="hljs-keyword">return</span> viewport;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - Differentiable Rasterization</title>
    <link href="/2025/02/26/CS8803-CGA-L12/"/>
    <url>/2025/02/26/CS8803-CGA-L12/</url>
    
    <content type="html"><![CDATA[<h2 id="depth-test">Depth Test</h2><p>In rasterization-based rendering, we use of a depth buffer to prevent triangles rendering in the front while they’re supposed to be behind other triangles.</p><h3 id="depth-buffer-z-buffer">Depth Buffer (Z Buffer)</h3><ul><li>The depth-buffer is a buffer that, just like the color buffer (that stores all the fragment colors: the visual output), stores information <em>per fragment</em> and has the same width and height as the color buffer.</li><li>When depth testing is enabled, OpenGL tests the depth value of a fragment against the content of the depth buffer. OpenGL performs a depth test and if this test passes, the fragment is rendered and the depth buffer is updated with the new depth value.</li><li>If the depth test fails, the fragment is discarded.</li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo>=</mo><mfrac><mrow><mi>z</mi><mo>−</mo><mi>n</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow><mrow><mi>f</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>n</mi><mi>e</mi><mi>a</mi><mi>r</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">depth = \frac{z-near}{far-near}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">pt</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2834em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8023em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h3 id="rasterization-with-depth-buffer">Rasterization with depth buffer</h3><ul><li>Project vertices to 2D image space</li><li>Rasterize triangle: find which pixels should be lit</li><li>Compute per-pixel color</li><li>Test visibility (Z-buffer), update frame buffer color</li></ul><p><img src="depth_buffer.png" alt="depth buffer"></p><h3 id="pseudocode-for-depth-test">Pseudocode for Depth Test</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> each triangle<br>    transform into eye space<br>    (perform projection)<br>    setup <span class="hljs-number">3</span> edge equations<br>    <span class="hljs-keyword">for</span> each pixel x,y<br>        <span class="hljs-keyword">if</span> passes <span class="hljs-built_in">all</span> edge equations<br>            compute z<br>            <span class="hljs-keyword">if</span> z&lt;zbuffer[x,y]<br>                zbuffer[x,y]=z<br>                framebuffer[x,y]=shade()<br></code></pre></td></tr></table></figure><p>We render the triangle’s color into this pixel only when its depth value is smaller than the depth in the current depth buffer</p><h2 id="alpha-blending">Alpha Blending</h2><ul><li>Blending in OpenGL is known as the technique to render transparent object.</li><li>Transparency is all about objects not having a solid color, but having a combination of colors from the object itself and any other object behind it with varying intensity.</li><li>A colored glass window is a transparent object; the glass has a color of its own, but the resulting color contains the colors of all the objects behind the glass as well.</li></ul><h3 id="alpha-channel">Alpha Channel</h3><ul><li>The amount of transparency of an object is defined by its color’s alpha value.</li><li>The alpha color value is the 4th component of a color vector</li><li>1.0 indicates completely opaque, 0.0 indicates completely transparent.</li><li>An alpha value of 0.5 tells us the object’s color consist of 50% of its own color and 50% of the colors behind the object.</li></ul><h3 id="naïve-implementation-discarding-fragments-in-the-shader">Naïve Implementation: Discarding Fragments in the Shader</h3><ul><li>In the <em>fragment shader</em>, we can check the alpha value of each fragment and decide to discard it if its alpha value is below a threshold (those parts with a really small alpha value are supposed to be transparent).</li></ul><p><img src="alpha_blending.png" alt="alpha blending algorithm from learnopengl"></p><h3 id="advanced-implementation-blending-with-alpha-value">Advanced Implementation: Blending with Alpha Value</h3><ul><li>While discarding fragments is great and all, it doesn’t give us the flexibility to render semi-transparent images; we either render the fragment or completely discard it.</li><li>To render images with different levels of transparency we have to enableblending, we can do <strong>glEnable(GL_BLEND)</strong> (turn on alpha blending in fragment shader in OpenGL).</li></ul><p>Then the shader will blend two colors based on the blending equation below.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi></mrow></msub><mo>=</mo><msub><mi>C</mi><mrow><mi>s</mi><mi>r</mi><mi>c</mi></mrow></msub><mo>∗</mo><msub><mi>α</mi><mrow><mi>s</mi><mi>r</mi><mi>c</mi></mrow></msub><mo>+</mo><msub><mi>C</mi><mrow><mi>d</mi><mi>s</mi><mi>t</mi></mrow></msub><mo>∗</mo><mi>α</mi><mrow><mi>d</mi><mi>s</mi><mi>t</mi></mrow></mrow><annotation encoding="application/x-tex">C_{result} = C_{src}*\alpha_{src} + C_{dst}*\alpha{dst}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">res</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">lt</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">src</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">src</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>s</mi><mi>r</mi><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{src}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">src</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: The source color vector. This is the color output of the fragment shader.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>d</mi><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C_{dst}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: The destination color vector. This is the color vector that is currently stored in the color buffer.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>α</mi><mrow><mi>s</mi><mi>r</mi><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\alpha_{src}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">src</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: The source factor value. Sets the impact of the alpha value on the source color.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mrow><mi>d</mi><mi>s</mi><mi>t</mi></mrow></mrow><annotation encoding="application/x-tex">\alpha{dst}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span></span>: The destination factor value. Sets the impact of the alpha value on the destination color.</p><p><img src="alpha_blending_eg.png" alt="alpha blending example"></p><ul><li>The glBlendFunc(GLenum sfactor, GLenum dfactor) function expects two parameters that set the option for the source and destination factor.</li><li>OpenGL defined quite a few options for us to set of which we’ll list the most common options below.</li></ul><h3 id="the-order-of-objects-in-the-rendering-sequence-matters">The order of objects in the rendering sequence matters</h3><p>As described in the blending function, we need to figure out which object is source and which one is destination. It means that the order of rendering objects matters - different orders result in different effect (maybe incorrect results).</p><ul><li><p>[Transparent objects] If we only have transparent objects, to make blending work for multiple transparent objects we have to draw the <strong>most distant object first</strong> and the closest object last (back to front).</p></li><li><p>[Non-transparent objects] If we only have non-transparent objects, the order doesn’t matter. The normal non-blended objects can still be drawn as normal using the depth buffer so they don’t have to be sorted. We do have to make sure they are drawn first before drawing the (sorted) transparent objects.</p></li><li><p>[Mix of objects] When drawing a scene with non-transparent and transparent objects, the general outline is usually as follows:</p><ol><li>Draw all opaque objects first.</li><li>Sort all the transparent objects.</li><li>Draw all the transparent objects in sorted order.</li></ol></li></ul><p><img src="rendering_ord.png" alt="An Illustration of Rendering Order"></p><p>This idea has been used by Nvidia for rendering particle smoke</p><ul><li>First calculate a vector which is half way between the view direction and light direction.</li><li>We then render the volume as a series of slices perpendicular to this half-angle vector by accumulating particle splats on the screen buffers.</li></ul><p><img src="half_angle_sorting.png" alt="Half-angle axis sorting"></p><p><img src="illustration_halfangle.png" alt="illustration of axis sorting"></p><p>In ray tracing, when going through each ray, we are implicitly visiting objects in a sorted order.</p><h2 id="forward-pass-of-surface-splat-rendering">Forward Pass of Surface Splat Rendering</h2><p>The forward process is the same as the point-based rendering pipeline as mentioned previously <a href="/2025/02/23/CS8803-CGA-L11/#point-based-rendering-pipeline"> L09-Positional Encoding</a>:<br>Shading -&gt; Warping -&gt; Visibility -&gt; Filtering</p><p><img src="forward_algorithm.png" alt="Algorithm"></p><h2 id="backward-pass-of-surface-splat-rendering">Backward Pass of Surface Splat Rendering</h2><h3 id="gradient-approximation">Gradient Approximation</h3><ul><li>The backward pass refers to the information flow from the rendered image to the scene parameters based on approximating the gradient.</li></ul><h4 id="if-the-splat-is-not-visible-on-the-pixel">If the splat is not visible on the pixel</h4><ul><li><p>When the splat is <em>invisible</em>, and it is <em>moving away from the camera</em>, the gradient should always be zero (since it’s impossible to become visible)</p></li><li><p>When the splat is <em>invisible</em>, and it is <em>moving toward the camera</em>, the gradient can be approximated by a linear function (we see a potential that this splat can be visible after some points and we’d like to demonstrate this trend):<br><img src="grad_approx_inv.png" alt="gradient approximation"></p><p>Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mi>I</mi></mrow><annotation encoding="application/x-tex">\delta I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">\delta p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mord mathnormal">p</span></span></span></span> represent changes in intensity and position.</p></li></ul><h4 id="if-the-splat-is-visible-on-the-pixel">If the splat is visible on the pixel</h4><ul><li><p>When the splat is <em>visible</em>, and it is <em>moving toward the camera or moving away from the camera</em>, the gradient can be approximated by its numerical gradient:</p><p><img src="grad_approx_v.png" alt="gradient approximation"></p></li></ul><h3 id="gradient-approximation-in-3d">Gradient Approximation in 3D</h3><ul><li>The splat is not visible at the pixel and the pixel is not rendered by any other ellipses in front of the splat;</li><li>The splat is not visible at the pixel and the pixel is rendered by other ellipses in front of the splat (the splat is behind other splats);</li><li>The splat is visible at x.</li></ul><p>Here, “splat” refers to the projected contribution of a 3D Gaussian (or surfel) onto the 2D image plane during rendering.</p><p><img src="grad_approx_3d.png" alt="Gradient Approximation in 3D"></p><h2 id="regularization-and-loss">Regularization and Loss</h2><h3 id="why-do-we-need-regularization">Why do we need regularization?</h3><ul><li>The unstructured nature of point clouds, while enabling extensive topology changes, presents a considerable challenge for optimization.</li><li>Gradient computation is fully <em>parallelized</em>, causing points to move independently of one another.</li><li>Since point movements typically result in minor and sparse changes in the rendered image, the gradients associated with individual points <em>lack the structured behavior observed in mesh-based gradients</em>.</li><li>Without appropriate regularization, the optimization can easily lead to convergence toward <em>local minima</em>.</li></ul><h3 id="regularization-repulsion-and-projection">Regularization: Repulsion and Projection</h3><ul><li>Need for Regularization:<ul><li>Prevents overfitting to image artifacts.</li><li>Maintains uniform point distribution.</li></ul></li><li>Techniques:<ul><li>Repulsion Term: Encourages even distribution by maximizing inter-point distances. It’s aimed at generating uniform point distributions by maximizing the distances between its neighbors on a local projection plane.<br><img src="reg_rep.png" alt="repulsion"></li><li>Projection Term: Aligns points to local tangent planes. It preserves clean surfaces by minimizing the distance from the point to the surface tangent plane.<br><img src="reg_proj.png" alt="repulsion"></li></ul></li></ul><p><img src="example_reg.png" alt="example of regularization terms"></p><h3 id="loss-function">Loss Function</h3><p>The total optimization objective include three terms: the pixel loss, projection loss, and repulsion loss. However, this loss function was not used in Gaussian Splatting. Gaussian Splatting uses a large number of splats to achieve a much simpler loss function.</p><p><img src="loss_func.png" alt="loss function"></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>Gaussian Splatting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - Point-based Rendering</title>
    <link href="/2025/02/23/CS8803-CGA-L11/"/>
    <url>/2025/02/23/CS8803-CGA-L11/</url>
    
    <content type="html"><![CDATA[<h2 id="rasterization-pipeline">Rasterization pipeline</h2><h3 id="core-concepts-essence-of-nerf-and-gs">Core Concepts: Essence of NeRF and GS</h3><ul><li>NeRF is neural radiance representation + differentiable ray tracing</li><li>3D GS is point-based representation + differentiable rasterization</li></ul><h3 id="rasterization-vs-ray-tracing">Rasterization v.s. Ray Tracing</h3><ul><li>Rasterization: object point to image plane<ul><li>start with a 3D object point</li><li>apply transforms</li><li>determine the 2D image plane point it projects to</li></ul></li></ul><p><img src="rasterization.png" alt="rasterization"></p><ul><li>Ray tracing: image plane to object point<ul><li>start with a 2D image point</li><li>generate a ray</li><li>determine the visible 3D object point</li></ul></li></ul><p><img src="raytracing.png" alt="ray tracing"></p><p><em>Rasterization and ray tracing are inverse processes to each other.</em></p><h3 id="rasterization-vs-ray-casting">Rasterization vs. Ray casting</h3><p><img src="raster_raycast.png" alt="Rasterization vs. Ray casting"></p><ul><li>What needs to be stored in memory in each case?<ul><li>The rasterizer only needs one primitive at a time, plus the entire image and associated depth information for all pixels.</li><li>In this basic form, ray tracing needs the entire scene description in memory at once.</li></ul></li></ul><h3 id="review-of-rendering-pipeline">Review of rendering pipeline</h3><p><img src="rendering_pipeline.png" alt="rendering pipeline"></p><h4 id="stage-i-vertex-processing">Stage I: Vertex Processing</h4><ul><li>The vertex processing stage processes vertex data through a vertex shader.</li><li>Each vertex’s properties, like position, color, and texture coordinates, are calculated and transformed to prepare for primitive processing.</li><li>We can program this stage in Vertex Shaders.</li></ul><h4 id="stage-ii-primitive-processing">Stage II: Primitive Processing</h4><ul><li>Once vertices are processed, they are assembled into geometric primitives such as <strong>points</strong>, lines, or triangles.</li><li>This stage may include tessellation (镶嵌), where primitives are subdivided into finer details, and geometry shading.</li><li>This stage can be programmed using Geometry Shaders.</li></ul><h4 id="stage-iii-rasterization">Stage III: Rasterization</h4><ul><li>Rasterization converts primitives into a 2D image or framebuffer.</li><li>It determines the pixels that form the primitives, performing interpolations for pixel positions. This stage sets the scene for fragment processing.</li><li>This stage is not programmable.</li></ul><h4 id="stage-iv-fragment-processing">Stage IV: Fragment Processing</h4><ul><li>Fragments can be thought of as pixels (but they are actually not!), are processed to determine<br>their final color and properties.</li><li>Fragment shaders compute lighting, apply textures, and carry out operations for visual effects.</li><li>We can program this stage in Fragment Shaders.</li></ul><p>In the rendering pipeline, fragments and pixels are closely related but distinct concepts. A fragment is an intermediate stage in the pipeline, while a pixel represents the final output on the screen.</p><ul><li><p>Fragment</p><ul><li>A fragment is a <em>potential</em> pixel generated during rasterization.</li><li>It contains <em>interpolated</em> attributes from vertices, such as:<ul><li>Depth (Z-value)</li><li>Color</li><li>Texture coordinates</li><li>Normals, lighting values, etc.</li></ul></li><li>Each fragment undergoes per-fragment operations (like shading, depth testing, blending).</li><li>Not all fragments become pixels due to <em>depth testing, alpha testing, and other rejection criteria</em>.</li></ul></li><li><p>Pixel</p><ul><li>A pixel is the final colored output on the screen.</li><li>It contains final colors only.</li><li>After fragment processing, only one final color value per pixel is stored in the frame buffer.</li><li>Operations affecting pixels:<ul><li>Blending (combining multiple fragments)</li><li>Post-processing effects (antialiasing, tone mapping)</li></ul></li><li>If two fragments map to the same pixel, only the one closest to the camera (passing depth test) is displayed.</li></ul></li></ul><h4 id="stage-v-pixel-processing">Stage V: Pixel Processing</h4><ul><li>The pixel processing stage involves operations like blending and testing pixels for depth and stencil (模板) comparison.</li><li>The final pixel colors are output to the screen, resulting in the rendered image.</li><li>This stage is not fully programmable (mainly hardware control).</li></ul><h2 id="points-and-surfels">Points and surfels</h2><h3 id="points-as-rendering-primitives">Points as Rendering Primitives</h3><ul><li>We want to use point clouds instead of triangle meshes and textures as a rendering primitive</li><li>Points are considered as a collection of nonuniform samplers of a surface in 3D space</li><li>We want to carry surface information such as colors, normal, and textures on each point</li><li>The original idea has been proposed by Levoy and Whitted in 1985 (<em>The Use of Points as a Display Primitive</em> Marc Levoy and Turner WhittedTechnical Report 85-022, UNC Chapel Hill, January, 1985.)</li></ul><h3 id="why-points">Why Points?</h3><h4 id="representation-simplicity">Representation Simplicity</h4><ul><li>Performance of 3D hardware has exploded</li><li>Projected triangles are very small, causing higher setup overhead</li><li><strong>Generating triangle meshes is time-consuming and difficult</strong></li><li>Seeking a simpler, more efficient rendering primitive than triangles</li></ul><h4 id="model-acquisition">Model Acquisition</h4><ul><li>3D scanning of physical objects is ubiquitous</li><li>Modern 3D scanning and LiDAR devices produce huge point clouds</li><li>Direct rendering of acquired point clouds becomes possible with the improvement of GPU power</li><li>Efficient rendering of synthetic models and animated scenes</li></ul><h4 id="model-editing">Model Editing</h4><ul><li>Processing and editing of point-sampled geometry become necessary after obtaining these geometries from real-world scanning</li><li>Graphics community needs a point-based content creation pipeline</li></ul><h3 id="points-as-primitives-summary">Points as primitives - Summary</h3><ul><li>Point clouds instead of triangle meshes</li><li>No explicit connectivity or texture maps</li><li>Each point carries 3D geometry and surface reflectance properties</li><li>We need a large number of points to render realistic appearance</li></ul><h3 id="recap-render-a-single-particle-in-fragment-shader">Recap: Render a Single Particle in Fragment Shader</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">- Input: <span class="hljs-comment">/*fragment position*/</span> frag_pos, <span class="hljs-comment">/*particle position*/</span> particle_pos, <span class="hljs-comment">/*particle’s default brightness*/</span> brightness, <span class="hljs-comment">/*particle’s default color*/</span> color<br>- Output: <span class="hljs-comment">/*fragment color*/</span> frag_color<br>- Algorithm:<br><span class="hljs-comment">// Given the particle’s position, we want to render it like a Gaussian blob in the fragment shader</span><br><span class="hljs-comment">// For each pixel, we check its distance to the center of the particle, and then calculate a color based on a decay function</span><br>distance = <span class="hljs-built_in">length</span>(frag_pos – particle_pos)<br>decay = <span class="hljs-number">1</span> / distance<br>frag_color = color * brightness * decay <span class="hljs-comment">// Get a bright color with a short distance / Get a dark color with a long distance</span><br><span class="hljs-keyword">return</span> frag_color<br><br><span class="hljs-comment">// We can play with the distance, direction, as well as the decay function to produce different particle shapes</span><br></code></pre></td></tr></table></figure><h3 id="recap-render-multiple-particles-in-fragment-shader">Recap: Render Multiple Particles in Fragment Shader</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">- Input: <span class="hljs-comment">/*fragment coordinate*/</span> frag_pos<br>- Output: <span class="hljs-comment">/*fragment color*/</span> frag_color<br>- Algorithm:<br>frag_color = <span class="hljs-built_in">vec3</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-comment">// Use a for loop to go over all particles for each pixel</span><br><span class="hljs-keyword">for</span> each particle p:<br>  get its position, brightness, <span class="hljs-keyword">and</span> color <span class="hljs-comment">// We can create functions of time to change each particle’s appearance (e.g., brightness and color) to produce effects like flickering, fading, color transition, etc.</span><br>  <span class="hljs-comment">// The color of the fragment is the sum of contributions from all particles on the screen</span><br>  frag_color += <span class="hljs-built_in">SingleParticleColor</span>(frag_pos, particle_pos, brightness, color)<br><span class="hljs-keyword">return</span> frag_color<br></code></pre></td></tr></table></figure><h3 id="surface-element-surfel">Surface Element (Surfel)</h3><ul><li>A surfel is defined as a point in space carrying a list of attributes (position:x, color:c)</li><li>A surfel encapsulates the properties of a small patch of a surface</li><li>Extended attributes include normal, radius, and other shading properties such as transparency</li></ul><h3 id="using-surfels-to-represent-a-surface">Using Surfels to Represent a Surface</h3><ul><li>Each surfel represents as a small patch of the surface</li><li>A certain surface area is associated with each surfel</li><li>Its normal vector represents the normal direction of the surface on the local patch</li><li>How to represent the surface between the points? Surfels need to interpolate the surface between the points</li></ul><h4 id="surfel-interpolation">Surfel Interpolation</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub><mtext> </mtext><msub><mi>w</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><mrow><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>w</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">c(p) = \frac{\sum_i c_i \, w_i(p)}{\sum_i w_i(p)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.63em;vertical-align:-0.57em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.06em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1496em;"><span style="top:-2.1786em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3214em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0269em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.535em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1496em;"><span style="top:-2.1786em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3214em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0269em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.57em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><ul><li>Each surfel carries a kernel function spreading its contribution over neighboring points</li><li>The <em>splat function</em> defines the shape and intensity of this spread, often using a Gaussian kernel (where Gaussian Splatting comes from) or an elliptical kernel to simulate natural energy distribution</li><li>The value of a new point on the surface is interpolated using the kernel function of each neighboring surfel (think of weighted average, here we do normalization so that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>w</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_i w_i(p) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.162em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>)</li></ul><h2 id="point-based-rendering-pipeline">Point-based rendering pipeline</h2><h3 id="shading">Shading</h3><p>For each surfel, we shade its color using conventional shading models (e.g., phong shading) and then store its color on the surfel.</p><h3 id="warping-变形">Warping (变形)</h3><p>Warping in the point-based rendering pipeline refers to the transformation of surface colors from object space to image space using a reconstruction technique. It ensures that colors from surfels (surface elements) are accurately transferred to the final pixel representation in screen space.</p><h4 id="rendering-surfels-on-screen">Rendering Surfels on Screen</h4><ul><li>Considers surfels as discrete samples of a texture function on a surface in 3D <strong>object space</strong>. We can imagine a set of points (with colors, normals, etc.) scattered nonuniformly over an object. Conceptually, these surfels approximate some continuous function (like a texture or color distribution) on the 3D surface.</li><li>When we render an image, we have a uniform grid of pixels in 2D screen space. Each pixel is effectively a sample of the projected surface function. So there’s a change in coordinate system: from 3D object space to 2D screen space. A <em>Gaussian kernel (splat function)</em> is used to recover a continuous signal such that we can sample it in 2D <strong>screen space</strong>.</li><li>The rendering process can be thought of as a <strong>resampling process</strong> to reconstruct the signal in screen space.</li><li>To figure out each pixel’s color (or any other attribute), we need to “look up” how that pixel relates back to the surfels in object space. <strong>Resampling</strong> is the process of:<ul><li>Reconstructing the continuous function from the nonuniform surfel samples (often via a smoothing kernel, e.g. a Gaussian “splat”)</li><li>Evaluating that reconstructed function at the uniform pixel grid in screen space.</li></ul></li></ul><p>PS: whenever see “resampling,” think:</p><p>“I have some discrete data in one domain. I want to produce discrete data in another domain. So I reconstruct (smooth/interpolate) and then sample again in the new domain.”</p><p><img src="obj2screen.png" alt="Object and Screen Mapping"></p><p><img src="warping.png" alt="Warping"></p><p><img src="warping_proc.png" alt="Illustration of Warping Process"></p><h4 id="point-based-shading-and-warping-algorithm">Point-based Shading and Warping Algorithm</h4><ul><li>Stage I: go over all surfels (Happens in the vertex shader)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> each surfel:<br>  shade its surface color<br>  splat (溅) <span class="hljs-keyword">with</span> warped reconstruction kernel<br>  accumulate splat <span class="hljs-keyword">and</span> weight<br></code></pre></td></tr></table></figure><ul><li>Stage II: go over all pixels (Happens in the fragment shader)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> each pixel:<br>    normalize <span class="hljs-comment"># Normalize the accumulated values to compute final pixel colors.</span><br></code></pre></td></tr></table></figure><h3 id="visibility">Visibility</h3><h4 id="visibility-test">Visibility test</h4><p>The visibility test ensures that only visible surface elements (surfels) contribute to the final pixel color.</p><p><img src="visibility_test.png" alt="Discard occluded splats"></p><ul><li>The z-threshold accumulate splats is a depth threshold that determines whether multiple splats should be accumulated or discarded.</li><li>If the depth difference between the incoming splat and the current depth buffer value is within the threshold, the splat is accumulated (blended with the existing color and weight at that pixel).</li><li>If the splat is too far from the existing depth value, it is discarded to avoid artifacts from occluded (被遮挡的) surfaces.</li></ul><p>See the psudocode of depth test.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// for each pixel (x,y)</span><br><span class="hljs-built_in">DepthTest</span>(x,y) &#123;<br>  <span class="hljs-comment">// splat z - The depth value of the surfel.</span><br>  <span class="hljs-comment">// z(x,y) - Stores the depth value of the closest splat already written to the pixel (x,y) in the Z-buffer.</span><br>  <span class="hljs-comment">// The Z-buffer keeps track of the depth of the closest visible surface to ensure correct occlusion.</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(splat z - <span class="hljs-built_in">z</span>(x,y)) &lt; threshold) &#123;<br>    <span class="hljs-comment">// Accumulate the splat&#x27;s color if it is within a small depth threshold (i.e., close to current z).</span><br>    <span class="hljs-built_in">c</span>(x,y) = <span class="hljs-built_in">c</span>(x,y) + splat color<br>    <span class="hljs-built_in">w</span>(x,y) = <span class="hljs-built_in">w</span>(x,y) + splat <span class="hljs-built_in">w</span>(x,y)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (splat z &lt; <span class="hljs-built_in">z</span>(x,y)) &#123;<br>    <span class="hljs-comment">// Replace the current depth if the new splat is closer to the camera.</span><br>    <span class="hljs-built_in">z</span>(x,y) = splat z<br>    <span class="hljs-built_in">c</span>(x,y) = splat color<br>    <span class="hljs-built_in">w</span>(x,y) = splat <span class="hljs-built_in">w</span>(x,y) <span class="hljs-comment">// The weight determining the influence of the splat in blending.</span><br>  &#125;<br>  <span class="hljs-comment">// Discard the splat if it is behind an existing surfel.</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="alpha-blending">Alpha blending</h4><p><img src="alpha_blending.png" alt="alpha blending"></p><ol><li>Additive Blending (Left)</li></ol><ul><li>Computes pixel color as a weighted average of all surfel contributions.</li></ul><ol start="2"><li>Absorption Blending (Right)</li></ol><ul><li>Models light absorption through a volume, similar to NeRF (Neural Radiance Fields).</li></ul><h3 id="filtering">Filtering</h3><p>Filtering in the point-based rendering pipeline is applied after surfels are warped to screen space to smooth accumulated colors before final sampling. This step ensures high-quality reconstruction by avoiding holes, reducing aliasing and preserving details. After the surfels are warped to screen, we will perform a low-pass filter onto the accumulated colors and sample on the output grid.</p><p><img src="filtering.png" alt="filtering"></p><p>In the figure above,</p><ul><li>Warping (Step 2): Surfels are projected from source space to destination space (screen space).</li><li>Filtering (Step 3): A low-pass filter is applied to the warped surfel contributions, typically using:<ul><li>Reconstruction kernels to smooth scattered surfel data.</li><li>Convolution-based filtering to aggregate values before sampling.</li></ul></li><li>Sampling (Step 4): The final colors are resampled onto the pixel grid for output.</li></ul><h2 id="ps-the-meaning-of-splat-in-the-context-of-gaussian-splatting">PS: the meaning of “splat” in the context of Gaussian Splatting</h2><p>As a verb, it refers to the process of projecting and blending a Gaussian-shaped surfel (a small surface element) onto the image plane. As a noun, it refers to the projected contribution of a 3D Gaussian (or surfel) onto the 2D image plane during rendering.</p><ul><li>3D Gaussians Representation<ul><li>Each surfel (point in 3D space) is represented as an anisotropic (direction-dependent) or isotropic (uniform) Gaussian blob.</li><li>These Gaussians have a position, scale, orientation, color, and opacity.</li></ul></li><li>Splatting Process (Projection &amp; Blending)<ul><li>Each Gaussian is projected onto the 2D screen.</li><li>Instead of a single pixel, it contributes to multiple pixels based on its Gaussian distribution.</li><li>This creates a smooth and continuous blending effect.</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>Gaussian Splatting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - Advance topics for NeRF</title>
    <link href="/2025/02/21/CS8803-CGA-L10/"/>
    <url>/2025/02/21/CS8803-CGA-L10/</url>
    
    <content type="html"><![CDATA[<h2 id="acceleration-data-structures-for-nerf">Acceleration Data Structures for NeRF</h2><p>The NeRF representation takes position and direction as inputs, and produces color and density as outputs. Recall that in L09 we learned the effectiveness of input encoding - positional encoding that can improve the results significantly with a few lines of code (see <a href="/2025/02/14/CS8803-CGA-L09/#positional-encoding"> L09-Positional Encoding</a>).</p><p>Next step, what is the best data structure for NeRF? Recall the previously mentioned data structures for geometry: meshes (small memory footprint but hard to optimize), voxels (easy to optimize but large memory footprint).</p><h3 id="plenoxels">Plenoxels</h3><p>Idea I: Let’s try to get rid of MLP.</p><p>(Yu*, Friedovich-Keil* et al. 2021, Plenoxels: Radiance Fields without Neural Networks)</p><p>Plenoxels are essentially a “voxel grid + spherical harmonics” approach to storing and rendering a 3D scene without the need for a large MLP network. Instead of learning a neural function (MLP) that outputs density and color at every point, Plenoxels store these quantities directly in a dense 3D grid:</p><ol><li><p><strong>Voxel Grid:</strong> The space is discretized into a regular 3D grid of voxels. Each voxel holds:</p><ul><li>A <strong>density</strong> value (how much light is absorbed or emitted in that region).</li><li><strong>Spherical Harmonic (SH) coefficients</strong> that compactly represent the direction-dependent color of that voxel.</li></ul></li><li><p><strong>Spherical Harmonics (球面谐波):</strong> SHs are a set of basis functions on the sphere. An analogy (类比), we can think of spherical harmonics as the “cosine basis” for functions defined on the surface of a sphere. Instead of using cosines in 1D to capture frequencies of a signal, we use spherical harmonics in 2D (on the sphere) to capture angular variation of a function. We can represent <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c(p, \omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span></span></span></span> compactly by projecting into basis of SH. Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c(p, \omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span></span></span></span> indicates that color (or radiance) depends on position <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> in 3D space and direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span> on the sphere. Rather than storing the color for every single direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span> (which would be huge), we project or “expand” <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c(p, \omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span></span></span></span> into a finite number of SH basis functions. By keeping only the SH coefficients, we can get a compact representation of how color varies with direction. By keeping a small number of SH coefficients per voxel (rather than a full directional function), we can get a more memory-efficient representation of how color changes with viewing direction.</p></li><li><p><strong>No MLP Required:</strong> The figure below shows a conventional NeRF-like pipeline where an MLP predicts density and SH coefficients for each 3D position. Plenoxels remove the MLP entirely. We simply optimize the voxel grid’s density and SH coefficients directly from the input images. To learn the voxel grid, we render the scene from the same viewpoints as your training images. Then we compare (via a photometric loss, e.g., mean squared error) the rendered pixels to the real input pixels. Because the voxel grid is just a big table of parameters (density + SH coefficients), we can do gradient-based optimization (like backprop) on those parameters directly. Iterating this process lets the grid converge so that rendered views match the real images.</p></li></ol><p><img src="MLP_SH.png" alt="Use MLP to learn SH coefficients"></p><ol start="4"><li><strong>Rendering:</strong> When you render, you sample through the voxel grid. For each ray-voxel intersection, you:<ul><li>Retrieve the voxel’s density.</li><li>Evaluate its SH coefficients for the viewing direction to get a color contribution.</li><li>Accumulate these contributions along the ray to form the final pixel color.</li></ul></li></ol><p>In short, Plenoxels turn the 3D volume into a big “lookup table” of densities and SH basis coefficients. This approach sidesteps the complexity and runtime cost of a learned MLP, while still leveraging spherical harmonics for compact, direction-dependent color.</p><h3 id="instant-ngp">Instant NGP</h3><p>Idea II: Let’s try hybrid representations.</p><p>(T. Müller et al. 2022, Instant Neural Graphics Primitives with a Multiresolution Hash Encoding)</p><p>This article shows an approach that enables super-resolution rendering of neural radiance field in real-time and accommodates a new neural representation structure by hybridizing networks and octrees.</p><p>Instant NGP (Instant Neural Graphics Primitives) achieves high-performance rendering and training through a <strong>hybrid data structure</strong> that combines <strong>spatial hashing</strong> with a <strong>small neural network</strong> (MLP).</p><p><img src="instant_ngp.png" alt="Key ideas of instant NGP"></p><ol><li><p><strong>Small, “fully‐fused” MLP</strong><br>Instead of using a large network (as in typical neural‐field approaches like NeRF), Instant‐NGP relies on a <em>small</em> multilayer perceptron. By “fully fused”, it means that the neural net operations (layers, activations, etc.) are tightly compiled (often CUDA‐fused) for maximum efficiency. This gives a 5–10× speed‐up over conventional deep‐learning frameworks.</p></li><li><p><strong>Multi‐resolution hash tables</strong><br>Alongside the MLP, Instant‐NGP uses a <em>spatial‐hashing</em> strategy to store learned “voxel” parameters at multiple resolutions. In the diagram, the bounding volume is subdivided into overlapping grids (of various coarse‐to‐fine 粗到细 scales). Rather than storing a huge feature grid, each grid cell is hashed to a compact array of learnable parameters.</p></li><li><p><strong>Lookup + interpolation + concatenation</strong><br>For a query point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">x</mi></mrow><annotation encoding="application/x-tex">\mathbf{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4444em;"></span><span class="mord mathbf">x</span></span></span></span> in 3D:</p><p><img src="instant_ngp1.png" alt="Key idea of instant NGP: Spatial hashing + small neural networks"></p><ul><li>We find which grid cells (voxel corners) it intersects at each resolution.</li><li>Each cell’s learnable parameters are <em>looked up</em> via hashing.</li><li>Those parameters (at the relevant corners) are blended via linear interpolation to produce a feature vector for each resolution.</li><li>Features from all resolutions are concatenated (plus any other inputs, e.g. viewing direction).</li><li>This concatenated feature vector is fed into the small MLP.</li></ul></li><li><p><strong>Task‐specific GPU rendering/training</strong><br>Once the MLP outputs (e.g., color, density, SDF, etc.) are known, Instant‐NGP uses tailored GPU kernels to project and accumulate these results for rendering or training. Because each query is so lightweight and the hashing reduces memory usage, we can train or render with significantly fewer steps—on the order of 100× fewer calls than a large tensor‐based approach.</p></li></ol><p>Put differently, the <em>hash‐based multi‐resolution grid</em> learns a coarse‐to‐fine mapping that acts almost like a highly efficient “lookup table” for local geometry or appearance. The small neural net then only has to learn <em>residual</em> details, so it converges much faster. This combination of “spatial hashing + small MLP + specialized GPU implementation” underpins Instant‐NGP’s ability to train and render neural graphics <em>extremely</em> rapidly. Instant NGP is good at rendering really complex scenes, e.g., an open space with many details.</p><h2 id="separating-nerf-geometry-and-appearance">Separating NeRF Geometry and Appearance</h2><ul><li>NeRF “bakes” appearance / color information into scene geometry, so when scene is re-lit, this requires training of a new NeRF.</li><li>Multiple approaches have focused on disentangling (分解) geometry and appearance information<ul><li>NeRD: Decompose images into shape, illumination, and appearance components (compute analytical BRDF as opposed to a single radiance value).</li><li>NeRV (Neural Reflectance and Visibility fields): Decompose image into visibility, direct light, indirect light, and BRDF.</li></ul></li></ul><p>Recall Phong Shading with separated terms for Diffuse and Specular Terms (diffuse + specular + ambient). The key idea is that instead of using SH coefficients, the MLP directly outputs density, diffuse colors, and specular features. Both the diffuse colors and the features are volume-rendered, and a final MLP evaluation is performed at the end to transform the diffuse color and features into the final color.</p><p><img src="sep_nerf.png" alt="Separating NeRF Geometry and Appearance"></p><h2 id="anti-aliasing">Anti-Aliasing</h2><p>Challenges: Multi-Resolution.</p><p>NeRF Rendering at Full Resolution: Produces high-quality, photorealistic results.<br>NeRF at Different Distances/Resolutions: Introduces noticeable aliasing artifacts (“jaggies”).<br>Training NeRF on Multi-resolution Data: Slightly improves low-resolution performance but degrades high-resolution quality, making it ineffective.<br>Introducing <strong>mip-NeRF</strong>: Trained on the same data, it maintains high-resolution rendering across multiple scales.<br>Key Advantage of mip-NeRF: Unlike NeRF, its performance does not degrade when trained on multiscale data.</p><h3 id="pre-filtering-with-a-mip-map">Pre-filtering with a mip-map</h3><p>The problem is solved with prefiltering, precomputing images at different scales, a technique known as mipmap or image pyramid. With a prefiltered representation, <strong>trilinear interpolation</strong> can efficiently retrieve a properly downsampled image at the correct location and scale, a method widely used in real-time graphics for <strong>texture mapping</strong>. So, mipmaps reduce image aliasing, mip-NeRF reduces NeRF aliasing.</p><h3 id="difference-between-standard-nerf-and-mip-nerf">Difference between standard NeRF and mip-NeRF</h3><p><strong>Standard NeRF</strong> treats every sample on a ray as a single 3D point and applies a “positional encoding” (the sin/cos expansions) to just that point. By contrast, <strong>Mip‐NeRF</strong> recognizes that each sample is really a small <em>conical</em> region along the ray, so it <em>integrates</em> the positional encoding over that region instead of evaluating it only at a single point.</p><p><img src="mipnerf1.png" alt="standard NeRF"></p><p><img src="mipnerf2.png" alt="mip-NeRF"></p><p>Concretely, standard NeRF does<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">[</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>1</mn></msup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>1</mn></msup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo>…</mo><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">]</mo></mrow><annotation encoding="application/x-tex">\gamma(x) = \big[\sin(2^0 x), \cos(2^0 x), \sin(2^1 x), \cos(2^1 x), \dots\big]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="delimsizing size1">[</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="delimsizing size1">]</span></span></span></span></span> for each point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>.</p><p>However, mip‐NeRF <em>averages</em> (integrates) those basis functions over the portion of space that the ray covers there, yielding</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mi mathvariant="normal">_</mi><mrow><mi>x</mi><mo>∼</mo><mi mathvariant="script">N</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><mo stretchy="false">[</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>ω</mi></msup><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>≈</mo><mi>sin</mi><mo>⁡</mo><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><msup><mn>2</mn><mi>ω</mi></msup><mi>μ</mi><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo><mtext> </mtext><mi>exp</mi><mo>⁡</mo><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mo>−</mo><msup><mn>4</mn><mi>ω</mi></msup><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mi>σ</mi><mn>2</mn></msup><mo fence="true" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo></mrow><annotation encoding="application/x-tex">E\_{x\sim \mathcal{N}(\mu,\sigma^2)}[\sin(2^\omega x)] \approx \sin\bigl(2^\omega \mu\bigr)\,\exp\bigl(-4^\omega \tfrac12\sigma^2\bigr)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1241em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathcal" style="margin-right:0.14736em;">N</span><span class="mopen">(</span><span class="mord mathnormal">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mopen">[</span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mop">sin</span><span class="mopen"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span><span class="mord mathnormal">μ</span><span class="mclose"><span class="delimsizing size1">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">exp</span><span class="mopen"><span class="delimsizing size1">(</span></span><span class="mord">−</span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing size1">)</span></span></span></span></span><br>which captures <em>how the ray “cone” sweeps out</em> a region in space.</p><p><img src="mipnerf3.png" alt="mip-NeRF integrates the basis functions over the portion of space the ray covers"></p><p>By representing samples more accurately (with an integral rather than a point), mip‐NeRF significantly reduces aliasing artifacts and improves multi‐scale consistency in the rendered scenes.</p><h2 id="large-scale-rendering">Large-Scale Rendering</h2><p>When rendering large scenes, since regular spacing does not scale, how to march efficiently?</p><h3 id="idea-i-exponential-stepping">Idea I: Exponential Stepping</h3><ul><li>How to march efficiently?<ul><li>Regular spacing is O(size)</li></ul></li><li>Solution:<ul><li>Exponential stepping is O(log(size))</li></ul></li></ul><h3 id="idea-ii-skipping-empty-space">Idea II: Skipping Empty Space</h3><ul><li>Exponential stepping does not help (air in front of camera, where steps are most dense)</li><li>Geometry not known in advance (training data are RGB images)</li><li>Solution: online-fitted occupancy grid<ul><li>Bitwise: 1 == occupied, 0 == empty</li><li>Z-order: cache-efficient; trivial mip-mapping</li><li>Look-up scale determined by cone width</li></ul></li></ul><h2 id="temporally-stable-training">Temporally Stable Training</h2><p>During training, a NeRF’s weights can “wander” in parameter space from step to step—often causing flickering (闪烁) or noisy updates when viewed as a running render. <strong>Temporally stable training</strong> addresses that by applying a <em>temporal low‐pass filter</em> (in practice, an exponential moving average) to the network weights as they are being optimized.</p><p>Concretely, we still train the network weights in the usual way, but keep a running average of those weights over recent training steps. For inference (i.e., for final rendering or evaluation), use the smoothed (EMA) weights rather than the moment‐to‐moment weights. Because the EMA filters out quick oscillations in parameter space, the resulting rendered views appear more stable over time, eliminating much of the flicker and noise that can come from raw, per‐step weights.</p><h2 id="future-research-directions">Future Research Directions</h2><p>Challenges to Address</p><ul><li>Neural scene representations do not (yet) “fully” disentangle all scene attributes.</li><li>Designing solutions to large-scale dynamic scenes is an open problem.</li><li>Generalization and real-time training/inference still pose significant hurdles (障碍，困难).</li></ul><p>(Few-shot NeRF, Generating NeRFs from 2D Generative Models, Enabling specific edits, Semantic Editing, Manipulating captured scenes)</p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>NeRF</tag>
      
      <tag>instant NGP</tag>
      
      <tag>Plenoxels</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - Neural Radiance Field</title>
    <link href="/2025/02/14/CS8803-CGA-L09/"/>
    <url>/2025/02/14/CS8803-CGA-L09/</url>
    
    <content type="html"><![CDATA[<h2 id="differentiable-rendering">Differentiable Rendering</h2><h3 id="forward-vs-inverse-rendering">Forward vs. Inverse Rendering</h3><p><img src="inv_forw_render.png" alt="Forward vs. Inverse Rendering"></p><p><strong>Forward Rendering</strong>:</p><ul><li>This is the traditional computer graphics pipeline where <em>we start with known scene parameters</em> (marked as “x” in the image) such as:<ul><li>Geometry (3D models)</li><li>Materials and their properties</li><li>Light sources (shown by the sun icon)</li><li>Camera/sensor parameters (shown by the camera icon)</li></ul></li><li>The rendering process (f(x)) then simulates how light interacts with these elements to produce a final 2D image (y)</li><li>This is the typical approach used in video games and 3D animation, where we know all the scene parameters and want to generate realistic images.</li></ul><p><strong>Inverse Rendering</strong>:</p><ul><li>This is the reverse process (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f^{-1}(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>) where we <em>start with a 2D image (y) and try to reconstruct the original 3D scene parameters (x)</em></li><li>Given a photograph or image, inverse rendering attempts to determine:<ul><li>The 3D geometry of objects</li><li>Material properties</li><li>Lighting conditions</li><li>Camera parameters</li></ul></li><li>This is a much more challenging problem because:<ul><li>Multiple different 3D scenes could produce the same 2D image</li><li>The process involves solving complex mathematical equations backwards</li><li>There can be ambiguity in separating lighting from material properties</li></ul></li></ul><p>The image shows this using a bedroom scene example:</p><ul><li>Forward rendering: We start with a 3D model (left) and render it to get the final image (right)</li><li>Inverse rendering: We start with the photo (right) and try to reconstruct the 3D scene parameters (left)</li></ul><h3 id="differentiable-rendering">Differentiable Rendering</h3><p>Integrating physics-based rendering into machine learning &amp; probabilistic inference pipelines (take use of the mature forward rendering pipeline to facilitate inverse rendering).</p><ul><li>Utilizing image loss (provided by a volume path tracer) to regularize training</li><li>Use the trained encoder to solve inverse problems during testing</li></ul><p>Differentiable rendering is still a forward rendering process (going from 3D scene parameters to 2D images). However, it makes the entire rendering pipeline differentiable - meaning we can compute how small changes in input parameters affect the final image. Each step in the rendering process (geometry transformations, material interactions, lighting calculations) becomes differentiable. Differentiable rendering makes inverse rendering more tractable through optimization.</p><p><img src="loss_func.png" alt="Objective function (a.k.a. “Loss”)"></p><p><img src="diff_render.png" alt="Differentiable Rendering Pipeline"></p><p><img src="diff_render1.png" alt="Differentiable Rendering Pipeline"></p><p>In the figurer above,</p><p>x - Scene Parameters:</p><ul><li>These are the input parameters that define the 3D scene</li><li>Includes geometry, materials, lighting, camera parameters</li><li>In the example shown, it would include the 3D model information for the teapot and cup</li></ul><p>y - Rendered Image:</p><ul><li>This is the output of the forward rendering process f(x)</li><li>Shows two versions of the rendered teapot scene - one with a solid dark material and one with a patterned material</li><li>Represents the 2D image produced by the renderer</li></ul><p>z - Loss/Objective Function:</p><ul><li>This is some measurement or metric computed from the rendered images</li><li>Could be comparing the rendered image to a target image</li><li>Might measure specific properties like lighting consistency or material appearance</li><li>The function g(y,…) computes this metric from the rendered images</li></ul><p>The chain rule shown at the top (∂z/∂x = ∂z/∂y · ∂y/∂x) illustrates how gradients flow backward through the pipeline:</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial z}{\partial y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3612em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>: How changes in the rendered image affect the loss</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial y}{\partial x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>: How changes in scene parameters affect the rendered image</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial z}{\partial x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>: The final gradient used to optimize scene parameters</li></ul><p>This chain rule formulation is what makes the rendering pipeline “differentiable” and allows for optimization of scene parameters through gradient descent.</p><p><img src="diff_render2.png" alt="Differentiable Rendering Example"></p><h2 id="shape-representation-for-differentiable-rendering">Shape Representation for Differentiable Rendering</h2><ol><li>Meshes</li></ol><ul><li>Idea: use a mesh to track the shape during optimization</li><li>Benefit: Small memory footprint (no need to store information outside surface)</li><li>Drawback:<ul><li>The optimization process is difficult to differentiate</li><li>The number of triangles needs to change during optimization</li><li>The mesh connectivity needs to change during optimization</li></ul></li></ul><ol start="2"><li>Voxel Grids</li></ol><ul><li>Voxels are 3D arrays that encode occupancy</li><li>Size: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>×</mo><mi>D</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">C \times D \times H \times W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span><br>(C: channels, D: depth, H: height, W: width)</li><li>Benefits:<ul><li>extremely simple</li><li>easy to optimize</li></ul></li><li>Drawbacks:<ul><li>Cubic in terms of memory/storage complexity</li></ul></li></ul><ol start="3"><li>Octrees / Sparse voxels</li></ol><ul><li>Voxels wastefully encode empty space</li><li>Idea: only represent occupied voxels</li><li>Benefits:<ul><li>More memory efficient</li></ul></li><li>Drawbacks:<ul><li>Geometry processing operations become tricky (e.g., merging objects, intersection tests, etc.)</li></ul></li></ul><ol start="4"><li>Neural Field (SDF)</li></ol><ul><li>Use neural network to replace grid</li><li>Idea:<ul><li>Encode continuous SDF values in an MLP</li></ul></li><li>Benefits:<ul><li>Memory efficient, differentiable</li></ul></li><li>Drawbacks:<ul><li>Difficult to put color and lighting effects on the object surface</li><li>Difficult to solve the inverse rendering problem from input images</li></ul></li></ul><p>In fact, neural fields are great for learning 3d representations.</p><p><img src="neural_fields.png" alt="neural fields"></p><p>The key question is: what field quantity do we want to encode in a neural network?</p><ol start="5"><li>Neural Color Field?</li></ol><ul><li>Idea: We want to encode the object appearance (in addition to its shape), in particular, its color, into the neural network</li><li>Drawback: But this is still problematic, because color on the object surface can change due to camera angle</li></ul><h2 id="neural-radiance-field">Neural Radiance Field</h2><ul><li>Idea: <strong>Combine volumetric rendering and neural network by learning the radiance field from images</strong>.</li><li>Instead of naively learning the color on object surface, we choose to learn a volumetric radiance field, and use ray tracing to render this field as participating media.</li><li>This ray tracing process is differentiable, which can be easily connected to any neural network training process.</li></ul><p>Radiance field <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi mathvariant="normal">Θ</mi></msub><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup><mo>×</mo><msup><mi mathvariant="double-struck">S</mi><mn>2</mn></msup><mo>→</mo><msup><mi mathvariant="double-struck">R</mi><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">F_{\Theta} : \mathbb{R}^3 \times \mathbb{S}^2 \to \mathbb{R}^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathbb">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></p><ul><li>Input: x, y, z coordinates (3D) and a direction (2 spherical coordinates) (A viewing direction, which is a unit vector in 3D space. A unit vector in 3D can be described using spherical coordinates <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>θ</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\theta, \phi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mclose">)</span></span></span></span>. Azimuthal angle <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>: Measures the rotation around the vertical axis (like longitude on Earth). Polar angle (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>): Measures the angle from the vertical axis (like latitude on Earth))</li><li>Output: R, G, B colors, scalar volume density parameter <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span></li><li>Compute radiance via <strong>volume rendering</strong><ul><li>Volume rendering: accumulate color and density along a ray to compute the final pixel value in an image. The idea is:<ul><li>A ray is cast through the scene, and samples are taken along the ray.</li><li>Each sampled point contributes some color and opacity (density).</li><li>The final color is computed by integrating (accumulating) these values along the ray.</li></ul></li><li>Differentiate loss w.r.t. each parameter in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> represents the parameters of the neural network that models the radiance field).</li><li>Update <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> via gradient descent</li></ul></li><li>Use an MLP to “memorize” and “interpolate”<ul><li>MLP: Multi-Layer Perceptron. It is a type of feedforward neural network that consists of multiple layers of neurons. It is fully connected—each neuron in one layer is connected to every neuron in the next.</li><li>MLP “memorizes” radiance at locations where GT is available</li><li>MLP “interpolates” these memorized values across neighbors</li></ul></li></ul><h2 id="differentiable-volumetric-rendering">Differentiable Volumetric Rendering</h2><p>Remember that in volumetric rendering, we</p><ul><li>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mi>o</mi><mo>+</mo><mi>t</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">r = o + td</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span></span></span></span> denote samples along the current ray being cast into the scene (for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub><mo>&lt;</mo><mi>t</mi><mo>&lt;</mo><msub><mi>t</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">t_n &lt; t &lt; t_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6542em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>).</li><li>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> denote the color of ray <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>.</li><li>We have <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><msub><mi>t</mi><mi>n</mi></msub><msub><mi>t</mi><mi>f</mi></msub></msubsup><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>c</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">C(r) = \int _{t_n} ^{t_f} T(t) \sigma(r(t))c(r(t))dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4444em;vertical-align:-0.4559em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2901em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><msubsup><mo>∫</mo><msub><mi>t</mi><mi>n</mi></msub><mi>t</mi></msubsup><mi>σ</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>d</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(t) = exp(-\int _{t_n} ^{t} \sigma(r(s))ds)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4444em;vertical-align:-0.4559em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">))</span><span class="mord mathnormal">d</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span> denotes the transmittance.</li></ul><p>Then, we can approximate the integral <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> by subdividing the ray into small segments. We assume volume density and color are roughly constant within each segment.</p><p>Now we take a random point for each segment. We use a stratified (分层的) sampling approach where we partition <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub><mtext> </mtext><msub><mi>t</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">t_n ~ t_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> into N evenly-spaced bins and then draw one sample uniformly at random from within each bin.</p><p>Also, recall the quadrature estimation of ray color.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><msub><mi>t</mi><mi>n</mi></msub><msub><mi>t</mi><mi>f</mi></msub></msubsup><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>c</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi><mo>≈</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mo>∫</mo><msub><mi>t</mi><mi>i</mi></msub><msub><mi>t</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></msubsup><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msub><mi>σ</mi><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">C(r) = \int _{t_n} ^{t_f} T(t) \sigma(r(t))c(r(t))dt \approx \sum _{i=1} ^n \int _{t_i} ^{t_{i+1}} T(t) \sigma_i c_i dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4444em;vertical-align:-0.4559em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2901em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4444em;vertical-align:-0.4559em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2025em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span>.</p><p>The left part of the equation shows continuous probability, while the right part shows discrete probability.</p><p>And we have <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi mathvariant="bold">r</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>T</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><mo>−</mo><msub><mi>σ</mi><mi>i</mi></msub><msub><mi mathvariant="normal">Δ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><msub><mi mathvariant="bold">c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C(\mathbf{r}) = \sum_{i=1}^n T_i(1-\exp(-\sigma_i\Delta_i))\mathbf{c}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathbf">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.104em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">exp</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">Δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span><span class="mord"><span class="mord mathbf">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (which is differerntiable w.r.t. (关于) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>σ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i, \sigma_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mi>exp</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mo>−</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>σ</mi><mi>j</mi></msub><msub><mi mathvariant="normal">Δ</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">T_i = \exp\left(-\sum_{j=1}^{i-1} \sigma_j\Delta_j\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="mop">exp</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9646em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">Δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span>.</p><p>In fact, we can see the estimation of the expected color as a kind of weighted sum of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(t) \sigma(r(t))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>exp</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mo>−</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>σ</mi><mi>j</mi></msub><msub><mi mathvariant="normal">Δ</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\exp\left(-\sum_{j=1}^{i-1} \sigma_j\Delta_j\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="mop">exp</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9646em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">Δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span> are “rendering weights” — probability distribution along the ray (continuous and discrete, respectively).</p><h2 id="positional-encoding">Positional Encoding</h2><ul><li>Naive coordinate-based MLPs (i.e., x, y, z directly passed as input) <strong>struggle to capture finer, high-frequency details</strong>.</li><li>Rahman et al. (ICML 2018) show that MLPs have an inherent low-frequency bias.</li><li>NN outputs cannot have local fluctuations without affecting global behavior.</li><li>Fortunately, they also develop a solution — positional encoding (a.k.a. Fourier features).</li></ul><p>Positional encoding to the rescue</p><ul><li>Idea: <strong>Map inputs to higher dimensions</strong></li><li>Use high-frequency mappings on inputs before feeding them into an MLP</li><li>Easy-to-use, differentiable function banks are preferred (e.g., sines and cosines)</li><li>Positional encoding:<ul><li>Map an input <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> to its high-dimensional encoding <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\gamma(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></li><li>In NeRF, sines and cosines (and their powers) are employed:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">(</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>0</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>1</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>1</mn></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>π</mi><mi>p</mi><mo stretchy="false">)</mo><mo fence="false" stretchy="true" minsize="1.2em" maxsize="1.2em">)</mo></mrow><annotation encoding="application/x-tex">\gamma(p) = \big( \sin(2^0 \pi p), \cos(2^0 \pi p), \sin(2^1 \pi p), \cos(2^1 \pi p), \dots, \sin(2^{L-1} \pi p), \cos(2^{L-1} \pi p) \big)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="delimsizing size1">(</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mord"><span class="delimsizing size1">)</span></span></span></span></span></li></ul></li></ul><h2 id="limitation-of-nerf">Limitation of NeRF</h2><ul><li>Training and inference time are extremely slow (about 30 seconds for a 128 x 128 image, in the original 2019 paper).</li><li>Assumes known camera intrinsics and extrinsics.</li><li>Scenes are assumed static (no moving objects).</li><li>Relighting is not possible (lighting is “baked” into the scene).</li><li>Generalization and/or extrapolation are not supported (Extrapolation refers to predicting values beyond the range of what was seen in training data. NeRF is good at interpolation (rendering unseen views within the training range), but it struggles with extrapolation).</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>NeRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - Participating Media</title>
    <link href="/2025/02/07/CS8803-CGA-L08/"/>
    <url>/2025/02/07/CS8803-CGA-L08/</url>
    
    <content type="html"><![CDATA[<h2 id="participating-media-model">Participating Media Model</h2><h3 id="definition">Definition</h3><ul><li>Participating media can be thought of as a collection of particles suspended in a vacuum</li><li>As a photon travel through the scene, it may interact with the medium by hitting one of these particles.</li><li>If we consider an infinitesimal segment of media, when a photon travels through this segment, a number of possible interactions might occur.</li></ul><h3 id="assumptions">Assumptions</h3><ul><li>statistically independent positions</li><li>isotropic particles, or</li><li>isotropicallyoriented anisotropic particles</li></ul><p><img src="assumption-participating.png" alt="assumptions"></p><h3 id="categories">Categories</h3><ul><li>Homogeneous Media: Infinite or bounded by a surface or simple shape (glass, transparent solid objects, light beams inside a dark room)</li><li>Heterogeneous Media (spatially varying coefficients):<ul><li>Procedurally e.g.,using a noise function</li><li>Simulation + volume discretization, e.g.,a voxel grid</li></ul></li></ul><h3 id="differential-beam">Differential Beam</h3><p>How much light is lost/gained along the differential beam due to interactions of light with the medium? Think of a differential beam segment and see the following situations.</p><h4 id="four-processes">Four Processes</h4><h4 id="absorption">Absorption</h4><p><img src="absorption.png" alt="absorption"></p><h4 id="out-scattering">Out-scattering</h4><p><img src="out-scattering.png" alt="out-scattering"></p><h4 id="in-scattering">In-scattering</h4><p>The scattering coefficient should be the same as in out-scattering process.<br>Use integration to calculate L_s.<br><img src="in-scattering.png" alt="in-scattering"></p><h4 id="emission">Emission</h4><p><img src="emission.png" alt="Emission"></p><h4 id="radiative-transfer-equation-rte-辐射传输方程">Radiative Transfer Equation (RTE, 辐射传输方程)</h4><p><img src="dL-RTE.png" alt="RTE for dL"></p><p>What about a beam with a finite length? As shown above, we can see the losses as a whole (extinction):</p><p><img src="losses-extinction.png" alt="extinction"></p><p>Then, think about extinction along an finite beam:</p><p><img src="extinction-finite.png" alt="extinction along an finite beam"></p><p>This is the so-called Beer-Lambert law.</p><h3 id="beer-lambert-law">Beer-Lambert Law</h3><ul><li>Expresses the remaining radiance after traveling a finite distance through a medium with constant extinction coefficient.</li><li>The fraction is referred to as the transmittance (这个比例被称为透过率).</li><li>Think of this as fractional visibility between points.</li></ul><p><img src="transmittance.png" alt="transmittance"></p><h4 id="transmittance">Transmittance</h4><p>Think about how to express Homogeneous and Heterogeneous materials.<br><img src="transmittance1.png" alt="transmittance"></p><h3 id="key-takeaway-of-participating-media-model">Key Takeaway of Participating Media Model</h3><ul><li>Four terms are considered for light transfer within a participating media: absorption, out-scattering, in-scattering, and emission.</li><li>Absorption and out-scattering are counted as loss terms.</li><li>In-scattering and emission are counted as gain terms.</li><li>The transfer process can be modeled as a differential equation by considering the contributions of all the four terms on a small beam.</li></ul><h2 id="volume-rendering-equation">Volume Rendering Equation</h2><h3 id="integrate-the-radiance-transfer-equation">Integrate the Radiance Transfer Equation</h3><p><img src="RTEintegration.png" alt="RTE integration"></p><h4 id="integrak-of-loss-only">Integrak of Loss Only</h4><p><img src="integrate_loss.png" alt="integrate loss"></p><h4 id="integral-of-loss-emission">Integral of Loss + Emission</h4><p>The term <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><msub><mi>σ</mi><mi>a</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sigma_a(x_t)}{\sigma_t(x_t)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2963em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2963em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2963em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> in the integral represents the <strong>fraction of the total extinction coefficient</strong> that is due to <strong>absorption</strong> at a given point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mi>a</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_a(x_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: The <strong>absorption coefficient</strong>, which measures how much radiance is absorbed per unit distance at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_t(x_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: The <strong>total extinction coefficient</strong>, which accounts for both <strong>absorption</strong> and <strong>scattering</strong> at <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. It is given by:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>σ</mi><mi>a</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>σ</mi><mi>s</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_t(x_t) = \sigma_a(x_t) + \sigma_s(x_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mi>s</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_s(x_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> is the <strong>scattering coefficient</strong>.<br>Thus, the ratio:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><msub><mi>σ</mi><mi>a</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sigma_a(x_t)}{\sigma_t(x_t)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2963em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2963em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2963em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> represents the <strong>probability that a photon is absorbed rather than scattered</strong> at location <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. This is often referred to as the <strong>absorption albedo</strong>.</li></ul><p>In the radiative transfer equation, this ratio is used to weight the emitted radiance <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>e</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo separator="true">,</mo><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_e(x_t, \vec{\omega})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, ensuring that only the fraction of radiance that is truly <strong>absorbed and re-emitted</strong> contributes to the accumulated radiance seen by the observer.</p><p><img src="integrate_loss_em.png" alt="integrate loss and emission"></p><h4 id="integral-of-loss-emission-in-scattering">Integral of Loss + Emission + In-scattering</h4><p><img src="integrate_loss_em_insc.png" alt="integrate loss, emission, and in-scattering"></p><p>In addition, we can integrate in-scattering radiance from all directions.</p><p><img src="insc_alldirs.png" alt="In-scattering as an Integral of Directions"></p><p>In the figure above, for each point that receives inscattering radiance along the ray, we calculate the integral from all directions that contributes radiance to this local point using a phase function. The phase function <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">f_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> describes the angular distribution of scattered light in participating media, such as fog, smoke, or water. It determines how light changes direction when interacting with particles in the medium. The phase function is analogous to the Bidirectional Reflectance Distribution Function (BRDF) but applies to volumetric scattering rather than surface reflection.</p><p><img src="phase_func.png" alt="phase function"></p><h3 id="summary-of-integral-form-of-rte">Summary of integral form of RTE</h3><p><img src="int_rte.png" alt="summary"></p><h2 id="volumetric-path-tracing">Volumetric Path Tracing</h2><h3 id="purely-absorbing-media">Purely Absorbing Media</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mover accent="true"><msub><mi>ω</mi><mi>i</mi></msub><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>=</mo><msub><mi>T</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>z</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mn>0</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>z</mi></msub><mo separator="true">,</mo><mover accent="true"><msub><mi>ω</mi><mi>i</mi></msub><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_i(x, \vec{\omega_i}) = T_r(x, x_z) L_0(x_z, \vec{\omega_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>z</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><msubsup><mo>∫</mo><mn>0</mn><mi>z</mi></msubsup><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_r(x, x_z) = exp(-\int_{0}^{z}\sigma_t(x)dt)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2151em;vertical-align:-0.3558em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8593em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>.</p><p>Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mover accent="true"><msub><mi>ω</mi><mi>i</mi></msub><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_i(x, \vec{\omega_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> is attenuated background radiance.</p><h4 id="numerical-implementation">Numerical Implementation</h4><p>See the equation of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>z</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><msubsup><mo>∫</mo><mn>0</mn><mi>z</mi></msubsup><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_r(x, x_z) = exp(-\int_{0}^{z}\sigma_t(x)dt)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2151em;vertical-align:-0.3558em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8593em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>, we can approximate the integral by a discrete Riemann sum. The key step is to approximate <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_r(x, x_z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> along the ray from t=0 to t=z.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>z</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><msubsup><mo>∫</mo><mn>0</mn><mi>z</mi></msubsup><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>δ</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_r(x, x_z) = exp(-\int_{0}^{z}\sigma_t(x)dt) = exp(-\sum _{i=0}^n \sigma_t(x_i) \delta t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2151em;vertical-align:-0.3558em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8593em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.104em;vertical-align:-0.2997em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>.</p><p>Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mi>t</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_t(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> is the sample of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">\sigma_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> in local place <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mord mathnormal">t</span></span></span></span> is the segment length.</p><h4 id="application">Application</h4><p>Glass.</p><h3 id="absorbing-emissive-only-medium">Absorbing + Emissive Only Medium</h3><p>We can simplify the emission term in RTE as below. tf and tn represent further point and nearer point.</p><p><img src="simple_em.png" alt="simplified emission"></p><p>In addition, we can ignore the in-scattering term to further simplify the equation. This is because the in-scattering can be modeled as a kind of emission (Ls is too difficult to calculate).</p><h4 id="numerical-implementation-estimating-the-radiance-along-a-ray">Numerical Implementation - Estimating the Radiance Along a Ray</h4><ul><li>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mi>o</mi><mo>+</mo><mi>t</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">r = o + td</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span></span></span></span> denote samples along the current ray being cast into the scene (for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub><mo>&lt;</mo><mi>t</mi><mo>&lt;</mo><msub><mi>t</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">t_n &lt; t &lt; t_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6542em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>).</li><li>Let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> denote the color of ray <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>.</li><li>We have <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><msub><mi>t</mi><mi>n</mi></msub><msub><mi>t</mi><mi>f</mi></msub></msubsup><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>c</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">C(r) = \int _{t_n} ^{t_f} T(t) \sigma(r(t))c(r(t))dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4444em;vertical-align:-0.4559em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2901em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span>, where $T(t) = exp(-\int _{t_n} ^{t} \sigma(r(s))ds) \approx $ (T is implemented by a Riemann sum) denotes the transmittance.</li></ul><p>Then, we can approximate the integral <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> by subdividing the ray into small segments. We assume volume density and color are roughly constant within each segment. Then we have (remember that T<br>is implemented by a Riemann sum - see the figure for numerical implementation for absorption only media):</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><msub><mi>t</mi><mi>n</mi></msub><msub><mi>t</mi><mi>f</mi></msub></msubsup><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>c</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi>d</mi><mi>t</mi><mo>≈</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mo>∫</mo><msub><mi>t</mi><mi>i</mi></msub><msub><mi>t</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></msubsup><mi>T</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msub><mi>σ</mi><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\int _{t_n} ^{t_f} T(t) \sigma(r(t))c(r(t))dt \approx \sum _{i=1} ^n \int _{t_i} ^{t_{i+1}} T(t) \sigma_i c_i dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4444em;vertical-align:-0.4559em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2901em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4444em;vertical-align:-0.4559em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2025em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span>.</p><h4 id="application">Application</h4><p>Fire, smoke.</p><h3 id="algorithm-back-to-front-composition">Algorithm: Back-To-Front Composition</h3><ul><li>This method starts from the farthest point along a ray and moves towards the camera.</li><li>At each step, it blends the accumulated intensity with the new contribution from the current voxel (think of each voxel as a little light source). Each voxel contributes its emission and scales the previous intensity by its transmittance.</li><li>Main disadvantage: Cannot support early ray termination (since all samples must be processed).</li></ul><p><img src="back2front.png" alt="Back-To-Front Composition"></p><p>In the algorithm,</p><ul><li>t[i] is the transmittance of segment i;</li><li>e[i] is the emitted radiance from segment;</li><li>I accumulates the final intensity.</li></ul><h3 id="algorithm-front-to-back-composition">Algorithm: Front-To-Back Composition</h3><ul><li>This method starts from the nearest voxel (closest to the camera) and moves towards the farthest voxel.</li><li>It incrementally accumulates contributions while tracking the transmittance of the ray.</li><li>It accumulates radiance while progressively attenuating background contributions.</li><li>Main advantage: Enables early ray termination (if T becomes very small, further computation is unnecessary).</li></ul><p><img src="front2back.png" alt="Front-To-Back Composition"></p><p>In the algorithm,</p><ul><li>T is the total transmittance up to voxel;</li><li>I accumulates the final intensity.</li></ul><h4 id="deriving-quadrature-estimate">Deriving quadrature estimate</h4><p><img src="quadrature_estimate.png" alt="quadrature estimate"></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>NeRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to set up OpenGL environment in VSCode with CMake</title>
    <link href="/2025/02/05/opengl-env-setup/"/>
    <url>/2025/02/05/opengl-env-setup/</url>
    
    <content type="html"><![CDATA[<h1 id="main-steps">Main steps</h1><ol><li>Create an empty folder for our project. Inside our project folder, create empty folders according to the following structure.</li></ol><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix">MyOpenGL<span class="hljs-symbol">/</span><br>├── include<span class="hljs-symbol">/</span><br>├── src<span class="hljs-symbol">/</span><br>|   ├── main.cpp<br>│   └── ...<br>├── build<span class="hljs-symbol">/</span><br>├── lib<span class="hljs-symbol">/</span><br>├── extern<span class="hljs-symbol">/</span><br>├── CMakeLists.txt<br>└── ...<br></code></pre></td></tr></table></figure><p>In addition, create a main.cpp inside src and use HelloWindow from <a href="https://learnopengl-cn.github.io/01%20Getting%20started/03%20Hello%20Window/">https://learnopengl-cn.github.io/01 Getting started/03 Hello Window/</a>. See Code below.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;glad/glad.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;GLFW/glfw3.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">framebuffer_size_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">processInput</span><span class="hljs-params">(GLFWwindow *window)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 在main函数中调用glfwInit函数来初始化GLFW，然后我们可以使用glfwWindowHint函数来配置GLFW。glfwWindowHint函数的第一个参数代表选项的名称，我们可以从很多以GLFW_开头的枚举值中选择；第二个参数接受一个整型，用来设置这个选项的值。该函数的所有的选项以及对应的值见https://www.glfw.org/docs/latest/window.html#window_hints</span><br>    <span class="hljs-built_in">glfwInit</span>();<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="hljs-number">4</span>);<br>    <span class="hljs-comment">// 使用核心模式(Core-profile)。明确告诉GLFW我们需要使用核心模式意味着我们只能使用OpenGL功能的一个子集（没有我们已不再需要的向后兼容特性）。</span><br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);<br>    <span class="hljs-comment">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;begin&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-comment">// glfwCreateWindow函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题）</span><br>    GLFWwindow* window = <span class="hljs-built_in">glfwCreateWindow</span>(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>, <span class="hljs-string">&quot;LearnOpenGL&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (window == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">glfwTerminate</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 通知GLFW将我们窗口的上下文设置为当前线程的主上下文</span><br>    <span class="hljs-built_in">glfwMakeContextCurrent</span>(window);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;end&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 使用glad来管理OpenGL的函数指针，调用任何OpenGL的函数之前我们需要初始化GLAD。调用gladLoadGLLoader函数来加载系统相关的OpenGL函数指针</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 使用glViewport函数来设置视口(viewport)维度(dimension)，前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）</span><br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br><br>    <span class="hljs-comment">// 实际上也可以将视口的维度设置为比GLFW的维度小，这样子之后所有的OpenGL渲染将会在一个更小的窗口中显示，这样子的话我们也可以将一些其它元素显示在OpenGL视口之外。</span><br><br>    <span class="hljs-comment">// OpenGL幕后使用glViewport中定义的位置和宽高进行2D坐标的转换，将OpenGL中的位置坐标转换为你的屏幕坐标。例如，OpenGL中的坐标(-0.5, 0.5)有可能（最终）被映射为屏幕中的坐标(200,450)。注意，处理过的OpenGL坐标范围只为-1到1，因此我们事实上将(-1到1)范围内的坐标映射到(0, 800)和(0, 600)。</span><br><br>    <span class="hljs-comment">// 当用户改变窗口的大小的时候，视口也应该被调整。我们可以对窗口注册一个回调函数(Callback Function)，它会在每次窗口大小被调整的时候被调用.</span><br>    <span class="hljs-built_in">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);<br><br>    <span class="hljs-comment">// 当窗口被第一次显示的时候framebuffer_size_callback也会被调用。对于视网膜(Retina)显示屏，width和height都会明显比原输入值更高一点。我们还可以将我们的函数注册到其它很多的回调函数中。比如说，我们可以创建一个回调函数来处理手柄输入变化，处理错误消息等。</span><br>    <span class="hljs-comment">// 我们会在创建窗口之后，渲染循环初始化之前注册这些回调函数。</span><br><br>    <span class="hljs-comment">// 为了不让程序只绘制一个图像之后我们的应用程序就立即退出并关闭窗口，而是在我们主动关闭它之前不断绘制图像并能够接受用户输入。因此，我们需要在程序中添加一个while循环，我们可以把它称之为渲染循环(Render Loop)，它能在我们让GLFW退出前一直保持运行。</span><br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">glfwWindowShouldClose</span>(window))<br>    &#123;<br>        <span class="hljs-comment">// 检查用户是否按下了返回键(Esc)（如果没有按下，glfwGetKey将会返回GLFW_RELEASE。如果用户的确按下了返回键，我们将通过使用glfwSetwindowShouldClose把WindowShouldClose属性设置为 true来关闭GLFW。下一次while循环的条件检测将会失败，程序将关闭。</span><br>        <span class="hljs-built_in">processInput</span>(window);<br><br>        <span class="hljs-comment">// 渲染指令放在这里</span><br>        <span class="hljs-comment">// glClearColor函数是一个状态设置函数，用来设置清空屏幕所用的颜色。每次调用glClear函数时，颜色缓冲都会被设定为glClearColor函数设置的颜色。</span><br>        <span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.2f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">1.0f</span>);<br>        <span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT);<br><br>        <span class="hljs-comment">// 交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。</span><br>        <span class="hljs-comment">// 双缓冲(Double Buffer)</span><br>        <span class="hljs-comment">// 应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。前缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在后缓冲上绘制。当所有的渲染指令执行完毕后，我们交换(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。</span><br>        <span class="hljs-built_in">glfwSwapBuffers</span>(window);<br>        <span class="hljs-comment">// glfwPollEvents函数检查有没有触发什么事件（比如键盘输入、鼠标移动等），然后调用对应的回调函数。glfwPollEvents会在每次循环的开始检查一次有没有触发什么事件。</span><br>        <span class="hljs-built_in">glfwPollEvents</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 渲染循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在main函数的最后调用glfwTerminate函数来完成。</span><br>    <span class="hljs-built_in">glfwTerminate</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">framebuffer_size_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">processInput</span><span class="hljs-params">(GLFWwindow *window)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)<br>        <span class="hljs-built_in">glfwSetWindowShouldClose</span>(window, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>GLFW<br>(1) Go to <a href="https://www.glfw.org/download.html">https://www.glfw.org/download.html</a> to download Source Package of GLFW, which provides a straightforward API for creating windows, contexts, and surfaces, as well as handling input from keyboards, mice, and joysticks (not only for OpenGL but also for OpenGL ES, Vulkan, etc.). Here, we download the source package instead of pre-compiled binaries because building from source allows for customization and ensures compatibility with our specific development environment. Unzip the zipped folder downloaded. Move the unzipped folder to <code>extern</code> folder.</p><p>(2) Add the following contents in the CMakeLists.txt in the project folder.</p></li></ol><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs makefile">cmake_minimum_required(VERSION 3.10)<br>project(MyOpenGL)<br><br><span class="hljs-comment"># Set the C++ standard</span><br>set(CMAKE_CXX_STANDARD 11)<br>set(CMAKE_CXX_STANDARD_REQUIRED True)<br><br><span class="hljs-comment"># When including GLFW as part of your build, you probably don&#x27;t want to build the GLFW tests, examples and documentation. To disable these, set the corresponding cache variables before adding the GLFW source tree.</span><br>set(GLFW_BUILD_DOCS OFF CACHE BOOL <span class="hljs-string">&quot;&quot;</span> FORCE)<br>set(GLFW_BUILD_TESTS OFF CACHE BOOL <span class="hljs-string">&quot;&quot;</span> FORCE)<br>set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL <span class="hljs-string">&quot;&quot;</span> FORCE)<br><br><span class="hljs-comment"># Add GLFW as a subdirectory. Add the root directory of the GLFW source tree to your project. This will add the glfw target to your project.</span><br>add_subdirectory(extern/glfw-3.4)<br><br><span class="hljs-comment"># Include directories 把include文件夹添加到项目中</span><br>include_directories(<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment"># Link directories</span><br>link_directories($&#123;CMAKE_SOURCE_DIR&#125;/lib)<br><br><span class="hljs-comment"># Add source files as SRC_LIST</span><br>aux_source_directory(./src SRC_LIST)<br><br><span class="hljs-comment"># Add executable</span><br>add_executable(MyOpenGL $&#123;SRC_LIST&#125;)<br><br><span class="hljs-comment"># Once GLFW has been added, link your application against the glfw target. This adds the GLFW library and its link-time dependencies as it is currently configured, the include directory for the GLFW header and, when applicable, the GLFW_DLL macro.</span><br>target_link_libraries(MyOpenGL glfw)<br><br><span class="hljs-comment"># Note that the glfw target does not depend on OpenGL, as GLFW loads any OpenGL, OpenGL ES or Vulkan libraries it needs at runtime. If your application calls OpenGL directly, instead of using a modern extension loader library, use the OpenGL CMake package.</span><br>find_package(OpenGL REQUIRED)<br><span class="hljs-comment"># If OpenGL is found, the OpenGL::GL target is added to your project, containing library and include directory paths. Link against this like any other library.</span><br>target_link_libraries(MyOpenGL OpenGL::GL)<br></code></pre></td></tr></table></figure><ol start="3"><li><p>GLAD</p><p>GLAD (GL Loader-Generator) is an open-source, multi-language tool designed to manage OpenGL extensions and function pointers. It simplifies the process of loading OpenGL functions, which can vary across different graphics drivers and hardware. By generating a custom loader based on your specified OpenGL version and profile, GLAD ensures that your application can access the necessary OpenGL functions in a platform-agnostic manner.</p><p>(1) Go to <a href="https://glad.dav1d.de/">https://glad.dav1d.de/</a></p><ul><li>Configure the options:<ul><li>Language: C/C++</li><li>Specification: OpenGL</li><li>API: Select the desired OpenGL version</li><li>Profile: Core</li><li>Generate a loader: Checked</li></ul></li><li>Click “Generate” and download the generated ZIP file.</li><li>Unzip the file and move the unzipped folder to <code>extern</code> folder.</li></ul><p>(2) Add the following lines in the CMakeLists.txt in the project folder.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile">add_subdirectory(extern/glad)<br>target_link_libraries(MyOpenGL glad)<br></code></pre></td></tr></table></figure><p>(3) Create a new CMakeLists.txt in <code>extern/glad/</code> and add the following lines to it.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile">cmake_minimum_required(VERSION 3.10)<br>project(Glad)<br><br><span class="hljs-comment"># Create a new library target named glad.</span><br>add_library(glad <span class="hljs-keyword">include</span>/glad/glad.h src/glad.c)<br><br><span class="hljs-comment"># Specify the include directories for the glad target. The PUBLIC keyword indicates that the include directory should be added to the include path for any target that links against glad. This means that any other part of your project or any other project that uses the glad library will be able to find the glad.h header file in the include directory.</span><br>target_include_directories(glad PUBLIC <span class="hljs-keyword">include</span>/)<br></code></pre></td></tr></table></figure></li><li><p>The final CMakeLists.txt in the project folder is like:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs makefile">cmake_minimum_required(VERSION 3.10)<br>project(MyOpenGL)<br><br><span class="hljs-comment"># Set the C++ standard</span><br>set(CMAKE_CXX_STANDARD 11)<br>set(CMAKE_CXX_STANDARD_REQUIRED True)<br><br><span class="hljs-comment"># When including GLFW as part of your build, you probably don&#x27;t want to build the GLFW tests, examples and documentation. To disable these, set the corresponding cache variables before adding the GLFW source tree.</span><br>set(GLFW_BUILD_DOCS OFF CACHE BOOL <span class="hljs-string">&quot;&quot;</span> FORCE)<br>set(GLFW_BUILD_TESTS OFF CACHE BOOL <span class="hljs-string">&quot;&quot;</span> FORCE)<br>set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL <span class="hljs-string">&quot;&quot;</span> FORCE)<br><br><span class="hljs-comment"># Add GLFW as a subdirectory. Add the root directory of the GLFW source tree to your project. This will add the glfw target to your project.</span><br>add_subdirectory(extern/glfw-3.4)<br><br>add_subdirectory(extern/glad)<br><br><span class="hljs-comment"># Include directories 把include文件夹添加到项目中</span><br>include_directories(<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment"># Link directories</span><br>link_directories($&#123;CMAKE_SOURCE_DIR&#125;/lib)<br><br><span class="hljs-comment"># Add source files as SRC_LIST</span><br>aux_source_directory(./src SRC_LIST)<br><br><span class="hljs-comment"># Add executable</span><br>add_executable(MyOpenGL $&#123;SRC_LIST&#125;)<br><br><span class="hljs-comment"># Once GLFW has been added, link your application against the glfw target. This adds the GLFW library and its link-time dependencies as it is currently configured, the include directory for the GLFW header and, when applicable, the GLFW_DLL macro.</span><br>target_link_libraries(MyOpenGL glfw)<br><br><span class="hljs-comment"># Note that the glfw target does not depend on OpenGL, as GLFW loads any OpenGL, OpenGL ES or Vulkan libraries it needs at runtime. If your application calls OpenGL directly, instead of using a modern extension loader library, use the OpenGL CMake package.</span><br>find_package(OpenGL REQUIRED)<br><span class="hljs-comment"># If OpenGL is found, the OpenGL::GL target is added to your project, containing library and include directory paths. Link against this like any other library.</span><br>target_link_libraries(MyOpenGL OpenGL::GL)<br><br>target_link_libraries(MyOpenGL glad)<br></code></pre></td></tr></table></figure><p>Refer the following figure for the project structure.<br><img src="proj_structure.png" alt="project structurer"></p></li><li><p>Assume we are in the project folder. Then,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd build<br>cmake .. -G &quot;MinGW Makefiles&quot;<br>cd ..<br>cmake --build build<br>build/MyOpenGL.exe<br></code></pre></td></tr></table></figure></li><li><p>(Optional) Assimp</p></li></ol><p>Assimp is a library that can help us read 3D models in different formats. More details can be found in LearnOpenGL tutorials. So how to integrate it to our project? First, I use ucrt64 (msys2) on Windows - which means that there’s no exact guidance in Assimp’s official repository about how to use assimp. I initially decided to compile it as a dynamic library, but it errors kept rising, especially during the linking process. And it seemed that vs instance was required. In fact, I tried to search the issues section in Assimp’s repository, and found that many other users had the same problem unsolved. Finally, I solved the issue by compiling it as a static library. BTW, if you don’t know how to use ucrt64 in the vscode terminal, just ask ChatGPT.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Configure: Generate MinGW-compatible build files <span class="hljs-keyword">for</span> a static Assimp library with bundled zlib.</span><br>cmake -G &quot;MinGW Makefiles&quot; -DASSIMP_WARNINGS_AS_ERRORS=OFF -DASSIMP_BUILD_ZLIB=ON -DBUILD_SHARED_LIBS=OFF -S . -B build<br><span class="hljs-meta prompt_"># </span><span class="language-bash">The output should be: A build/ directory containing:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  CMakeCache.txt: Configuration settings.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Makefile: Build rules <span class="hljs-keyword">for</span> MinGW.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  CMakeFiles/: Intermediate files <span class="hljs-keyword">for</span> CMake.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Assimp-specific build scripts</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Build: Compile the code into binaries.</span><br>cmake --build build<br><span class="hljs-meta prompt_"># </span><span class="language-bash">The output should be</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Static libraries <span class="hljs-keyword">in</span> build/lib/:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    libassimp.a: The main Assimp static library.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    libzlibstatic.a: Zlib (<span class="hljs-keyword">if</span> -DASSIMP_BUILD_ZLIB=ON).</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  Intermediate object files (.obj) <span class="hljs-keyword">in</span> build/ subdirectories.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Install: Copy the final libraries/headers to a specified directory <span class="hljs-keyword">for</span> use <span class="hljs-keyword">in</span> other projects.</span><br>cmake --install build --prefix /f/D/software/cpp_packages/assimp-install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">In the specified --prefix directory (/f/D/software/cpp_packages/assimp-install):</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">include/assimp/: Header files (e.g., anim.h, scene.h).</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">lib/: Static libraries (libassimp.a, libzlibstatic.a).</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">cmake/: CMake configuration files <span class="hljs-keyword">for</span> downstream projects.</span><br></code></pre></td></tr></table></figure><p>After these command lines, check the install directory to confirm the files below exist.</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-operator">/</span>f<span class="hljs-operator">/</span>D<span class="hljs-operator">/</span>software<span class="hljs-operator">/</span>cpp_packages<span class="hljs-operator">/</span>assimp-install<span class="hljs-symbol">/</span><br>├── include<span class="hljs-symbol">/</span><br>│   └── assimp<span class="hljs-symbol">/</span>       <span class="hljs-comment"># Headers</span><br>├── lib<span class="hljs-symbol">/</span><br>│   ├── libassimp.a   <span class="hljs-comment"># Static library</span><br>│   └── libzlibstatic.a<br>└── lib<span class="hljs-operator">/</span>cmake<span class="hljs-operator">/</span>assimp<span class="hljs-symbol">/</span> <span class="hljs-comment"># CMake config files</span><br></code></pre></td></tr></table></figure><p>The next step is to create a <code>assimp</code> folder inside the project directory (e.g., inside a folder called <code>extern</code>) and copy the folders in assimp-install to the newly created folder. Then add a CMakeLists.txt inside the <code>assimp</code> folder and modify the CMakeLists.txt in the root folder of the project. Here, let’s see a CMakeLists as an example.</p><p><strong>CMakeLists.txt in assimp</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake_minimum_required(VERSION 3.10)<br>project(assimp_lib)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Create an interface library <span class="hljs-keyword">for</span> Assimp headers</span><br>add_library(assimp_headers INTERFACE)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Include Assimp headers</span><br>target_include_directories(assimp_headers INTERFACE $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/include)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Add Assimp static library directly with full path</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add_library(assimp STATIC <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib/libassimp.a)</span><br>add_library(assimp STATIC IMPORTED)<br>set_target_properties(assimp PROPERTIES<br>    IMPORTED_LOCATION $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/lib/libassimp.a<br>    INTERFACE_INCLUDE_DIRECTORIES $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/include<br>    LINKER_LANGUAGE CXX  # Specify C++ as the linker language<br>)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Link Zlib directly <span class="hljs-keyword">if</span> it was built with Zlib support</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">add_library(zlib STATIC IMPORTED)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">set_target_properties(zlib PROPERTIES</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    IMPORTED_LOCATION <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib/libzlibstatic.a</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    INTERFACE_INCLUDE_DIRECTORIES <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/include</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">)</span><br>add_library(zlib STATIC IMPORTED)<br>set_target_properties(zlib PROPERTIES<br>    IMPORTED_LOCATION $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/lib/libz.a<br>    INTERFACE_INCLUDE_DIRECTORIES $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/include<br>    LINKER_LANGUAGE C  # Specify C as the linker language for Zlib<br>)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Link Assimp headers to Assimp library and Zlib to Assimp</span><br>target_link_libraries(assimp INTERFACE assimp_headers zlib)<br></code></pre></td></tr></table></figure><p><strong>CMakeLists.txt in project root directory</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake_minimum_required(VERSION 3.10)<br>project(MyOpenGL)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Set the C++ standard</span><br>set(CMAKE_CXX_STANDARD 11)<br>set(CMAKE_CXX_STANDARD_REQUIRED True)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">When including GLFW as part of your build, you probably don<span class="hljs-string">&#x27;t want to build the GLFW tests, examples and documentation. To disable these, set the corresponding cache variables before adding the GLFW source tree.</span></span><br>set(GLFW_BUILD_DOCS OFF CACHE BOOL &quot;&quot; FORCE)<br>set(GLFW_BUILD_TESTS OFF CACHE BOOL &quot;&quot; FORCE)<br>set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL &quot;&quot; FORCE)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Add GLFW as a subdirectory. Add the root directory of the GLFW source tree to your project. This will add the glfw target to your project.</span></span><br>add_subdirectory(extern/glfw-3.4)<br><br>add_subdirectory(extern/glad)<br><br>add_subdirectory(extern/glm-1.0.1)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Gererate root_directory.h based on its template root_directory.h.in</span></span><br>configure_file(configuration/root_directory.h.in configuration/root_directory.h)<br><span class="hljs-meta prompt_">include_directories($</span><span class="language-bash"><span class="hljs-string">&#123;CMAKE_BINARY_DIR&#125;/configuration)</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Include directories 把include文件夹添加到项目中</span></span><br>include_directories(include)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Link directories</span></span><br><span class="hljs-meta prompt_">link_directories($</span><span class="language-bash"><span class="hljs-string">&#123;CMAKE_SOURCE_DIR&#125;/lib)</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Add source files as SRC_LIST</span></span><br>aux_source_directory(./src SRC_LIST)<br><br>add_executable(MyOpenGL $&#123;SRC_LIST&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string"># Add executable except for test.cpp in SRC_LIST</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">list(REMOVE_ITEM SRC_LIST $&#123;CMAKE_SOURCE_DIR&#125;/src/test.cpp)</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">add_executable(MyOpenGL $&#123;SRC_LIST&#125;)</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string"># Add test.cpp as test executable</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">add_executable(test $&#123;CMAKE_SOURCE_DIR&#125;/src/test.cpp)</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Once GLFW has been added, link your application against the glfw target. This adds the GLFW library and its link-time dependencies as it is currently configured, the include directory for the GLFW header and, when applicable, the GLFW_DLL macro.</span></span><br>target_link_libraries(MyOpenGL glfw)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Note that the glfw target does not depend on OpenGL, as GLFW loads any OpenGL, OpenGL ES or Vulkan libraries it needs at runtime. If your application calls OpenGL directly, instead of using a modern extension loader library, use the OpenGL CMake package.</span></span><br>find_package(OpenGL REQUIRED)<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">If OpenGL is found, the OpenGL::GL target is added to your project, containing library and include directory paths. Link against this like any other library.</span></span><br>target_link_libraries(MyOpenGL OpenGL::GL)<br><br>target_link_libraries(MyOpenGL glad)<br><br>target_link_libraries(MyOpenGL glm)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Add Assimp as a subdirectory</span></span><br>add_subdirectory(extern/assimp)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Link Assimp and Zlib (if needed) to MyOpenGL executable</span></span><br>target_link_libraries(MyOpenGL<br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-string">&#123;CMAKE_SOURCE_DIR&#125;/extern/assimp/lib/libassimp.a</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-string">&#123;CMAKE_SOURCE_DIR&#125;/extern/assimp/lib/libzlibstatic.a  )</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Include Assimp headers explicitly if the above doesn&#x27;</span>t work</span><br>target_include_directories(MyOpenGL PRIVATE $&#123;CMAKE_SOURCE_DIR&#125;/extern/assimp/include)<br></code></pre></td></tr></table></figure><p>If we can run the program successfully, done!</p><h1 id="references">References</h1><p><a href="https://www.glfw.org/docs/3.3/build_guide.html#build_link_cmake_source">https://www.glfw.org/docs/3.3/build_guide.html#build_link_cmake_source</a> (search for “With CMake and GLFW source”)<br><a href="https://www.cnblogs.com/asmurmur/p/17720760.html">https://www.cnblogs.com/asmurmur/p/17720760.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - Radiometry Foundation</title>
    <link href="/2025/02/05/CS8803-CGA-L07/"/>
    <url>/2025/02/05/CS8803-CGA-L07/</url>
    
    <content type="html"><![CDATA[<h2 id="radiometry">Radiometry</h2><h3 id="definition">Definition</h3><ul><li>Radiometry studies the measurement of electromagnetic radiation, including visible light.</li><li>Radiometry quantifies radiation in terms of its physical power (energy per unit time) and spatial distribution.</li></ul><h3 id="photons">Photons</h3><ul><li>A photon is an elementary particle, the quantum of the electromagnetic field.</li><li>Photons have different ways of interaction: absorption, emission, scattering, etc.</li><li>In computer rendering, <strong>photon mapping</strong> is a global illumination technique for simulating caustics and soft shadows.</li><li>We measure energy by “counting photons”.</li></ul><h4 id="units">Units</h4><p>Each photon carries energy.</p><p><img src="units.png" alt="units"></p><h3 id="radiometry-properties">Radiometry Properties</h3><ol><li>Flux <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span></li></ol><p>Total amount of radiant energy passing through surface or space <strong>per unit time</strong>.</p><p>Flux = Energy / Time</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo stretchy="false">[</mo><mfrac><mi>J</mi><mi>S</mi></mfrac><mo>=</mo><mi>W</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\Phi(A) [\frac{J}{S} = W]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.09618em;">J</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">]</span></span></span></span></p><p>Examples:</p><ul><li>number of photons hitting a wall per second</li><li>number of photons leaving a lightbulb per second</li></ul><ol start="2"><li>Irradiance E</li></ol><p>Area density of <strong>flux</strong>.</p><p>Flux <strong>per unit area</strong> arriving at a surface.</p><p>Irradiance = Arriving Flux / Area</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">[</mo><mfrac><mi>W</mi><msup><mi>m</mi><mn>2</mn></msup></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">E(x) = \frac{d\Phi(A)}{dA(x)} [\frac{W}{m^2}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">A</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mtight">Φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">A</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span></p><p>Example: Number of photons hittinga small patch of a wall <strong>per second</strong>, divided by size of patch</p><ol start="3"><li>Radiosity B</li></ol><p>Area density of flux.<br>Flux per unit area <strong>leaving</strong> a surface.</p><p>Radiosity = Leaving Flux / Area</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>A</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">[</mo><mfrac><mi>W</mi><msup><mi>m</mi><mn>2</mn></msup></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">E(x) = \frac{d\Phi(A)}{dA(x)} [\frac{W}{m^2}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">A</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mtight">Φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">A</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span></p><p>Example: Number of photons reflecting off a small patch of a wall per second, divided by size of patch.</p><ol start="4"><li>Intensity I</li></ol><p><strong>Directional density</strong> of flux.</p><p>Power (flux) <strong>per solid angle</strong>.</p><p>Angle/Solid angle: Length/area of object’s projection onto a unit circle/sphere (angle = l/r; solid angle = A/r^2).</p><p>Intensity = Flux / Solid Angle</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><mi mathvariant="normal">Φ</mi></mrow><mrow><mi>d</mi><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover></mrow></mfrac><mo stretchy="false">[</mo><mfrac><mi>W</mi><mrow><mi>s</mi><mi>r</mi></mrow></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">I(\vec{\omega}) = \frac{d\Phi}{d\vec{\omega}} [\frac{W}{sr}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mtight">Φ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">sr</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span></p><p>Example: Power per unit solid angle emanating from a point source.</p><ol start="5"><li><strong>Radiance L</strong> (most important)</li></ol><p><strong>Flux density （flux is energy per unit time） per unit solid angle, per perpendicular unit area</strong>.</p><p>Intensity = (Flux / Solid Angle) / Perpendicular Area</p><p><img src="radiance.png" alt="equation"></p><p>The idea of perpendicular area connects to the <strong>Lambertian model</strong> we studied in Phong shading.</p><p>(From Wiki: The Lambertian model describes the behavior of ideal diffuse reflecting surfaces, known as Lambertian surfaces. These surfaces exhibit uniform brightness when observed from any angle, meaning their apparent brightness remains constant regardless of the observer’s viewpoint. This characteristic is due to Lambert’s cosine law, which states that the radiant intensity observed from such a surface is directly proportional to the cosine of the angle between the observer’s line of sight and the surface normal.)<br><img src="lambertian.png" alt="lambertian model"><br><img src="lambertian1.png" alt="lambertian model"><br><img src="lambertian2.png" alt="lambertian model"><br><img src="cosine_law.png" alt="cosine law"></p><h4 id="summary">Summary</h4><p><img src="radiometry.png" alt="summary"></p><h3 id="radiance-and-ray">Radiance and Ray</h3><ul><li>Fundamental quantity for ray tracing</li><li>Remains constant along a ray in a vacuum-like media (类真空介质)</li><li>Varys spatially along a ray in a participating media (参与介质，Participating media may absorb, emit and/or scatter light. )</li><li>Incident radiance at one point can be expressed as outgoing radiance at another point: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo separator="true">,</mo><mo>−</mo><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_i(x, \omega) = L_o(y, -\omega)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span></span></span></span></li></ul><h3 id="expressing-flux-with-radiance">Expressing flux with radiance</h3><p><img src="radiance_flux.png" alt="Integrate radiance over hemisphere and area"></p><h2 id="bidirectional-reflectance-distribution-function-brdf">Bidirectional Reflectance Distribution Function (BRDF)</h2><h3 id="brdf-definition">BRDF Definition</h3><p><img src="BRDF_definition.png" alt="definition"></p><h4 id="brdf-for-ideal-diffuse-reflection">BRDF for Ideal Diffuse Reflection</h4><p>Reflected radiance is a (hemi)spherical integral of incident radiance from all directions:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi>i</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi>r</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi>i</mi></msub><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_r(x, \vec{\omega}_r) = \int _{H^2} f_r(x, \vec{\omega}_i, \vec{\omega}_r) L_i(x, \vec{\omega}_i) cos\theta _i d\omega _i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1666em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</p><p>Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi>i</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(x, \vec{\omega}_i, \vec{\omega}_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> (BRDF) is a constant, which means scattering light equal in all directions.</p><h4 id="brdf-for-ideal-specular-reflection">BRDF for Ideal Specular Reflection</h4><p><img src="BRDF_specular.png" alt="BRDF for Ideal Specular Reflection"></p><h3 id="brdf-properties">BRDF Properties</h3><p>Real/physically-plausible BRDFs obey:</p><ul><li><p>Energy Conservation:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi mathvariant="normal">_</mi><msup><mi>H</mi><mn>2</mn></msup><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi mathvariant="normal">_</mi><mi>i</mi><mo separator="true">,</mo><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi mathvariant="normal">_</mi><mi>r</mi><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>d</mi><mi>ω</mi><mi mathvariant="normal">_</mi><mi>i</mi><mo>≤</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mover accent="true"><msub><mi>ω</mi><mi>r</mi></msub><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\int \_{H^2} f_r(x, \vec{\omega}\_i, \vec{\omega}\_r) cos\theta \_i d\omega \_i \leq 1, \forall \vec{\omega_r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1241em;vertical-align:-0.31em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mord mathnormal">cos</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∀</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></p></li><li><p>Symmetry (Helmholtz reciprocity):<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi mathvariant="normal">_</mi><mi>i</mi><mo separator="true">,</mo><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi mathvariant="normal">_</mi><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi mathvariant="normal">_</mi><mi>r</mi><mo separator="true">,</mo><mover accent="true"><mi>ω</mi><mo>⃗</mo></mover><mi mathvariant="normal">_</mi><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(x, \vec{\omega}\_i, \vec{\omega}\_r) = f_r(x, \vec{\omega}\_r, \vec{\omega}\_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></p></li></ul><h4 id="isotropic-and-anisotropic-brdfs">Isotropic and Anisotropic BRDFs</h4><ul><li>If the BRDF is unchanged as the material is rotated around the normal, then it is isotropic, otherwise it is anisotropic.</li><li>Isotropic BRDFs are functions of just 3 variables (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><mi>δ</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\theta_i, \theta_r, \delta \phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mord mathnormal">ϕ</span></span></span></span>).</li></ul><p><img src="IsotropicAnisotropic.png" alt="Isotropic and Anisotropic"></p><h3 id="brdf-connection-to-phong-shading">BRDF connection to Phong Shading</h3><p>The connection between <strong>BRDF (Bidirectional Reflectance Distribution Function)</strong> and <strong>Phong shading</strong> lies in how both describe the way light reflects off surfaces, but they differ in complexity and realism.</p><hr><h4 id="brdf-bidirectional-reflectance-distribution-function"><strong>BRDF (Bidirectional Reflectance Distribution Function)</strong></h4><ul><li><p><strong>What it is:</strong> A mathematical function that describes how light is reflected at an opaque surface.</p></li><li><p><strong>Definition:</strong> It defines the ratio of reflected radiance in a given outgoing direction to the irradiance from an incoming light direction.</p></li><li><p><strong>General Form:</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><msub><mi>E</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">f_r(\omega_i, \omega_r) = \frac{dL_r(\omega_r)}{dE_i(\omega_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>Where:</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: Incoming light direction</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">\omega_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: Outgoing (view) direction</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">f_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: BRDF value</li></ul></li><li><p><strong>Purpose:</strong> Used in physically based rendering (PBR) to simulate realistic material reflections (like metal, wood, plastic).</p></li></ul><h4 id="phong-shading-model"><strong>Phong Shading Model</strong></h4><ul><li><p><strong>What it is:</strong> A simple, empirical model for approximating light reflection on shiny surfaces.</p></li><li><p><strong>Formula:</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo>=</mo><msub><mi>k</mi><mi>a</mi></msub><msub><mi>I</mi><mi>a</mi></msub><mo>+</mo><msub><mi>k</mi><mi>d</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold">L</mi><mo>⋅</mo><mi mathvariant="bold">N</mi><mo stretchy="false">)</mo><msub><mi>I</mi><mi>l</mi></msub><mo>+</mo><msub><mi>k</mi><mi>s</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold">R</mi><mo>⋅</mo><mi mathvariant="bold">V</mi><msup><mo stretchy="false">)</mo><mi>n</mi></msup><msub><mi>I</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">I = k_a I_a + k_d (\mathbf{L} \cdot \mathbf{N}) I_l + k_s (\mathbf{R} \cdot \mathbf{V})^n I_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf">N</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">V</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>Where:</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>k</mi><mi>d</mi></msub><mo separator="true">,</mo><msub><mi>k</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">k_a, k_d, k_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: Ambient, diffuse, and specular reflection coefficients</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">L</mi></mrow><annotation encoding="application/x-tex">\mathbf{L}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">L</span></span></span></span>: Light direction</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">N</mi></mrow><annotation encoding="application/x-tex">\mathbf{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">N</span></span></span></span>: Surface normal</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">R</mi></mrow><annotation encoding="application/x-tex">\mathbf{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">R</span></span></span></span>: Reflection direction</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">V</mi></mrow><annotation encoding="application/x-tex">\mathbf{V}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">V</span></span></span></span>: View direction</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>: Shininess coefficient</li></ul></li><li><p><strong>Purpose:</strong> Approximates the way light reflects off a shiny surface with diffuse and specular highlights.</p></li></ul><hr><p>Phong shading is like a basic, artist-friendly shortcut derived from the deeper concept of BRDF. It’s good for simple, fast rendering, while BRDF is the go-to for realistic, physically accurate rendering in modern graphics engines.</p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>radiance</tag>
      
      <tag>NeRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Push local project to existing remote repos</title>
    <link href="/2025/02/02/git-push2remote/"/>
    <url>/2025/02/02/git-push2remote/</url>
    
    <content type="html"><![CDATA[<p>Assume we have a local project with some finished contents and a newly created github repository (with/without <code>.gitignore</code> and <code>README.md</code>). The following steps show how to push our project to the remote repository.</p><h1 id="1-initialize-local-repo">1. Initialize local repo</h1><p>In the project root folder:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><h1 id="2-create-a-new-branch">2. Create a new branch</h1><p>If we run <code>git branch</code> right after <code>git init</code>, we’ll get:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git branch<br><span class="hljs-comment">* (no branch)</span><br></code></pre></td></tr></table></figure><p>So it’s recommended that we create a new branch first before add files. See remote branch name for reference.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure><p>Or just:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch <span class="hljs-selector-tag">main</span><br>git checkout <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure><h1 id="3-add-remote-origin">3. Add remote origin</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//github.com/your-username/your-repo.git</span><br></code></pre></td></tr></table></figure><p>test by:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><h1 id="4-add-changes-commit-and-push">4. Add changes, commit, and push</h1><h2 id="add-files">Add files</h2><p>Add all files:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></figure><p>Or create a local .gitignore in project root folder, and add some special files / folders you wanna ignore:<br>For example, in a cpp project, I don’t want the remote repo to track the build folder, then I can add <code>/build/</code> as a new line in .gitignore.</p><p>Or add selected files (use <code>git status</code> to check changed files paths):</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> selected_file_name<br></code></pre></td></tr></table></figure><h2 id="commit">Commit</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;init&quot;</span><br></code></pre></td></tr></table></figure><h2 id="push">Push</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure><p>If we have included <code>.gitignore</code> or <code>README.md</code> while creating the github repo, we might error pushing local changes:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"> ! [rejected]        main -&gt; main (non-fast-forward)<br><span class="hljs-symbol">error:</span> failed <span class="hljs-keyword">to</span> push some refs <span class="hljs-keyword">to</span> <span class="hljs-comment">&#x27;https://github.com/kiaraeven/RayTracingSeries_private.git&#x27;</span><br><span class="hljs-symbol">hint:</span> Updates were rejected because the tip <span class="hljs-keyword">of</span> your current branch <span class="hljs-built_in">is</span> behind<br><span class="hljs-symbol">hint:</span> its remote counterpart. Integrate the remote changes (e.g.<br><span class="hljs-symbol">hint:</span> <span class="hljs-comment">&#x27;git pull ...&#x27;) before pushing again.</span><br><span class="hljs-symbol">hint:</span> See the <span class="hljs-comment">&#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></code></pre></td></tr></table></figure><p>This is because the local main branch is behind the remote main branch on GitHub. This means there are commits on the remote repository that you don’t have in your local branch. To resolve this, we need to pull the latest changes from the remote main branch, integrate them with your local changes, and then push. The following commands pull the changes from the remote repository and merge them into your local branch, while allowing unrelated histories to be merged.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git pull origin <span class="hljs-selector-tag">main</span> <span class="hljs-attr">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure><h1 id="5-exceptions">5. Exceptions</h1><p>What if we incorrectly push some unrelated folder / files to the remote repo?</p><p>Take <code>/build/</code> as an example, if we have already push it to remote repo, we can just:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git rm -<span class="hljs-attribute">r</span> <span class="hljs-attr">--cached</span> build/<br></code></pre></td></tr></table></figure><p>It’s similar to <code>git add file_name</code>. Then remember to commit and push again. After these steps, check the remote repo, the unrelated folder should have been removed.</p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L19-Cameras</title>
    <link href="/2025/02/02/GAMES101-L19-Cameras/"/>
    <url>/2025/02/02/GAMES101-L19-Cameras/</url>
    
    <content type="html"><![CDATA[<h1 id="focal-length-f">Focal Length (<code>f</code>)</h1><ul><li>The <strong>focal length</strong> represents the distance from the <strong>camera (eye)</strong> to the <strong>image plane (viewport)</strong> in world space.</li><li>A larger focal length means a more <strong>zoomed-in</strong> effect (narrow FoV).</li><li>A smaller focal length means a <strong>wider</strong> perspective (wide FoV).</li></ul><h2 id="ray-tracing-interpretation">Ray Tracing Interpretation</h2><ul><li>The focal length determines how far the <strong>virtual image plane (viewport)</strong> is placed in front of the camera.</li><li>In ray tracing, we assume a <strong>thin lens model</strong>, where the camera sits at <code>(0,0,0)</code>, and the image plane is placed at <code>z = -f</code>.</li></ul><hr><h1 id="viewport-size-viewport_width-viewport_height">Viewport Size (<code>viewport_width</code>, <code>viewport_height</code>)</h1><ul><li>The <strong>viewport</strong> is the <strong>imaginary 2D plane</strong> where the rays originate before traveling into the scene.</li><li>The size of the viewport depends on:<ul><li><strong>Aspect Ratio</strong>: <code>(width / height)</code>, ensuring the image isn’t stretched.</li><li><strong>Focal Length</strong>: Affects the scale of the viewport.</li><li><strong>FoV</strong>: Determines how large the viewport appears relative to the scene.</li></ul></li></ul><h2 id="ray-tracing-interpretation">Ray Tracing Interpretation</h2><ul><li>The viewport is usually defined in <strong>world coordinates</strong> at <code>z = -f</code> (for a forward-facing camera).</li><li>The camera shoots rays from its <strong>center of projection</strong>, passing through each pixel on the viewport.</li></ul><hr><h1 id="field-of-view-fov">Field of View (FoV)</h1><ul><li><p>The <strong>field of view (FoV)</strong> is the angular extent of the scene captured by the camera.</p></li><li><p>Defined as <strong>vertical FoV</strong> (<code>θ</code>), where:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>tan</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mtext>viewport height</mtext><mi mathvariant="normal">/</mi><mn>2</mn></mrow><mtext>focal length</mtext></mfrac></mrow><annotation encoding="application/x-tex">\tan(\frac{\theta}{2}) = \frac{\text{viewport height} / 2}{\text{focal length}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mop">tan</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4911em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">focal length</span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">viewport height</span></span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>or solving for viewport height:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>viewport height</mtext><mo>=</mo><mn>2</mn><mo>×</mo><mi>f</mi><mo>×</mo><mi>tan</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mi>θ</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{viewport height} = 2 \times f \times \tan(\frac{\theta}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">viewport height</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mop">tan</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p></li><li><p>A <strong>large FoV</strong> (e.g., 90°) results in a <strong>wide-angle lens</strong> effect, capturing more of the scene.</p></li><li><p>A <strong>small FoV</strong> (e.g., 30°) results in a <strong>zoomed-in</strong> effect.</p></li></ul><h2 id="ray-tracing-interpretation">Ray Tracing Interpretation</h2><ul><li>When setting up a <strong>camera in ray tracing</strong>, we often specify the <strong>FoV</strong>, then derive the viewport size accordingly.</li></ul><hr><h1 id="relationship-between-focal-length-viewport-and-fov">Relationship Between Focal Length, Viewport, and FoV</h1><ol><li><p><strong>Focal Length and Viewport</strong></p><ul><li>The <strong>focal length</strong> (<code>f</code>) directly affects the size of the <strong>viewport</strong>.</li><li><strong>Larger <code>f</code></strong> → Smaller viewport (zoomed in).</li><li><strong>Smaller <code>f</code></strong> → Larger viewport (wider view).</li></ul></li><li><p><strong>FoV and Viewport Size</strong></p><ul><li><strong>Increasing FoV</strong> (wider angle) → <strong>Larger viewport</strong>.</li><li><strong>Decreasing FoV</strong> (zoom-in) → <strong>Smaller viewport</strong>.</li></ul></li><li><p><strong>FoV and Focal Length</strong></p><ul><li>They are <strong>inversely related</strong>:<ul><li><strong>Small FoV → Large focal length (zoom-in)</strong></li><li><strong>Large FoV → Small focal length (wide-angle)</strong></li></ul></li></ul></li></ol><h1 id="defocus-blur-depth-of-field">Defocus Blur (Depth of Field)</h1><p>See <a href="https://raytracing.github.io/books/RayTracingInOneWeekend.html#defocusblur/athinlensapproximation">https://raytracing.github.io/books/RayTracingInOneWeekend.html#defocusblur/athinlensapproximation</a> 13. Defocus Blur for more.</p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - Neural SDF</title>
    <link href="/2025/02/02/CS8803-CGA-L06/"/>
    <url>/2025/02/02/CS8803-CGA-L06/</url>
    
    <content type="html"><![CDATA[<h2 id="traditional-sdf-representation">Traditional SDF Representation</h2><ul><li>The grid-based SDF representation takes a query point position as input and produces its SDF as output.</li><li>Recall the three steps for grid-based query:<ul><li>identify the grid cell;</li><li>calculate the fractions within the cell;</li><li>calculate the interpolated SDF value from the grid nodes.</li></ul></li></ul><h2 id="neural-sdf-representation">Neural SDF Representation</h2><p>The neural network takes a query point position as input and produces its SDF as output. We can think of the neural network as a black-box function <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> that replaces the grid</p><h3 id="neural-feilds">Neural Feilds</h3><ul><li>A neural field is a function represented by a neural network that maps continuous coordinates to physical quantities, signals, or other desired outputs.</li><li>It is also known as a coordinate-based neural network, <strong>implicit neural representation</strong> (INR), or neural implicit function</li><li>Mathematically a neural field is a function of the form: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>:</mo><msub><mi>R</mi><mi>d</mi></msub><mo>−</mo><mo>&gt;</mo><msub><mi>R</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">f(p, \theta): R_d -&gt; R_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.<ul><li>The function f is learned via a neural network. f is a function parameterized by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>, which represents the trainable weights of the neural network.</li><li>p is the input coordinate, which lies in a d-dimensional space. This means that the input to the neural field is a point in a continuous space.</li><li>The function maps this input coordinate to an n-dimensional output. The output can represent different physical quantities, such as:<ul><li>A scalar value (e.g., signed distance function, temperature, density)</li><li>A vector field (e.g., velocity in fluid dynamics)</li><li>A color value (e.g., in neural radiance fields for rendering)</li></ul></li></ul></li></ul><h4 id="why-neural-fields">Why Neural Fields?</h4><p>As compared with the traditional field representation such as a grid, neural representations manifest the following merits:</p><ul><li><p>Memory efficient</p></li><li><p>Domain agnostic</p></li><li><p>Inherently differentiable</p></li></ul><h5 id="memory-efficiency-grid-vs-nn">Memory Efficiency: Grid v.s. NN</h5><ul><li>Grid: The accuracy of an SDF discretized on a grid depends on its <strong>grid resolution</strong>: the denser the grid (i.e., the smaller the grid cell size), the more accurate the SDF.<ul><li>This is similar to a triangle mesh: the more triangles it has (i.e., the smaller each triangle is), the more accurately it represents a shape.</li></ul></li><li>Neural Network: Unlike a grid-based SDF, a neural network represents the SDF function continuously, requiring significantly less memory while maintaining high accuracy.<ul><li>Increasing the capacity of a neural network (i.e., number of weights and layers) can improve SDF accuracy, but it remains far more memory-efficient than storing explicit grid-based or mesh-based representations.</li></ul></li></ul><p><img src="mem_efficiency.png" alt="memory efficiency"></p><h5 id="domain-agnosticism-不可知论-grid-vs-nn">Domain Agnosticism (不可知论): Grid v.s. NN</h5><ul><li>Grid: A grid-based SDF is domain-specific, as its resolution and memory requirements depend on the spatial discretization of a fixed domain, making it inflexible for handling shapes of varying scales or unbounded spaces.</li><li>Neural Network: In contrast, a neural network-based SDF is domain-agnostic, as it learns a continuous function independent of a fixed grid, enabling flexible representation across different scales and even generalization beyond the training domain.</li></ul><p><img src="DomainAgnosticism.png" alt="Domain Agnosticism"></p><h5 id="differentiability">Differentiability</h5><ul><li>Grid: A grid-based SDF is only differentiable at discrete points and requires numerical approximations (e.g., finite differences) to compute gradients, which can introduce errors and discontinuities.</li><li>Neural Network: A neural network-based SDF is inherently differentiable, as its output is a continuous function of its input, allowing for exact analytical gradients that enable efficient optimization and gradient-based rendering techniques.</li></ul><p><img src="Differentiability.png" alt="Differentiability"></p><h2 id="neural-networks-foundation">Neural Networks Foundation</h2><h3 id="architecture">Architecture</h3><ul><li>Each node (neuron) in a layer receives inputs, applies a weighted sum followed by an activation function, and produces an output.</li><li>Each edge has an associated weight that determines the strength of the connection between two nodes.</li></ul><h3 id="loss-function">Loss Function</h3><ul><li>A loss function measures the difference between predicted and true outputs.</li><li>Typically, a loss function can be calculated as the Mean Squared Error (MSE) of all the data samples:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Loss</mtext><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><mo>∑</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mtext>pred</mtext></msub><mo>−</mo><msub><mi>y</mi><mtext>true</mtext></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\text{Loss} = \frac{1}{N} \sum (y_{\text{pred}} - y_{\text{true}})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">Loss</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">pred</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">true</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li></ul><h3 id="forward-and-backward-computation">Forward and backward computation</h3><ul><li>Forward: We know the parameters f and input X and want to calculate the output W. Given a network architecture and parameters, calculate the prediction based on the input.</li><li>Backward: We know a set of input and output (X,W) and calculate parameters f. Given a network architecture and training data set (input-&gt;output), calculate the network parameters.</li></ul><h3 id="chain-rule">Chain Rule</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">z = f(y), y = g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>z</mi><mo>=</mo><mfrac><mrow><mi>d</mi><mi>z</mi></mrow><mrow><mi>d</mi><mi>y</mi></mrow></mfrac><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">dz = \frac{dz}{dy} \frac{dy}{dx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4133em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h2 id="neural-networks-for-sdf">Neural Networks for SDF</h2><h3 id="neural-sdf">Neural SDF</h3><ul><li><p>We describe it as the zero iso-surface decision boundaries of a feed-forward network trained to represent the SDF: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi mathvariant="bold">p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"><mi mathvariant="bold">p</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup><mo separator="true">,</mo><mi>s</mi><mo>∈</mo><mi mathvariant="double-struck">R</mi></mspace></mrow><annotation encoding="application/x-tex">s = \phi(\mathbf{p}), \quad \mathbf{p} \in \mathbb{R}^3, s \in \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathbf">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbf">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">R</span></span></span></span>.</p><ul><li>Feed-forward network means that information flows in one direction only - forward - from the input nodes, through hidden layers (if any), and to the output nodes. In this case, it takes a 3D point p as input and outputs a scalar value s. The network is specifically trained so that when the output is 0 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\phi(p) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>), it defines an implicit surface - meaning it marks the boundary of the shape being represented.</li></ul></li><li><p>The underlying surface is implicitly represented by the zero isosurface: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\phi(p) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>.</p></li><li><p>This implicit surface can be viewed by Ray Casting or Marching Cube.</p></li></ul><h3 id="key-idea">Key Idea</h3><ul><li>The key idea is to directly regress the continuous SDF from point samples using deep neural networks.</li><li>This representation can be intuitively understood as a learned binary classifier, where the decision boundary corresponds to the surface of the shape itself.<br><img src="binary_classifier.png" alt="binary classifier"></li></ul><h3 id="training-data-format">Training Data Format</h3><p>Given a target shape, we prepare a set of pairs X composed of 3D point samples and their SDF values:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>:</mo><mo>=</mo><mrow><mi>p</mi><mo separator="true">,</mo><mi>s</mi><mo>:</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi></mrow></mrow><annotation encoding="application/x-tex">X := {p, s : \phi(p) = s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span></span></span></span></span></p><h3 id="training-data-preparation">Training Data Preparation</h3><ul><li>A complete 3D shape mesh (P) is used as input.</li><li>500,000 spatial points (x) are sampled around the mesh.</li><li>We sample more aggressively near the surface of the object as we want to capture a more detailed SDF near the surface.</li><li>To compute the SDF value of each sample point, we find the closest point on the mesh surface (denoted as P) to the sampled point x. Computes the SDF value as the distance between x and its closest point P.</li></ul><h3 id="loss-function">Loss Function</h3><p><img src="loss_func.png" alt="loss function"></p><h3 id="network-architecture">Network Architecture</h3><ul><li>A feed-forward network composed of eight <strong>fully connected layers</strong>, each of them applied with <strong>dropouts</strong>.</li><li>All internal layers are 512-dimensional and have ReLU activation.</li></ul><p><img src="arch.png" alt="network architecture"></p><p><img src="SIREN.png" alt="Another activation function that can representing small-scaled periodic features and have more expressive derivatives (sinusoidal function 正弦函数)"></p><h2 id="shape-latent-space">Shape Latent Space</h2><h3 id="latent-space-representation-for-many-shapes">Latent Space Representation for Many Shapes</h3><ul><li>Motivation: We want to create a neural network model that can represent <strong>many shapes</strong> by discovering their common properties and embed them all in a low dimensional latent space.</li><li>Key idea: We can introduce a latent vector z as a second input to the network, serving as the encoding of the desired shape.<br><img src="latent.png" alt="latent vector to code shapes"></li></ul><h3 id="loss-function-for-many-shapes">Loss Function for Many Shapes</h3><p><img src="latent_loss.png" alt="loss function"></p><h3 id="deep-sdf-applications">Deep SDF Applications</h3><p><img src="latent_app.png" alt="applications"></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>SDF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - SDF Representation</title>
    <link href="/2025/01/30/CS8803-CGA-L05/"/>
    <url>/2025/01/30/CS8803-CGA-L05/</url>
    
    <content type="html"><![CDATA[<h2 id="mesh-gt-sdf">Mesh -&gt; SDF</h2><h3 id="question-i-triangle-gt-sdf">Question I: Triangle -&gt; SDF</h3><ul><li>Given an arbitrary object for which we cannot derive an analytical expression or a combination of expressions to represent its SDF, we aim to create a representation that characterizes its shape.</li><li>More spacifically, we want a data structure to store SDF as a field for future querying, which reminds us of texture mapping (given a set of coordinates, return a color vector).</li></ul><h3 id="recap-texture-image">Recap: Texture Image</h3><p>Given an inquiry point (u,v), we want to read its color from the image. As shown in the figure, black dots represent pixels. Only this small square contributes to the interpolated value of the purple point, and all other adjacent squares don’t matter.<br><img src="texture_mapping.png" alt="texture mapping"></p><p>To interpolate the value at the purple point, we use <strong>bilinear interpolation</strong> (for 2D it’s bilinear interpolation and for 3D it’s trilinear interpolation). First, to determine the position of P within the square, we assume s is pixel size, and then we have:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mo stretchy="false">(</mo><mi>u</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>s</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>s</mi><mo separator="true">,</mo><mi>β</mi><mo>=</mo><mo stretchy="false">(</mo><mi>v</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>s</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">\alpha = (u mod s) / s, \beta = (v mod s) / s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span></p><p>After normalization, we assume the edge length of the square is 1. The Key idea is to use the area of the opposite sub-rectangle.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>a</mi><mi>r</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>p</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo><msub><mi>ϕ</mi><mn>11</mn></msub><mo>+</mo><mi>α</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo><msub><mi>ϕ</mi><mn>21</mn></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mi>β</mi><msub><mi>ϕ</mi><mn>12</mn></msub><mo>+</mo><mi>α</mi><mi>β</mi><msub><mi>ϕ</mi><mn>22</mn></msub></mrow><annotation encoding="application/x-tex">BilinearIntp(P) = (1-\alpha)(1-\beta) \phi _{11} + \alpha(1-\beta) \phi _{21} + (1-\alpha) \beta \phi _{12} + \alpha \beta \phi _{22}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">in</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">n</span><span class="mord mathnormal">tp</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><img src="bilinear_interpolate.png" alt="bilinear interpolation"></p><h3 id="data-structure-sdf-grid">Data Structure: SDF Grid</h3><p>Similar to texture image, we store the SDF for each pixel based on its position. In the context of SDF, we call this texture space a grid and each pixel on the texture a grid node. See the figure below for the definitions for nodes and cells. Get the incident nodes for a spacific cell based on their indices.<br><img src="grid.png" alt="grid data structure"><br><img src="grid1.png" alt="grid data structure"></p><h3 id="calculate-the-sdf-for-each-grid-node">Calculate the SDF for each grid node</h3><p>The idea is to follow the definition of SDF by finding the query point’s closest point on the surface and then use its distance as the SDF. For example, if the input shape is a triangle mesh, we can calculate the distance from the query point to all the triangles on the mesh surface and then find the closest distance. For 2D SDF, we calculate the distances between the query point and a group of segments. For 3D SDF, we calculate the distances between the query point and a group of triangles. We then determine the sign of the SDF by checking whether the query point is outside (+) or inside (-) the triangle mesh object (with ray casting method).</p><p><strong>Pseudo Code: Mesh-to-SDF Construction (A Naïve Version)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Input: a triangle mesh</span><br><span class="hljs-comment"># Output: its SDF</span><br><span class="hljs-comment"># Algorithm:</span><br>initialize a grid that covers the interested domain<br><span class="hljs-keyword">for</span> each node on the grid<br>    calculate its sdf magnitude by traversing the triangles on the surface <span class="hljs-keyword">and</span> finding the closest distance to the triangle surface <span class="hljs-comment"># It might be expensive to do this for every grid node</span><br>    calculate its sdf sign by checking <span class="hljs-keyword">if</span> the node <span class="hljs-keyword">is</span> inside <span class="hljs-keyword">or</span> outside the triangle mesh <span class="hljs-comment"># traversing all triangles on the mesh is expensive</span><br>    store the sdf value on the grid node<br></code></pre></td></tr></table></figure><h4 id="improvements-in-sdf-calculation">Improvements in SDF calculation</h4><p>As in the comments in the pseudocode, there are some parts of the algorithm that can be improved.</p><h5 id="improvement-i-propagate-a-front-of-sdf-values">Improvement I: Propagate a Front of SDF Values</h5><ul><li>Key Idea: Instead of calculating SDF for all nodes, we want to only calculate the SDF values for the grid nodes that are <strong>near the surface</strong> (i.e., within a narrowband of the surface), while for grid nodes that are far away from the surface (i.e., outside the narrowband), we calculate their SDF values by solving a mathematical equation.</li><li>When calculating SDF gradient, for an arbitrary point x in the 2D domain, the magnitude of its gradient always satisfies: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><mi>ϕ</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|\nabla \phi| = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣∇</span><span class="mord mathnormal">ϕ</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>. In SDF calculation, this gradient equation has a more generalized name called the <strong>Eikonal equation</strong>. The process of solving this equation is called the <strong>Fast Marching Method (FMM)</strong>.</li></ul><h6 id="eikonal-equation-and-fast-marching">Eikonal Equation and Fast Marching</h6><ul><li>We first calculate the SDF values for all the grid nodes that are within the narrowband of the surface</li><li>Then we propagate the front of SDF values from the narrowband to the regions outside the narrowband. This step is typically implemented with a minimum heap like the Dijkstra shortest-path algorithm. Each time, we select a node that is on the front and calculate its SDF value by solving the Eikonal equation.</li><li>See the figure below, assume the edge length of the cell is 1, then we can approximate the partial gradient on x-axis and y-axis as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>ϕ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\phi_1 - \phi_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>ϕ</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">\phi_1 - \phi_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. Then the magnitude of the gradient can be calculated as in the equation in the figure.</li></ul><p><img src="SDF_grad.png" alt="Eikonal Equation and Fast Marching"></p><h5 id="improvement-ii-store-triangles-in-a-hash-table">Improvement II: Store Triangles in a Hash Table</h5><ul><li>Key Idea: Instead of going through all triangles for a query node to find the minimum distance from these triangles, we can store triangles in a hash table and only use the triangles that are close by.</li><li>Each grid cell has a hash key generated by its grid cell indices (i,j) and a hash value as a list of triangle indices.</li><li>For each query grid node, we only look at the hash table cells that are neighboring to the node.</li><li>This algorithm is called Spatial Hashing, which has been widely used in many different graphics applications such as physics simulation, collision query, and neural representation.</li></ul><p><img src="spatial_hashing.png" alt="spatial hashing"></p><h4 id="improved-sdf-calculation">Improved SDF Calculation</h4><p>Pseudo Code: Mesh-to-SDF Construction</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Input: a triangle mesh</span><br><span class="hljs-comment"># Output: its SDF</span><br><span class="hljs-comment"># Algorithm:</span><br>initialize a grid that covers the interested domain<br>initialize a spatial <span class="hljs-built_in">hash</span> table <span class="hljs-keyword">for</span> <span class="hljs-built_in">all</span> triangles on the triangle mesh<br><span class="hljs-keyword">for</span> each node that <span class="hljs-keyword">is</span> within the narrow band<br>    calculate its SDF magnitude by finding the closest triangle <span class="hljs-keyword">from</span> the spatial <span class="hljs-built_in">hash</span> table<br>solve the SDF values <span class="hljs-keyword">for</span> nodes outside the narrowband using Fast Marching <span class="hljs-comment"># In many areas outside computer graphics, this step is called reinitialization</span><br></code></pre></td></tr></table></figure><h3 id="calculate-the-sdf-for-an-arbitrary-query-point">Calculate the SDF for an arbitrary query point</h3><ul><li>As described above, we can calculate and store the SDF for each grid node based on its position.</li><li>Then we can calculate the SDF for an arbitrary query point based on nodes’ SDF:<ul><li>Determine which grid cell the query point falls into;</li><li>Calculate the fraction of the point inside the cell;</li><li>Calculate SDF by interpolating the values from the corners of the grid cell.</li></ul></li></ul><p><strong>Pseudo code for SDF calculation</strong></p><ul><li>Step I: Determine grid cell:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>f</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>x</mi><mn>0</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>y</mi><mn>0</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i, j) = ( floor((x-x0)/dx), floor((y-y0)/dx) )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">oor</span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord">0</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">oor</span><span class="mopen">((</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">0</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span><br>Here, (i, j) is the the coordinate of the bottom-left node of the square.</li><li>Step II: Calculate the fractions inside the cell:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>f</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>f</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>x</mi><mn>0</mn><mo stretchy="false">)</mo><mo>−</mo><mi>d</mi><mi>x</mi><mo>×</mo><mi>i</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>y</mi><mn>0</mn><mo stretchy="false">)</mo><mo>−</mo><mi>d</mi><mi>x</mi><mo>×</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(f_x, f_y) = ( (x-x0) - dx \times i, (y-y0) - dx \times j )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></li><li>Step III: Interpolate SDF value:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>f</mi><mi>x</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>f</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mi>s</mi><mi>d</mi><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>f</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>f</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mi>s</mi><mi>d</mi><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>f</mi><mi>x</mi></msub><mo stretchy="false">)</mo><msub><mi>f</mi><mi>y</mi></msub><mi>s</mi><mi>d</mi><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><msub><mi>f</mi><mi>x</mi></msub><msub><mi>f</mi><mi>y</mi></msub><mi>s</mi><mi>d</mi><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s = (1-f_x)(1-f_y)sdf(i, j) + f_x(1-f_y)sdf(i+1, j) + (1-f_x)f_ysdf(i, j+1) + f_xf_ysdf(i+1, j+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.10764em;">df</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.10764em;">df</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.10764em;">df</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.10764em;">df</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ul><h3 id="calculate-the-sdf-gradient-on-a-grid">Calculate the SDF gradient on a grid</h3><p>We approximate the gradient by calculating the difference of SDF values between the neighboring nodes along each axis. This idea is called “finite difference,” which has been widely used in scientific computing.<br><img src="ongrid.png" alt="calculation on a grid"></p><p>We can also extend the idea of “finite difference” to 3D gradient calculation.<br><img src="grad3d.png" alt="Calculate SDF gradient in 3D"></p><h3 id="find-the-closest-point-from-the-query-point-onto-the-surface-with-grid">Find the closest point from the query point onto the surface with grid</h3><p>Based on the definition of closest point and closest distance, we can</p><ol><li>read the SDF value <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>;</li><li>calculate the SDF gradient <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\nabla \phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∇</span><span class="mord mathnormal">ϕ</span></span></span></span>;</li><li>move along <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\nabla \phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∇</span><span class="mord mathnormal">ϕ</span></span></span></span> by the distance of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>.</li></ol><p>Again, the SDF value <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> can be approximated with linear interpolation, and the SDF gradient <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\nabla \phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∇</span><span class="mord mathnormal">ϕ</span></span></span></span> can be approximated with finite difference.</p><p><img src="closest_pt.png" alt="how to find the closest point"></p><h3 id="render-an-sdf-object-on-grid">Render an SDF object on grid</h3><p>We use the grid to query SDF for each step along the ray. Everything else remains the same as our previous ray marching implementation. The same idea works for adaptive-step (each step we have a circle whose radius is the current SDF) ray marching as well. We just need to query SDF for each step from the background grid.</p><p><img src="raymarching_grid.png" alt="ray marching with grid"></p><h3 id="key-takeaway-for-sdf-calculation">Key Takeaway for SDF Calculation</h3><ul><li>Store SDF values on a grid</li><li>The SDF value for each grid node can be calculated by finding the shortest distance from all the triangles</li><li>Accelerate this calculation by propagating a front of SDF values from the surface (Fast Marching Method)</li><li>After initializing the SDF values on the grid, we can use it as a black box for ray marching rendering</li></ul><p>PS: In the above content we discussed how to convert meshes (triangles) to SDF. Other data structures can also be converted to SDF. For example, for point cloud or particles, we can treat each point as an implicit sphere and then calculate the point-based surface as the union of main spheres.</p><p>See the figure below, the green dots represent individual points in the point cloud. The black circles surrounding them are the implicit spheres associated with each point. The gray contour represents the final surface formed by the union of these spheres.</p><p><img src="pt_cloud.png" alt="point cloud to SDF"></p><h2 id="sdf-gt-mesh">SDF -&gt; Mesh</h2><h3 id="how-to-find-a-surface">How to find a surface</h3><p>The idea is to look at each edge on the grid cell and check if it has two <strong>different signs</strong> on its two nodes. If an edge has two different signs, then there is a surface point (just imagine the surface intersects with the grid edge on this point) on this edge. We <strong>find all such surface points and connect them</strong>.</p><p><img src="find_surface.png" alt="find a surface based on the signs of SDF"></p><h3 id="how-to-enumerate-all-cases">How to enumerate all cases</h3><ul><li>Each grid node has two cases (+/-), and in total there are 2^4 = 16 cases that we can enumerate</li><li>For each case we can draw its surface segments</li><li>By collecting all the segments into a segment mesh, we will extract the zero-contour of an SDF object from its grid representation</li><li>For implementation, we usually build a table for the enumeration of all cases</li></ul><p><img src="MarchingSquares.png" alt="Marching Squares"></p><p>This algorithm is called Marching Squares proposed by Lorensen, W. E., &amp; Cline, H. E. in 1987.</p><h4 id="extend-marching-squares-to-3d">Extend Marching Squares to 3D</h4><ul><li>We extract triangles instead of segments for 3D</li><li>There are 15 unique cases considering symmetry, and 2^8 = 256 cases in total</li><li>We maintain a giant table to enumerate all cases</li><li>The algorithm is called “Marching Cubes”</li></ul><h5 id="examples-for-marching-cubes">Examples for Marching Cubes</h5><ol><li>See the figure below, each node in the cell has an SDF value, and we want to reconstruct the surface mesh that intersects with this cell.</li></ol><ul><li>Step I: find all edges that have different signs (i.e., one positive sign and one negative sign)</li><li>Step II: Connect these edges to form triangles</li></ul><p><img src="marching_cubes1.png" alt="Example 1"></p><ol start="2"><li>Each node in the cell has an SDF value, and we want to reconstruct the surface mesh that intersects with this cell.</li></ol><ul><li>Step I: find all edges that have different signs (i.e., one positive sign and one<br>negative sign)</li><li>Step II: Connect these edges to form triangles</li></ul><p><img src="marching_cubes2.png" alt="Example 2"></p><p>For each of the 2^8 = 256 cases, we can draw triangles by following these steps, and store the way to calculate these triangles in a giant table.</p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>SDF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to function types in cpp</title>
    <link href="/2025/01/30/function-types/"/>
    <url>/2025/01/30/function-types/</url>
    
    <content type="html"><![CDATA[<h1 id="member-functions">Member Functions</h1><p>Functions that belong to a class and operate on its data members. It has access to all class members, including private data.</p><h2 id="key-points">Key Points:</h2><ul><li>Can access all members (public, private, protected).</li><li>Most member functions are called on an instance using objectName.functionName(). Static functions are called on the class (ClassName::Function()).</li><li>Can be defined inside (in .h files directly) or outside (declare the functions in .h files and define them outside using the ClassName::FunctionName syntax in .c files) the class.</li></ul><h1 id="static-member-functions">Static Member Functions</h1><p>Static functions belong to a class but do not operate on instance-specific data. They are useful for utility functions that do not require an instance of the class.</p><h2 id="key-points">Key Points:</h2><ul><li>Declared with static inside the class.</li><li>Can only access static members (The only condition for a static function to access a member (function and data member) is that the member must also be static. It has nothing to do with whether the member is public, private, or protected).</li><li>Called using ClassName::FunctionName(), but can also be called via objects.</li></ul><h2 id="use-cases">Use Cases:</h2><ul><li><p>Utility functions related to the class but not specific to any object.</p></li><li><p>Keeping track of object counts, configuration settings, singleton patterns, etc.</p><ul><li>Example (Key Takeaways: <strong>Static variables are shared among all instances</strong>):</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectCounter</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count;  <span class="hljs-comment">// Static variable to track object count</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ObjectCounter</span>() &#123;<br>        count++;  <span class="hljs-comment">// Increment count when object is created</span><br>    &#125;<br><br>    ~<span class="hljs-built_in">ObjectCounter</span>() &#123;<br>        count--;  <span class="hljs-comment">// Decrement count when object is destroyed</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">showCount</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// Static function to access static variable</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Number of objects: &quot;</span> &lt;&lt; count &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// Define and initialize static variable outside class</span><br><span class="hljs-type">int</span> ObjectCounter::count = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ObjectCounter::<span class="hljs-built_in">showCount</span>();  <span class="hljs-comment">// Outputs: 0 (No objects yet)</span><br><br>    ObjectCounter obj1, obj2;<br>    ObjectCounter::<span class="hljs-built_in">showCount</span>();  <span class="hljs-comment">// Outputs: 2 (Two objects created)</span><br><br>    &#123;<br>        ObjectCounter obj3;<br>        ObjectCounter::<span class="hljs-built_in">showCount</span>();  <span class="hljs-comment">// Outputs: 3 (Third object created)</span><br>    &#125; <span class="hljs-comment">// obj3 goes out of scope and is destroyed</span><br><br>    ObjectCounter::<span class="hljs-built_in">showCount</span>();  <span class="hljs-comment">// Outputs: 2 (obj3 destroyed)</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="inline-functions">Inline Functions</h1><p>An inline function is a function that the compiler replaces directly at the point of the function call to avoid function call overhead.</p><h2 id="when-to-use-inline-functions">When to use inline functions?</h2><ul><li>When the function is small (e.g., one or two lines of code).</li><li>When function call overhead needs to be minimized.</li><li>Avoid inlining large functions as it can increase binary size.</li></ul><h2 id="key-points">Key Points:</h2><ul><li>Suggested using the inline keyword, but modern compilers decide whether to actually inline it.</li><li>Works best for short, frequently called functions.</li><li>Inlining large functions can increase binary size (code bloat).</li></ul><h1 id="const-member-functions">Const Member Functions</h1><p>A member function that does not modify the state of an object. It guarantees that no member variables (except mutable ones) will be changed inside the function.</p><h2 id="syntax">Syntax</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">return_type <span class="hljs-title">function_name</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><h2 id="examples">Examples</h2><ol><li><strong>Marking getter functions as const</strong> is a best practice since they should not modify the object.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> value;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Example</span>(<span class="hljs-type">int</span> v) : <span class="hljs-built_in">value</span>(v) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>A <strong>mutable</strong> member variable can be modified inside a const function.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> counter;  <span class="hljs-comment">// `mutable` allows modification even in `const` functions</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Demo</span>() : <span class="hljs-built_in">counter</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increment</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        counter++;  <span class="hljs-comment">// Allowed because `counter` is mutable</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getCounter</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> counter;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="key-takeaways">Key Takeaways</h2><ul><li>A const member function ensures the object’s data remains unchanged.</li><li>Const objects can only call const functions (cause compilation error). Non-const objects can call both const and non-const functions.</li><li>Use mutable to mark the variables that must change inside const functions for exceptions (e.g., caching, logging).</li><li>Always mark getter functions as const for safety.</li></ul><h1 id="virtual-functions">Virtual Functions</h1><p>A virtual function is a member function that can be overridden in a derived class, allowing <strong>dynamic (runtime) polymorphism</strong>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Base class function.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Derived class function.&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Base* b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Derived</span>();<br>    b-&gt;<span class="hljs-built_in">show</span>(); <span class="hljs-comment">// Calls the correct function based on the object&#x27;s actual type, not pointer type.</span><br>    <span class="hljs-keyword">delete</span> b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="key-points">Key Points:</h2><ul><li><p>Virtual functions enable runtime polymorphism.</p></li><li><p>Use override keyword after the parameter list to avoid accidental function signature mismatches.</p></li><li><p>Always use a virtual destructor in a base class if you expect it to be inherited.</p><ul><li>If a base class destructor is not virtual, deleting a derived class object through a base class pointer only calls the base class destructor. If Derived allocated dynamic memory, it would not be freed, leading to a memory leak.</li><li>Incorrect example:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    ~<span class="hljs-built_in">Base</span>() &#123;  <span class="hljs-comment">// ❌ Destructor is NOT virtual</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Base destructor called!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    ~<span class="hljs-built_in">Derived</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Derived destructor called!&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Base* ptr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Derived</span>();  <span class="hljs-comment">// Upcasting</span><br>    <span class="hljs-keyword">delete</span> ptr;  <span class="hljs-comment">// Only Base&#x27;s destructor is called, Derived&#x27;s destructor is NOT called!</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Why Does This Happen?<ul><li>When using virtual ~Base(), the destructor lookup is done at runtime (dynamic dispatch), ensuring the most derived destructor is called first.</li><li>Memory Deallocation Flow (destruction order (derived -&gt; base))<ul><li>The delete ptr; statement triggers Base’s destructor.</li><li>Since it’s virtual, it first calls Derived’s destructor.</li><li>After Derived’s destructor completes, Base’s destructor runs.</li><li>All allocated resources are properly released.</li></ul></li></ul></li></ul></li></ul><h1 id="pure-virtual-fuctions-abstract-base-class">Pure Virtual Fuctions (Abstract Base Class)</h1><p>A pure virtual function has no implementation in the base class and forces derived classes to provide an implementation.</p><h2 id="example">Example</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBase</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;  <span class="hljs-comment">// Pure virtual function</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> AbstractBase &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Derived class implementation&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// AbstractBase obj;  // Error: Cannot instantiate an abstract class</span><br>    Derived d;<br>    d.<span class="hljs-built_in">show</span>();  <span class="hljs-comment">// Works fine</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="key-points">Key Points:</h2><ul><li>Declared using <strong>= 0</strong> syntax.</li><li><strong>Makes a class abstract</strong>, meaning it <strong>cannot be instantiated directly</strong>.</li><li>Derived classes <strong>must</strong> provide their own implementation.</li></ul><h2 id="use-cases">Use Cases:</h2><ul><li><p>Defining interfaces or base classes for runtime polymorphism.</p><ul><li><p>Compile-time polymorphism (also called static polymorphism) includes:</p><ul><li><p>Function overloading</p><ul><li>Example:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;  <span class="hljs-comment">// Function Overloading</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Sum (int): &quot;</span> &lt;&lt; (a + b) &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Sum (double): &quot;</span> &lt;&lt; (a + b) &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Math obj;<br>    obj.<span class="hljs-built_in">add</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);      <span class="hljs-comment">// Resolves at compile time (int version)</span><br>    obj.<span class="hljs-built_in">add</span>(<span class="hljs-number">5.5</span>, <span class="hljs-number">10.5</span>);  <span class="hljs-comment">// Resolves at compile time (double version)</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Operator overloading</p></li><li><p>Templates</p></li></ul></li></ul></li><li><p>Enforcing derived classes to implement certain functions.</p></li></ul><h1 id="lambda-functions">Lambda Functions</h1><p>A lambda function is a short, unnamed function used for quick operations, especially in algorithms and functional programming.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> add = [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123; <span class="hljs-keyword">return</span> a + b; &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Sum: &quot;</span> &lt;&lt; <span class="hljs-built_in">add</span>(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lambda-function-syntax">Lambda Function Syntax</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[capture_list](parameters) -&gt; return_type &#123; function_body &#125;<br></code></pre></td></tr></table></figure><p>[capture_list] specifies which variables from the surrounding scope should be captured.</p><p>(parameters) defines the function’s parameters.</p><p>-&gt; return_type (optional) specifies the return type.</p><p>{ function_body } contains the function logic.</p><h2 id="capture-list-and-parameters">Capture list and parameters</h2><ul><li>Capture List ([]): Used for accessing external variables from the surrounding scope.<ul><li>Key Takeaways<ul><li>Capture by Value ([x]): Read-only copy.</li><li>Capture by Reference ([&amp;x]): Modifications affect the original variable.</li><li>Capture Everything by Value ([=]): All local variables (except static or global variables, but lambda functions can access these variables normally already) are captured by value. This makes the lambda safe for multi-threading but prevents modifications unless mutable is used.</li><li>Capture Everything by Reference ([&amp;]): All local variables are captured by reference, allowing modifications inside the lambda to affect the original variables.</li><li>Mis Capture [=, &amp;y]: Captures all by value, except y by reference.</li></ul></li></ul></li><li>Parameter List (()): Used for passing arguments like a normal function.</li><li>Captured values are fixed at the time the lambda is created, while parameters change per call.</li></ul><h2 id="use-cases">Use Cases</h2><ul><li><p>Callback functions in algorithms (std::for_each, std::sort).</p><ul><li>Example</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br>    <span class="hljs-comment">// Lambda function to print elements</span><br>    std::for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> x) &#123;<br>        std::cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Threading (std::thread).</p><ul><li>Example</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Create a thread using a lambda function</span><br>    <span class="hljs-function">std::thread <span class="hljs-title">t</span><span class="hljs-params">([] &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        std::cout &lt;&lt; <span class="hljs-string">&quot;Hello from the thread!&quot;</span> &lt;&lt; std::endl;</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br><br>    t.<span class="hljs-built_in">join</span>();  <span class="hljs-comment">// Wait for the thread to finish execution</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello from the main function!&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Functional programming paradigms (e.g., std::transform to apply a given operation (usually a lambda or function) to each element in a range (e.g., array, vector, list) and stores the results in another range.).</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Programming</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn cpp from bugs</title>
    <link href="/2025/01/30/learn-from-bugs/"/>
    <url>/2025/01/30/learn-from-bugs/</url>
    
    <content type="html"><![CDATA[<p>The objective of this note is to record some bugs and solutions I encountered during cpp development for future reference.</p><h1 id="1-forward-declaration">1. Forward Declaration</h1><h2 id="code">Code</h2><p>See the code and error caused below.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> VEC3_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VEC3_H</span><br><br><span class="hljs-comment">// #include &lt;cmath&gt;</span><br><span class="hljs-comment">// #include &lt;iostream&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;rtweekend.h&quot;</span></span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">vec3</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// We use double here, but some ray tracers use float. double has greater precision and range, but is twice the size compared to float. This increase in size may be important if you&#x27;re programming in limited memory conditions (such as hardware shaders). Either one is fine — follow your own tastes.</span><br>    <span class="hljs-type">double</span> e[<span class="hljs-number">3</span>];<br><br>    <span class="hljs-built_in">vec3</span>() : e&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125; &#123;&#125; <span class="hljs-comment">// default constructor</span><br>    <span class="hljs-built_in">vec3</span>(<span class="hljs-type">double</span> e0, <span class="hljs-type">double</span> e1, <span class="hljs-type">double</span> e2) : e&#123;e0, e1, e2&#125; &#123;&#125; <span class="hljs-comment">// constructor</span><br><br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">x</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> e[<span class="hljs-number">0</span>]; &#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">y</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> e[<span class="hljs-number">1</span>]; &#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">z</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> e[<span class="hljs-number">2</span>]; &#125;<br><br>    vec3 <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec3</span>(-e[<span class="hljs-number">0</span>], -e[<span class="hljs-number">1</span>], -e[<span class="hljs-number">2</span>]); &#125;<br><br>    <span class="hljs-comment">// A const subscript operator. It allows read-only access to the elements of the array e. It returns a double element at index i in the array e.</span><br>    <span class="hljs-type">double</span> <span class="hljs-keyword">operator</span>[](<span class="hljs-type">int</span> i) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> e[i]; &#125;<br><br>    <span class="hljs-comment">// A non-const subscript operator. It allows read and write access to the elements of the array e. It returns a reference to the double element at index i in the array e, allowing the caller to modify the element.</span><br>    <span class="hljs-type">double</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">int</span> i) &#123; <span class="hljs-keyword">return</span> e[i]; &#125;<br><br>    vec3&amp; <span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> vec3&amp; v) &#123;<br>        e[<span class="hljs-number">0</span>] += v.e[<span class="hljs-number">0</span>];<br>        e[<span class="hljs-number">1</span>] += v.e[<span class="hljs-number">1</span>];<br>        e[<span class="hljs-number">2</span>] += v.e[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    vec3&amp; <span class="hljs-keyword">operator</span>*=(<span class="hljs-type">double</span> t) &#123;<br>        e[<span class="hljs-number">0</span>] *= t;<br>        e[<span class="hljs-number">1</span>] *= t;<br>        e[<span class="hljs-number">2</span>] *= t;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    vec3&amp; <span class="hljs-keyword">operator</span>/=(<span class="hljs-type">double</span> t) &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= <span class="hljs-number">1</span>/t;<br>    &#125;<br><br>    ... ...<br><br>    <span class="hljs-comment">// return a random vector whose x/y/z are in [0,1) to simulate a diffuse reflection</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> vec3 <span class="hljs-title">random</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec3</span>(<span class="hljs-built_in">random_double</span>(), <span class="hljs-built_in">random_double</span>(), <span class="hljs-built_in">random_double</span>());<br>    &#125;<br><br>    <span class="hljs-comment">// return a random vector whose x/y/z are in [min,max) to simulate a diffuse reflection</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> vec3 <span class="hljs-title">random</span><span class="hljs-params">(<span class="hljs-type">double</span> min, <span class="hljs-type">double</span> max)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec3</span>(<span class="hljs-built_in">random_double</span>(min,max), <span class="hljs-built_in">random_double</span>(min,max), <span class="hljs-built_in">random_double</span>(min,max));<br>    &#125;<br><br>    <span class="hljs-comment">// First, use a rejection method to generate the random vector inside the unit sphere (that is, a sphere of radius 1). Pick a random point inside the cube enclosing the unit sphere (that is, where x, y, and z are all in the range [−1,+1]). If this point lies outside the unit sphere, then generate a new one until we find one that lies inside or on the unit sphere.</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> vec3 <span class="hljs-title">random_unit_vector</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">auto</span> p = vec3::<span class="hljs-built_in">random</span>(<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">auto</span> lensq = p.<span class="hljs-built_in">length_squared</span>();<br>            <span class="hljs-comment">// if (lensq &lt;= 1)</span><br>            <span class="hljs-comment">//     return p / sqrt(lensq);</span><br>            <span class="hljs-comment">// Since floating-point numbers have finite precision, a very small value can underflow to zero when squared. So if all three coordinates are small enough (that is, very near the center of the sphere), the norm of the vector will be zero, and thus normalizing will yield the bogus vector [±inf,±inf,±inf]. To fix this, we&#x27;ll also reject points that lie inside this “black hole” around the center. With double precision (64-bit floats), we can safely support values greater than 10−160. Below is a more robust implementation.</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">1e-160</span> &lt; lensq &amp;&amp; lensq &lt;= <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> p / std::<span class="hljs-built_in">sqrt</span>(lensq);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Take the dot product of the surface normal and our random vector to determine if it&#x27;s in the correct hemisphere. If the dot product is positive, then the vector is in the correct hemisphere. If the dot product is negative, then we need to invert the vector.</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> vec3 <span class="hljs-title">random_on_hemisphere</span><span class="hljs-params">(<span class="hljs-type">const</span> vec3&amp; normal)</span> </span>&#123;<br>        vec3 on_unit_sphere = <span class="hljs-built_in">random_unit_vector</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dot</span>(on_unit_sphere, normal) &gt; <span class="hljs-number">0.0</span>) <span class="hljs-comment">// In the same hemisphere as the normal</span><br>            <span class="hljs-keyword">return</span> on_unit_sphere;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> -on_unit_sphere;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// point3 is just an alias for vec3, but useful for geometric clarity in the code.</span><br><span class="hljs-keyword">using</span> point3 = vec3;<br><br><br><span class="hljs-comment">// Vector Utility Functions</span><br><br><span class="hljs-comment">// An overloaded operator&lt;&lt; for the vec3 class in C++. This operator allows instances of the vec3 class to be output to an output stream, such as std::cout</span><br><span class="hljs-keyword">inline</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; out, <span class="hljs-type">const</span> vec3&amp; v) &#123;<br>    <span class="hljs-keyword">return</span> out &lt;&lt; v.e[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; v.e[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; v.e[<span class="hljs-number">2</span>];<br>&#125;<br><br>... ...<br><br><span class="hljs-keyword">inline</span> vec3 <span class="hljs-keyword">operator</span>*(<span class="hljs-type">double</span> t, <span class="hljs-type">const</span> vec3&amp; v) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec3</span>(t*v.e[<span class="hljs-number">0</span>], t*v.e[<span class="hljs-number">1</span>], t*v.e[<span class="hljs-number">2</span>]);<br>&#125;<br><br><span class="hljs-keyword">inline</span> vec3 <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> vec3&amp; v, <span class="hljs-type">double</span> t) &#123;<br>    <span class="hljs-keyword">return</span> t * v;<br>&#125;<br><br><span class="hljs-keyword">inline</span> vec3 <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> vec3&amp; v, <span class="hljs-type">double</span> t) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>/t) * v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(<span class="hljs-type">const</span> vec3&amp; u, <span class="hljs-type">const</span> vec3&amp; v)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> u.e[<span class="hljs-number">0</span>] * v.e[<span class="hljs-number">0</span>]<br>         + u.e[<span class="hljs-number">1</span>] * v.e[<span class="hljs-number">1</span>]<br>         + u.e[<span class="hljs-number">2</span>] * v.e[<span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="bugs">Bugs</h2><p>I tried to build the program but got the error below.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake --build build<br>[ 25%] Building CXX object CMakeFiles/inOneWeekend.dir/src/InOneWeekend/main.cc.obj<br>In file included from F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\rtweekend.h:39,<br>                 from F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\main.cc:1:<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\vec3.h: In member function &#x27;vec3 vec3::random_unit_vector()&#x27;:<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\vec3.h:74:26: error: no match for &#x27;operator/&#x27; (operand types are &#x27;vec3&#x27; and &#x27;double&#x27;)   74 |                 return p / std::sqrt(lensq);<br>      |                        ~ ^ ~~~~~~~~~~~~~~~~<br>      |                        |            |<br>      |                        vec3         double<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\vec3.h: In member function &#x27;vec3 vec3::random_on_hemisphere(const vec3&amp;)&#x27;:<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\vec3.h:81:13: error: &#x27;dot&#x27; was not declared in this scope<br>   81 |         if (dot(on_unit_sphere, normal) &gt; 0.0) // In the same hemisphere as the normal<br>      |             ^~~<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\vec3.h:80:49: warning: control reaches end of non-void function [-Wreturn-type]<br>   80 |         vec3 on_unit_sphere = random_unit_vector();<br>      |                               ~~~~~~~~~~~~~~~~~~^~<br>mingw32-make[2]: *** [CMakeFiles\inOneWeekend.dir\build.make:79: CMakeFiles/inOneWeekend.dir/src/InOneWeekend/main.cc.obj] Error 1<br>mingw32-make[1]: *** [CMakeFiles\Makefile2:89: CMakeFiles/inOneWeekend.dir/all] Error 2<br>mingw32-make: *** [Makefile:90: all] Error 2<br></code></pre></td></tr></table></figure><h2 id="reasons-and-explanations">Reasons and explanations</h2><p>The errors are mainly due to missing function declarations or improper operator usage. Let’s break them down and fix them.</p><h3 id="1-operator-not-defined-for-vec3-double">(1) <strong>Operator <code>/</code> Not Defined for <code>vec3 / double</code></strong></h3><p><strong>Error Message:</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>no match for &#x27;operator/&#x27; (operand types are &#x27;vec3&#x27; and &#x27;double&#x27;)<br></code></pre></td></tr></table></figure><p><strong>Problem:</strong><br>Notice we already have an operator overload for division:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">inline</span> vec3 <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> vec3&amp; v, <span class="hljs-type">double</span> t) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>/t) * v;<br>&#125;<br></code></pre></td></tr></table></figure><p>However, this function is defined <strong>after</strong> it’s used inside <code>vec3::random_unit_vector()</code>. Because C++ compiles top to bottom, it doesn’t recognize the <code>/</code> operator at the time of usage.</p><p><strong>Fix:</strong><br>Move the <code>/</code> operator overload <strong>above</strong> <code>random_unit_vector()</code> or explicitly declare it before usage:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">inline</span> vec3 <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> vec3&amp; v, <span class="hljs-type">double</span> t); <span class="hljs-comment">// Forward declaration</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-dot-function-not-declared">(2) <strong><code>dot</code> Function Not Declared</strong></h3><p>Similarly, forward declare it before the use.</p><h3 id="3-control-reaches-end-of-non-void-function">(3) <strong>Control Reaches End of Non-Void Function</strong></h3><p><strong>Warning Message:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">warning</span>: control reaches <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> non-<span class="hljs-type">void</span> <span class="hljs-keyword">function</span> [-Wreturn-<span class="hljs-keyword">type</span>]<br></code></pre></td></tr></table></figure><p><strong>Problem:</strong><br>In <code>random_on_hemisphere()</code>, the compiler is unsure whether all execution paths return a value.</p><p><strong>Fix:</strong><br>Ensure all paths return a <code>vec3</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> vec3 <span class="hljs-title">random_on_hemisphere</span><span class="hljs-params">(<span class="hljs-type">const</span> vec3&amp; normal)</span> </span>&#123;<br>    vec3 on_unit_sphere = <span class="hljs-built_in">random_unit_vector</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dot</span>(on_unit_sphere, normal) &gt; <span class="hljs-number">0.0</span>) <span class="hljs-comment">// In the same hemisphere as the normal</span><br>        <span class="hljs-keyword">return</span> on_unit_sphere;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> -on_unit_sphere;<br>&#125;<br></code></pre></td></tr></table></figure><p>If you’re still getting this warning, add an explicit return at the end:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">return</span> <span class="hljs-built_in">vec3</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// Default return to satisfy compiler</span><br></code></pre></td></tr></table></figure><hr><h2 id="note">Note</h2><p>For forward declaration, we cannot just put two lines of declarations before vec3 because in that way it will cause “”. We also shouldn’t simply put two lines of declarations in vec3 right before the functions that take use of them because if will cause “too many parameters for this operator function”. Instead, we should also declare class vec3 and then declare the used functions and put them outside of class vec3, like below.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Forward declarations for functions that will be used later</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">vec3</span>;  <span class="hljs-comment">// Forward declaration of vec3 (not strictly needed unless cyclic dependency)</span><br><span class="hljs-keyword">inline</span> vec3 <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> vec3&amp; v, <span class="hljs-type">double</span> t);  <span class="hljs-comment">// Forward declare operator/</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(<span class="hljs-type">const</span> vec3&amp; u, <span class="hljs-type">const</span> vec3&amp; v)</span></span>; <span class="hljs-comment">// Forward declare dot product</span><br></code></pre></td></tr></table></figure><p>Besides, here the third problem might not caused by the reason described above. Instead, it might caused by the missing declaratio of dot().</p><h1 id="2-correct-order-of-member-initialization">2. Correct Order of Member Initialization</h1><h2 id="code">Code</h2><p>See the class below.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SPHERE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPHERE_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;hittable.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;vec3.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sphere</span> : <span class="hljs-keyword">public</span> hittable &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">sphere</span>(<span class="hljs-type">const</span> point3&amp; center, <span class="hljs-type">double</span> radius, std::shared_ptr&lt;material&gt; mat)<br>      : <span class="hljs-built_in">center</span>(center), <span class="hljs-built_in">radius</span>(std::<span class="hljs-built_in">fmax</span>(<span class="hljs-number">0</span>,radius)), <span class="hljs-built_in">mat</span>(mat) &#123;&#125;<br><br>  <span class="hljs-keyword">private</span>:<br>    std::shared_ptr&lt;material&gt; mat;<br>    point3 center;<br>    <span class="hljs-type">double</span> radius;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="bugs">Bugs</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake --build build<br>[ 25%] Building CXX object CMakeFiles/inOneWeekend.dir/src/InOneWeekend/main.cc.obj<br>In file included from F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\main.cc:5:<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\sphere.h: In constructor &#x27;sphere::sphere(const point3&amp;, double, std::shared_ptr&lt;material&gt;)&#x27;:<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\sphere.h:47:12: warning: &#x27;sphere::radius&#x27; will be initialized after [-Wreorder]<br>   47 |     double radius;<br>      |            ^~~~~~<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\sphere.h:45:31: warning:   &#x27;std::shared_ptr&lt;material&gt; sphere::mat&#x27; [-Wreorder]<br>   45 |     std::shared_ptr&lt;material&gt; mat;<br>      |                               ^~~<br>F:\E\learning_files\CS_Projects\RayTracing\src\InOneWeekend\sphere.h:9:5: warning:   when initialized here [-Wreorder]<br>    9 |     sphere(const point3&amp; center, double radius, std::shared_ptr&lt;material&gt; mat)<br>      |     ^~~~~~<br></code></pre></td></tr></table></figure><h2 id="reasons-and-explanations">Reasons and explanations</h2><p>The error is a member initialization order warning. This happens because the order in which member variables are initialized in <strong>the constructor does not match the order in which they are declared in the class</strong>. C++ initializes member variables in the order they are declared in the class, not in the order they appear in the constructor’s initializer list. Since mat is declared before center and radius in the class, but is initialized after them in the constructor, the compiler gives a warning.</p><h2 id="solution">Solution</h2><p>Reorder the initializer list to match the order of member declarations.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sphere</span>(<span class="hljs-type">const</span> point3&amp; center, <span class="hljs-type">double</span> radius, std::shared_ptr&lt;material&gt; mat)<br>  : <span class="hljs-built_in">mat</span>(mat), <span class="hljs-built_in">center</span>(center), <span class="hljs-built_in">radius</span>(std::<span class="hljs-built_in">fmax</span>(<span class="hljs-number">0</span>, radius)) &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Programming</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Commenly Used CMake Commands and Explanations</title>
    <link href="/2025/01/28/cmake-cmds/"/>
    <url>/2025/01/28/cmake-cmds/</url>
    
    <content type="html"><![CDATA[<ol><li></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -B build<br>cmake --build build<br></code></pre></td></tr></table></figure><p><code>cmake -B build</code>: This command configures the project and generates the necessary build files.<br>The -B build option specifies the build directory where the generated files will be placed. In this case, it is the build directory. If the build directory does not exist, CMake will create it.</p><p><code>cmake --build build</code>: This command builds the project using the build files generated in the “build” directory. It compiles the source code and links the binaries according to the configuration specified in the CMakeLists.txt file.</p><ol start="2"><li></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> build</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> build</span><br>cmake ..<br></code></pre></td></tr></table></figure><p><code>cmake ..</code>: This command is typically run from within a subdirectory (e.g., build) of the project root. The CS_Projects argument tells CMake to look for the CMakeLists.txt file in the parent directory. This command configures the project and generates the build files in the current directory (e.g., build).</p><ol start="3"><li></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake --build build --config release<br>cmake --build build --config debug<br></code></pre></td></tr></table></figure><p><code>cmake --build build --config release</code>: <code>--config release</code> specifies the build configuration to use. In this case, it is the release configuration. The release configuration typically enables optimizations and disables debugging information, resulting in a more optimized and smaller executable.</p><p><code>cmake --build build --config debug</code>: The debug configuration typically includes debugging information and disables optimizations, making it easier to debug the program.</p><ol start="4"><li>No need to delete the previously generated build files when making changes to the code. CMake is designed to detect changes in the source files and rebuild only the necessary parts of the project. Delete the build directory only if we make changes to CMakeLists.txt / switch build configurations (e.g., debug -&gt; release) / encounter build errors.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Programming</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>CMake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to set up cpp environment in VSCode (Windows 10)</title>
    <link href="/2025/01/27/cpp-env-setup-win/"/>
    <url>/2025/01/27/cpp-env-setup-win/</url>
    
    <content type="html"><![CDATA[<h1 id="install-mingw">Install MinGW</h1><p>See official website and follow the instructions step by step (<a href="https://code.visualstudio.com/docs/cpp/config-mingw">https://code.visualstudio.com/docs/cpp/config-mingw</a>). Note that we need to add the folder path <code>C:\msys64\ucrt64\bin</code> (for example) to both User Variables and Environment Variables. Someone said the order of the path also matters, so put this path in front of others if possible.</p><h1 id="install-cmake">Install CMake</h1><p>Use CMake as the build tool. Download .msi from the official website. Remember to select “Add CMake to system PATH for all users” while installation so that we can use CMake in the command line.</p><p>Test with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake --version<br></code></pre></td></tr></table></figure><p>Then, if we run <code>cmake ..</code> or <code>cmake -B build</code> in cmd/powershell, we might still get the following error:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">-- Building for: NMake Makefiles<br>CMake Error at CMakeLists.txt:5 (project):<br><br>   &#x27;nmake&#x27; &#x27;-?&#x27;<br><br>  failed with:<br><br>   no such file or directory<br><br><br>CMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage<br>-- Configuring incomplete, errors occurred!<br></code></pre></td></tr></table></figure><p>The error is caused by failing to set up the compiler correctly or failing to set up the generator correctly.</p><p>If the error is caused by failing to set up the compiler correctly, we can ass a new line (see below) in the CMakeLists.txt to specify our compiler. Here, remember to put this line before project().</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">set(CMAKE_CXX_COMPILER &quot;F:/D/software/mysys2/install/ucrt64/bin/g++.exe&quot;)<br></code></pre></td></tr></table></figure><p>If the error is caused by failing to set up the generator (generator can be MinGW Makefiles, Ninja, CodeBlocks, etc.) correctly, we can specify our generater in our commands like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -G &quot;MinGW Makefiles&quot; ..<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>cmake -G &quot;MinGW Makefiles&quot; -B build<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> `cmake --build build`, no need to specify the generator.</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Programming</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fork Other&#39;s Repo and Create Personal Repo</title>
    <link href="/2025/01/26/git-forkandthen/"/>
    <url>/2025/01/26/git-forkandthen/</url>
    
    <content type="html"><![CDATA[<p>This workflow is common when we’re working with someone else’s repository and want to make our own changes while staying updated with their changes.</p><hr><h3 id="steps">Steps</h3><h4 id="1-clone-the-other-persons-repository">1. <strong>Clone the Other Person’s Repository</strong></h4><p>Clone the repository you want to work on:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/otheruser/otherrepo.git<br><span class="hljs-built_in">cd</span> otherrepo<br></code></pre></td></tr></table></figure><p>By default, the <code>origin</code> remote will point to <code>https://github.com/otheruser/otherrepo.git</code>.</p><hr><h4 id="2-add-a-new-remote-for-your-own-repository">2. <strong>Add a New Remote for Your Own Repository</strong></h4><p>Create a new repository in your Git hosting service (e.g., GitHub, GitLab, etc.). Copy its URL and add it as a new remote:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add myrepo https://github.com/yourusername/yourrepo.git<br></code></pre></td></tr></table></figure><p>Now you have two remotes:</p><ul><li><code>origin</code> pointing to the other person’s repository.</li><li><code>myrepo</code> pointing to your own repository.</li></ul><p>Check your remotes to confirm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br></code></pre></td></tr></table></figure><hr><h4 id="3-pull-the-latest-changes-from-the-original-repository">3. <strong>Pull the Latest Changes from the Original Repository</strong></h4><p>To stay updated with the other person’s repository:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main  <span class="hljs-comment"># Replace &#x27;main&#x27; with the appropriate branch name</span><br></code></pre></td></tr></table></figure><p>If there are merge conflicts, resolve them before proceeding.</p><hr><h4 id="4-push-your-changes-to-your-own-repository">4. <strong>Push Your Changes to Your Own Repository</strong></h4><p>After making your changes locally, commit them:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;My changes&quot;</span><br></code></pre></td></tr></table></figure><p>Then push the changes to your own repository:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push myrepo main  <span class="hljs-comment"># Replace &#x27;main&#x27; with your branch name</span><br></code></pre></td></tr></table></figure><hr><h3 id="keeping-both-repositories-updated">Keeping Both Repositories Updated</h3><ul><li><strong>To get updates from the original repository</strong>:<br>Use <code>git pull origin main</code> periodically.</li><li><strong>To push your changes to your own repository</strong>:<br>Always use <code>git push myrepo main</code>.</li></ul><hr><h3 id="tips">Tips</h3><ol><li><p><strong>Tracking Branches Separately:</strong><br>If you want to keep changes from the original repository and your repository organized, create a new branch for your work:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b mybranch<br></code></pre></td></tr></table></figure><p>Push this branch to your own repository:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push myrepo mybranch<br></code></pre></td></tr></table></figure></li><li><p><strong>Forking as an Alternative</strong>:<br>Instead of directly cloning the original repository, consider forking it on platforms like GitHub. This automatically sets up your forked repository as <code>origin</code> and the original as <code>upstream</code>. Then you can:</p><ul><li>Pull updates from the original using:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull upstream main<br></code></pre></td></tr></table></figure></li><li>Push changes to your fork using:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin main<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>This approach helps avoid confusion when working with multiple remotes.</p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learning Resources</title>
    <link href="/2025/01/25/resources/"/>
    <url>/2025/01/25/resources/</url>
    
    <content type="html"><![CDATA[<h1 id="graphics">Graphics</h1><ul><li>如何进行性能优化: <a href="https://zhuanlan.zhihu.com/p/68158277">https://zhuanlan.zhihu.com/p/68158277</a></li><li>游戏引擎架构总览：<a href="https://raytaylorlin.github.io/tech/game/engine/game-engine-architecture-preview/">https://raytaylorlin.github.io/tech/game/engine/game-engine-architecture-preview/</a></li><li>反走样：<a href="https://zhuanlan.zhihu.com/p/28800047">https://zhuanlan.zhihu.com/p/28800047</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - SDF Rendering</title>
    <link href="/2025/01/24/CS8803-CGA-L04/"/>
    <url>/2025/01/24/CS8803-CGA-L04/</url>
    
    <content type="html"><![CDATA[<h2 id="recap-ray-tracing">Recap: Ray Tracing</h2><p>Basic ray tracing pipeline: Ray Generation -&gt; Intersection -&gt; Shading</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs glsl">rayTraceImage()<br>&#123;<br>  parse scene description<br>  <span class="hljs-keyword">for</span> each pixel <span class="hljs-meta"># Implemented on GPU. All pixels can be calculated in parallel, so no need to wait until the previous pixel is finished.</span><br>    ray = generateCameraRay(pixel)<br>    pixelColor= trace(ray)<br>&#125;<br><br>trace(ray)<br>&#123;<br>  hit = find first intersection with scene objects<br>  color = shade(hit) <span class="hljs-meta"># handle shadow by tracing more rays</span><br>  <span class="hljs-meta"># check whether there are other objects that are in between the light source and the current object to determine if the current object is under shadow.</span><br>  <span class="hljs-keyword">return</span> color<br>&#125;<br></code></pre></td></tr></table></figure><p>Previously, for each new primitive, we need to implement a new ray-primitive intersection algorithm, but now we can convert every object represented by an implicit function to SDF. That is to say, implementing a new rayprimitive function for each new SDF.</p><p>However, we don’t want to implement a customized ray-object intersection algorithm for each new object. Instead, we want the ray-SDF intersection algorithm can work for any new SDF input. So, we can <strong>assume the input SDF as a black-box function</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> that takes a query point as input and produces its SDF as output.</p><h2 id="ray-marching">Ray Marching</h2><ul><li>We assume <strong>the entire scene can be represented by a single SDF function</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span>. For any query point p, we can get its SDF value by calling the function.</li><li>We <strong>advance a ray step by step</strong> through a scene and use the SDF to determine the ray hits something or not.</li><li>At each step, we ask “Is this point inside the scene surface”, or alternately phrased, “Does the SDF evaluate to a negative number at this point?”<ul><li>If it does, we’re done! We hit something.</li><li>If it’s not, we keep going up to some maximum number of steps along the ray.</li></ul></li></ul><p><img src="ray_marching.png" alt="Ray Marching"></p><p><strong>Ray Marching Pseudocode (naïve version)</strong></p><p><em>Traditionally, a ray marching algorithm with a constant step size is called ray casting</em></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta"># Input: ray r (with origin o, direction d), SDF(p)</span><br><span class="hljs-meta"># Output: t</span><br><span class="hljs-meta"># Algorithm:</span><br>  iter = <span class="hljs-number">0</span><br>  t = <span class="hljs-number">0</span><br>  sdf = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">while</span> iter &lt; max_iteration:<br>    p = o + t * d<br>    s = SDF(p)<br>    <span class="hljs-keyword">if</span> s &lt; epsilon: <span class="hljs-keyword">break</span><br>    t += ds<br>    iter += <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> t<br></code></pre></td></tr></table></figure><h3 id="sphere-marching">Sphere Marching</h3><p>Improve the performance of the naïve ray marching by dynamically adjusting the step size along each ray. Instead of moving by a constant step size each time, we choose the current SDF value <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> as our current step size. We repeat this process until the step size is below some certain threshold epsilon, which means that we are close to the object surface.<br><img src="sphere_raymarching.png" alt="Sphere Marching"></p><h3 id="ray-marching-algorithm-overview">Ray Marching Algorithm Overview</h3><ul><li>Step 1: Fire a ray into the scene from the camera.</li><li>Step 2: At each step, measure the distance from the current point to the nearest surface using the SDF.</li><li>Step 3: Move the ray forward by the distance obtained, ensuring no intersections are missed.</li><li>Step 4: Repeat until an object is hit or the maximum number of steps is reached.</li></ul><p><strong>Pseudocode</strong></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta"># Input: ray r (with origin o, direction d), SDF(p)</span><br><span class="hljs-meta"># Output: t</span><br><br><span class="hljs-meta"># RayMarching:</span><br>  iter = <span class="hljs-number">0</span><br>  s = <span class="hljs-number">0</span> <span class="hljs-comment">// distance to the nearest surface</span><br>  t = <span class="hljs-number">0</span> <span class="hljs-comment">// The distance traveled along the ray until it intersects an object or exceeds a maximum distance.</span><br>  <span class="hljs-keyword">while</span> iter &lt; max_iteration:<br>    p = o + d * t<br>    s = SDF(p) <span class="hljs-meta"># a single SDF for the whole scene</span><br>    t += s<br>    <span class="hljs-keyword">if</span> s &lt; epsilon or t &gt; max_distance: <span class="hljs-keyword">break</span><br>    iter += <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> t<br><br>rayMarchImage()<br>&#123;<br>  parse scene description<br>  <span class="hljs-keyword">for</span> each pixel<br>  ray = generateCameraRay(pixel)<br>  pixelColor= calculateColor(ray)<br>&#125;<br><br>calculateColor(ray)<br>&#123;<br>  hit = find intersection with RayMarching<br>  color = shade(hit) <span class="hljs-meta"># Use Phong Shading in Ray Marching</span><br>  <span class="hljs-keyword">return</span> color<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="use-phong-shading-in-ray-marching">Use Phong Shading in Ray Marching</h3><p><img src="normal.png" alt="Phone Shading"></p><ul><li>Difference between GLSL Shading, Ray Tracing, and Ray Marching:<ul><li>In GLSL, the surface position is known for each fragment (In the fragment shader, we read the fragment position p and use it to calculate the vector l and v);</li><li>In ray tracing, the surface position is calculated using ray-object intersection.</li><li>In ray marching, the surface position is calculated by iteratively marching the ray and checking SDF values (In a ray tracer, we shoot a ray from the eye position and calculate its intersection with objects in the scene; then we calculate the color of the ray based on the lights in the scene using vectors p, d, and l).</li></ul></li><li>The key missing piece is how to get the normal vector from an SDF.</li></ul><h4 id="sdf-normal-calculate-the-gradient">SDF Normal: Calculate the Gradient</h4><p>We can get the normal vector of a given point p by calculating the gradient of its SDF:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>n</mi><mo>⃗</mo></mover><mo>=</mo><mi mathvariant="normal">∇</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\vec n = \nabla \phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">n</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∇</span><span class="mord mathnormal">ϕ</span></span></span></span></p><ul><li>This is because the gradient of any scalar field is always normal to the level sets of that field (the implicit object surface). The direction of the gradient is pointing to the direction where SDF increases (the outward of the surface).</li><li>We can calculate the gradient with finite difference in each axis.</li></ul><h2 id="ray-tracing-vs-ray-marching">Ray Tracing vs. Ray Marching</h2><ul><li><p>Ray Tracing</p><ul><li>Cast a ray and check for intersections with objects along the ray’s path.</li><li>Require customized ray-object intersection implementation.</li><li>Suitable for both implicit primitives (e.g., sphere, cube) and explicit geometric models (e.g., triangles, meshes).</li></ul></li><li><p>Ray Marching</p><ul><li>Steps through the scene, checking if a ray has hit an object by using SDFs.</li><li>Does not require ray-SDF intersection implementation.</li><li>Efficient for complicated implicit surfaces, where the geometry is defined by an SDF function.</li></ul></li></ul><h2 id="references">References</h2><p><a href="https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/">https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/</a></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>SDF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - SDF Transformation and Combination</title>
    <link href="/2025/01/22/CS8803-CGA-L03/"/>
    <url>/2025/01/22/CS8803-CGA-L03/</url>
    
    <content type="html"><![CDATA[<h2 id="sdf-primitive-transformations">SDF Primitive Transformations</h2><h3 id="examples-tanslating-circlebox-sdf">Examples: Tanslating Circle/Box SDF</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs glsl">sdf_circle(<span class="hljs-type">vec2</span> p, <span class="hljs-type">float</span> r)<br>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(p) - r; <span class="hljs-comment">// sdf to a circle centered at (0,0)</span><br>&#125;<br><br><span class="hljs-comment">// extend this sdf function to a circle with an arbitrary center c</span><br><br>sdf_circle(<span class="hljs-type">vec2</span> p, <span class="hljs-type">vec2</span> c, <span class="hljs-type">float</span> r)<br>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(p-c) - r;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs glsl">sdf_box(<span class="hljs-type">vec2</span> p, <span class="hljs-type">vec2</span> b)<br>&#123;<br>  <span class="hljs-comment">// Use abs(p) to assume p.x and p.y are both positive</span><br>  <span class="hljs-comment">// If p is inside the box, d will have both components negative.</span><br>  <span class="hljs-type">vec2</span> d = <span class="hljs-built_in">abs</span>(p)-b; <span class="hljs-comment">// b = (Rx/2, Ry/2), Rx and Ry are the half width and half height of the box</span><br>  <span class="hljs-comment">// max(d, 0.0) keeps only the non-negative components of d, effectively ignoring the negative parts. This means it captures how far each component of p is outside of the box.</span><br>  <span class="hljs-comment">// min(max(d.x, d.y), 0.0) adds a correction for points inside the box by taking the maximum coordinate, which could be negative, ensuring that the signed distance remains an accurate representation of how far inside the box p is.</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(<span class="hljs-built_in">max</span>(d, <span class="hljs-number">0.0</span>)) + <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(d.x, d.y), <span class="hljs-number">0.0</span>);<br>&#125;<br><br><span class="hljs-comment">// extend this sdf function to a box with an arbitrary center c</span><br><br>sdf_box(<span class="hljs-type">vec2</span> p, <span class="hljs-type">vec2</span> c, <span class="hljs-type">vec2</span> b)<br>&#123;<br>  <span class="hljs-type">vec2</span> d = <span class="hljs-built_in">abs</span>(p-c)-b; <span class="hljs-comment">// p&#x27; = p - c</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(<span class="hljs-built_in">max</span>(d, <span class="hljs-number">0.0</span>)) + <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(d.x, d.y), <span class="hljs-number">0.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="general-approach">General Approach</h3><p>Recall the transformation matrices, we can get a transformed result simply by a matrix-vector multiplication.</p><p>To transform an SDF object, the key idea is to transform the query point instead of the SDF object. We simply <strong>transform the query point with the inverse of the transformation</strong> used to transform the object.</p><p>For example, if we want to translate an SDF object by (+1, -2), what we need to do is to translate every query point p by (-1, +2) and use it to query from the original SDF.</p><p>Similarly, we can use the same idea to rotate or scale an SDF object. For example, if we want to rotate an SDF by 30 degrees CCW, we can rotate the query point by 30 degrees CW and then query.</p><h3 id="example-for-matrix-based-transformation">Example for matrix-based transformation</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs glsl">sdf_box(<span class="hljs-type">vec2</span> p, <span class="hljs-type">float</span> a, <span class="hljs-type">vec2</span> b)<br>&#123;<br><span class="hljs-type">mat2</span> rot = <span class="hljs-type">mat2</span>(<span class="hljs-built_in">cos</span>(-a), -<span class="hljs-built_in">sin</span>(-a), <span class="hljs-built_in">sin</span>(-a), <span class="hljs-built_in">cos</span>(-a));<br><span class="hljs-type">vec2</span> rotated_p = rot * p;<br><span class="hljs-type">vec2</span> d = <span class="hljs-built_in">abs</span>(rotated_p)-b;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">length</span>(<span class="hljs-built_in">max</span>(d, <span class="hljs-number">0.0</span>)) + <span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(d.x, d.y), <span class="hljs-number">0.0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sdf-primitive-combinations">SDF Primitive Combinations</h2><h3 id="boolean-operations">Boolean operations</h3><h4 id="sdf-union-mathematical-explaination">SDF Union: Mathematical Explaination</h4><p>As shown in the figure below, the union of two SDFs is the shape that contains all points that are inside at least one of the two shapes.</p><ul><li>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">\phi1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">1</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">\phi2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">2</span></span></span></span> are both positive, then the point lies outside both shapes. The result is the shape closer to the surface.</li><li>If one function is negative (inside a shape) and the other is positive, the result is inside the corresponding shape.</li><li>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">\phi1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">1</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">\phi2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">2</span></span></span></span> are both negative, then the point lies inside both shapes. The min operation ensures that the result is still inside the shape.</li><li>Therefore, for union, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>ϕ</mi><mn>1</mn><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>ϕ</mi><mn>2</mn><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p) = min(\phi1(p), \phi2(p))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">ϕ</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">))</span></span></span></span></li></ul><p><img src="SDF_Union.png" alt="SDF Union"></p><h4 id="sdf-intersection-mathematical-explaination">SDF Intersection: Mathematical Explaination</h4><p>The intersection of two SDFs is the shape that contains all points that are inside both shapes.</p><ul><li>If both SDFs are negative, the point lies inside both shapes. The result is the shape that contains the intersection of both.</li><li>If one function is negative (inside a shape) and the other is positive, the result is outside the corresponding shape.</li><li>If both SDFs are positive, the point lies outside both shapes. The result is the shape closer to the surface of the intersection.</li><li>Therefore, for intersection, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>ϕ</mi><mn>1</mn><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>ϕ</mi><mn>2</mn><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p) = max(\phi1(p), \phi2(p))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">ϕ</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">))</span></span></span></span></li></ul><p><img src="SDF_Intersect.png" alt="SDF Intersection"></p><h4 id="sdf-complement">SDF Complement</h4><ul><li>Calculating the complement of a given SDF is simply negating its sign</li><li>If a point is inside the shape (-), then it is outside the complement of the shape (+); the distance value remains the same.</li></ul><p><img src="SDF_Complement.png" alt="SDF Complement"></p><h4 id="sdf-intersection-mathematical-explaination">SDF Intersection: Mathematical Explaination</h4><ul><li>The subtraction of two SDFs is the shape that contains all points that are inside one but not the other.</li><li>The easiest way to understand subtraction is to think of it as the intersection (where the max operation comes from) between the first shape (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">\phi1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">1</span></span></span></span>) and the complement of the second shape (−<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">\phi2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">2</span></span></span></span>).</li><li>Therefore, for substraction, <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \- at position 25: … max(\phi1(p), \̲-̲phi2(p))">\phi(p) = max(\phi1(p), \-phi2(p))</span></li></ul><p><img src="SDF_Substraction.png" alt="SDF Substraction"><br><img src="SDF_Substraction_math.png" alt="SDF Substraction"></p><h4 id="key-takeaways-for-sdf-boolean-operations">Key Takeaways for SDF Boolean Operations</h4><p><img src="BooleanOpsTakeaways.png" alt="Key Takeaways for SDF Boolean Operations"></p><p><strong>Boolean operations including union, intersection, and substraction can be easily extended to 3D.</strong></p><h3 id="constructive-solid-geometry-csg">Constructive Solid Geometry (CSG)</h3><ul><li>CSG creates complex shapes by combining simpler ones</li><li>It represents 3D objects through Boolean operations on primitive shapes</li><li>Typically, we use a <strong>CSG tree</strong> to represent a 3D object in terms of its primitive shapes (e.g., sphere, cube, cylinder) and the Boolean operations (union, intersection, subtraction).</li></ul><h4 id="csg-tree">CSG tree</h4><h5 id="definition">Definition</h5><ul><li>A CSG tree is a hierarchical data structure used to represent a 3D object with its primitive shapes and the Boolean operations.</li><li>The leaf nodes of the tree represent the basic primitives.</li><li>The internal nodes represent the Boolean operations applied to the primitives or other subtrees.</li><li>We typically construct a CSG tree in a bottom-up manner.</li></ul><h5 id="construction">Construction</h5><p>Construct a CSG tree based on primitives and operations in a bottom-up manner:</p><ul><li>Start with primitives: Use basic shapes like cubes, spheres, cones, cylinders, etc., as the leaves of the tree.</li><li>Apply boolean operations: Combine primitives using Union, Intersection, or Subtraction. Internal nodes represent these operations.</li><li>Build the tree recursively: Start from the leaf nodes (primitives) and apply the operations recursively. The root node represents the final operation that combines all primitives into the desired object.</li></ul><h5 id="example-construct-csg-tree">Example: Construct CSG tree</h5><p>Call the SDF Boolean operations step by step in a bottom-up way</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl">s6 = sdfIntersection(s1, s2);<br>s7 = sdfUnion(s4, s5);<br>s8 = sdfUnion(s3, s7);<br>s = sdfSubtraction(s6, s8);<br></code></pre></td></tr></table></figure><p><img src="CSG_TREE_EG.png" alt="CSG Example"></p><h2 id="sdf-primitive-smooth-combinations">SDF Primitive Smooth Combinations</h2><p>We expect to get rid of the visible edges between primitives caused by sculpting organic shapes by the union operation.</p><h3 id="sdf-smooth-combination">SDF Smooth Combination</h3><p>Key Idea: Use a smooth version of min() and max() in Boolean operations to smooth the transition between two shapes.<br><img src="smooth_min.png" alt="SDF Smooth Combination"></p><h3 id="how-to-define-a-smooth-minmax">How to define a smooth min/max()</h3><p>One of the simple examples is:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msub><mo>=</mo><mo>−</mo><mi>k</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>a</mi><mi mathvariant="normal">/</mi><mi>k</mi></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>k</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_{min(a, b)} = -klog_2(2^{-a/k} + 2^{-b/k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0385em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">a</span><span class="mord mtight">/</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">b</span><span class="mord mtight">/</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><ul><li>When a and b are similar: If a and b are close to each other, the exponential terms will be similarly sized, and the smooth minimum will be a value close to a and b.</li><li>When a and b differ significantly: If one of the values is much larger than the other, the exponential terms will decay faster for the larger value, and the smooth minimum will approximate the smaller value more closely.</li><li>When k is small, the function becomes less “smooth” and approximates a hard minimum. The transition between a and b happens more abruptly.</li><li>When k is large, the function becomes smoother and the transition between a and b is gradual. The function behaves more like a weighted average than a minimum.</li></ul><p><em>See IQ’s website for more implementations.</em></p><h2 id="sdf-primitive-deformations">SDF Primitive Deformations</h2><p>Add a small displacement field onto the original SDF field to model the small bumps on a surface.<br><img src="SDF_Deform.png" alt="SDF Deformations"></p><p><em>Similar to the displacement mapping.</em></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>SDF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L18-Advanced Topics</title>
    <link href="/2025/01/20/GAMES101-L18-AdvancedTopics/"/>
    <url>/2025/01/20/GAMES101-L18-AdvancedTopics/</url>
    
    <content type="html"><![CDATA[<h1 id="advanced-light-transport">Advanced Light Transport</h1><h2 id="non-biased">Non-biased</h2><h3 id="bidirectional-path-tracing-bdrt">Bidirectional Path Tracing (BDRT)</h3><p>Recall: a path connects the camera and the light</p><p>BDRT:</p><ul><li>Traces sub-paths from both the camera and the light</li><li>Connects the end points from both sub-paths</li><li>Suitable if the light transport is complex on the light’s side</li><li>Difficult to implement &amp; quite slow</li></ul><h3 id="metropolisn-light-transport-mlt">Metropolis(n.) Light Transport (MLT)</h3><ul><li>A Markov Chain Monte Carlo (MCMC) application<ul><li>Jumping from the current sample to the next with some PDF</li><li>With Markov Chain we are able to determine the PDF we use for Monte Carlo integration. The variance is minimized when the integrand (被积函数) and the shape of the PDF are the same.</li></ul></li><li>Very good at locally exploring difficult light paths</li><li>Key idea:<ul><li>Locally perturb (扰动) an existing path to get a new path</li></ul></li><li>Works great with difficult light paths</li><li>Also unbiased</li><li>Difficult to estimate the convergence rate (we can estimate the convergence rate of path tracing)</li><li>Does not guarantee equal convergence rate per pixe!</li><li>So, usually produces “dirty” results</li><li>Therefore, usually not used to render animations</li></ul><h2 id="biased">Biased</h2><h3 id="photon-mapping-光子映射">Photon Mapping (光子映射)</h3><ul><li>A biased approach &amp; A two-stage method</li><li>Very good at handling Specular-Diffuse-Specular (SDS) paths and generating caustics (焦散)</li></ul><h4 id="approach">Approach</h4><ul><li>Stage 1 - photon tracing<ul><li>Emitting photons from the <strong>light source</strong>, bouncing them around, then recording photons on diffuse surfaces</li></ul></li><li>Stage 2 - photon collection (final gathering)<ul><li>Shoot sub-paths from the <strong>camera</strong>, bouncing them around, until they hit diffuse surfaces</li></ul></li><li>Calculation - local density estimation<ul><li>Idea: areas with more photons should be brighter</li><li>For each shading point, find the nearest N photons. Take the surface area they over.</li><li>Density = N / area</li></ul></li></ul><h4 id="why-biased">Why Biased?</h4><ul><li>Small N -&gt; noisy; big N -&gt; blurry (模糊)</li><li>This is because <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>N</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>A</mi><mo mathvariant="normal">≠</mo><mi mathvariant="normal">Δ</mi><mi>N</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">Δ</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dN / dA \neq \Delta N / \Delta A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">/Δ</span><span class="mord mathnormal">A</span></span></span></span>.</li><li>But in the sense of limit, more photons emitted -&gt; the same N photons covers a smaller <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">\Delta A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span><span class="mord mathnormal">A</span></span></span></span> -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">\Delta A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span><span class="mord mathnormal">A</span></span></span></span> is closer to dA</li><li>So, biased but consistent!</li></ul><p>An easier understanding bias in rendering</p><ul><li>Biased == blurry</li><li>Consistent == not blurry with infinite #samples</li></ul><p>Why not do a “const range” search for density estimation?</p><ul><li>“Const range” means we can take a unit area (e.g., <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi>c</mi><msup><mi>m</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1cm^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>) and increase the number of photons in there, and then estimate local density by counting N. However, in this way <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">\Delta A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span><span class="mord mathnormal">A</span></span></span></span> will never get close to dA, so we don’t use this method.</li></ul><h3 id="vertex-connection-and-merging-vcm">Vertex Connection and Merging (VCM)</h3><ul><li>A combination of BDPT and Photon Mapping</li><li>Key idea:<ul><li>Let’s not waste the sub-paths in BDPT if their end points cannot be connected but can be merged</li><li>Use photon mapping to handle the merging of nearby “photons”</li></ul></li></ul><h3 id="instant-radiosity-ir">Instant Radiosity (IR)</h3><ul><li>Sometimes also called many-light approaches</li><li>Key idea:<ul><li>Lit surfaces can be treated as light sources</li></ul></li><li>Approach:<ul><li>Shoot light sub-paths and assume the end point of each sub-path is a Virtual Point Light (VPL)</li><li>Render the scene as usual using these VPLs</li></ul></li></ul><p>Pros:</p><ul><li>fast and usually gives good results on diffuse scenes</li></ul><p>Cons:</p><ul><li>Spikes will emerge when VPLs are close to shading points</li><li>Cannot handle glossy materials</li></ul><h1 id="advanced-appearance-modeling">Advanced Appearance Modeling</h1><h2 id="non-surface-models">Non-Surface Models</h2><h3 id="participating-materials">Participating Materials</h3><h4 id="phase-function">Phase function</h4><p>Use Phase Function to describe the angular distribution of light scattering at any point x within participating media.<br><img src="phase_func.png" alt="phase function"></p><h4 id="rendering">Rendering</h4><ul><li>Randomly choose a direction to bounce</li><li>Randomly choose a distance to go straight</li><li>At each ‘shading point’, connect to the light<br><img src="part_rendering.png" alt="rendering"></li></ul><p>…The following content is omitted…</p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L17-Materials and Appearances (材质与外观)</title>
    <link href="/2025/01/19/GAMES101-L17-MaterialsAndAppearances/"/>
    <url>/2025/01/19/GAMES101-L17-MaterialsAndAppearances/</url>
    
    <content type="html"><![CDATA[<h1 id="diffuse-lambertian-material">Diffuse / Lambertian Material</h1><p>Assume that diffuse materials will not emit light itself but can reflect all incident light (入射光). Based on the law of conservation of energy, the reflected irradiance should be equal to the incident irradiance. Also suppose the incident light and reflected light is uniform. Then we can write the rendering function as in the figure. fr is a constant representing BRDF, and Li is also a constant. Therefore, the result of the integratation is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>. Lo == Li because of the law of conservation of energy, so <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>π</mi></mrow><annotation encoding="application/x-tex">f_r = 1/\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span> (assume no light absorbed). And here we can add a albedo (反射率). Albedo can be single-channel or three-channel, ranging from 0 to 1. And so fr is in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>π</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 1/\pi]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mclose">]</span></span></span></span>.<br><img src="albedo.png" alt="albedo"></p><h1 id="perfect-specular-reflection">Perfect Specular Reflection</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> - 方位角<br><img src="perf_specular_ref.png" alt="Perfect Specular Reflection"></p><h1 id="snells-law-for-refraction-折射">Snell’s Law (for refraction 折射)</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span> - 折射率<br><img src="snellslaw.png" alt="snell's law"> (BTDF, T for Transmittance 折射; BSDF, S for Scattering 散射(generally including reflection and transmittance))<br>Based on snell’s law, we can calculate <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">cos\theta _t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (折射角的余弦)。Then we got the law of refraction based on the this equation - if we cannot find a reasonable solution to this equation, i.e., the part under the sqrt is negative, then there won’t exist transmittance. And since <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>θ</mi></mrow><annotation encoding="application/x-tex">1 - cos^2\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">co</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> will always be positive, if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>η</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>η</mi><mi>t</mi></msub><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\eta_i/\eta_t &gt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\theta_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is large enough, there will be no transmittance (全反射现象).<br><img src="law_of_refract.png" alt="law of refraction"></p><p>Fun: Snell Window / Circle: Only can see a cone under water surface<br><img src="snellwindow.png" alt="Snell Window"></p><h1 id="fresnel-reflection-term-菲涅耳项">Fresnel Reflection Term (菲涅耳项)</h1><p>Reflectance depends on incident angle (and polarization of light)<br>For example, reflectance increases with grazing angle.</p><p>Use Schlick’s approximation to approximate (avoid complex calculations):</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>R</mi><mn>0</mn></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>R</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi><msup><mo stretchy="false">)</mo><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">R(\theta) = R_0 + (1-R_0)(1 - cos\theta)^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">cos</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mn>0</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>η</mi><mn>1</mn></msub><mo>−</mo><msub><mi>η</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><msub><mi>η</mi><mn>1</mn></msub><mo>+</mo><msub><mi>η</mi><mn>2</mn></msub><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R_0 = ((\eta_1-\eta_2)/(\eta_1+\eta_2))^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">((</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span> - 折射率)</p><h1 id="microfacet-materials">Microfacet Materials</h1><p>Theory:</p><ul><li>Rough surface (远处看是材质，近处看是几何)<ul><li>Macroscale: flat &amp; rough</li><li>Microscale: bumpy &amp; specular</li></ul></li><li>Individual elements of surface act like mirrors<ul><li>Known as Microfacets</li><li>Each microfacet has its own normal 法线<br><img src="microfacet.png" alt="microfacet materials"></li></ul></li></ul><h2 id="microfacet-brdf">Microfacet BRDF</h2><p>As shown in the figure, the distribution of microfacets’ normals affects how the materials look.<br><img src="microfacet_BRDF.png" alt="microfacet materials"><br>What kind of microfacets reflect wi to wo? Since we consider microfacet as mirrors, only when its normal coincides with the half vector h, it will reflect wi to wo. Thus, D(h) describes how many normals coincide with the half vector. The shadowing-masking term describes the phenomenon that microfacets obstruct each other, causing some microfacets to be unable to receive light / certain micro-surfaces to be invisible from some angles. This self-shadowing phenomenon is likely to occur when the angle of incidence light is close to the grazing angle (the direction of light is almost parallel to the surface).<br><img src="microfacet_BRDF1.png" alt="microfacet materials"></p><h2 id="isotropic-anisotropic-materialsbrdfs-各向同性-各向异性材料">Isotropic / Anisotropic Materials(BRDFs) (各向同性 / 各向异性材料)</h2><p>Tell whether the material is isotropic or anisotropic by the directionality of underlying microfacets.<br><img src="microfacet_BRDF1.png" alt="microfacet materials"></p><h3 id="anisotropic-brdf">Anisotropic BRDF</h3><p>Reflection depends on azimuthal angle (方位角) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>.<br>If the BRDF <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo separator="true">;</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(\theta_i, \phi_i; \theta_r, \phi_r) \neq f_r(\theta_i, \theta_r, \phi_r-\phi_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> (think of we look at a rotated ‘V’ from the above, and the relative angle between incident light and reflected light changes), then it’s anisotropic.</p><h1 id="properties-of-brdf">Properties of BRDF</h1><ul><li>Non-negativity: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>−</mo><mo>&gt;</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f_r(\omega_i -&gt; \omega_r) &gt;= 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>. fr represents energy distribution, so it cannot be negative.</li><li>Linearity: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>−</mo><mo>&gt;</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_r(p, \omega_r) = \int_{H^2}f_r(p, \omega_i -&gt; \omega_r) L_i(p, \omega_i) cos\theta_i d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1666em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. Recall the Blinn-Phong model, we divide lighting into three types: specular highlights, diffuse reflection, and ambient lighting (环境光照). This means that we can divide BRDF into multiple parts and add them up to get a final result.</li><li>Reciprocity principle (可逆性): <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>−</mo><mo>&gt;</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo>−</mo><mo>&gt;</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(\omega_i -&gt; \omega_r) = f_r(\omega_r -&gt; \omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>Energy conservation: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><msub><mi>ω</mi><mi>r</mi></msub><mspace width="1em"><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mtext> </mtext><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn></mspace></mrow><annotation encoding="application/x-tex">\forall \omega_r \quad \int_{H^2} f_r(\omega_i \to \omega_r) \cos \theta_i \, d\omega_i \leq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mord">∀</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1666em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>Isotropic vs. Anisotropic:<ul><li>if isotropic, we can convert 4d BRDF to 3d BRDF: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo separator="true">;</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(\theta_i, \phi_i; \theta_r, \phi_r) = f_r(\theta_i, \theta_r, \phi_r-\phi_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>Then from reprocity, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><mi mathvariant="normal">∣</mi><msub><mi>ϕ</mi><mi>r</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(\theta_i, \theta_r, \phi_r-\phi_i) = f_r(\theta_r, \theta_i, \phi_i-\phi_t) = f_r(\theta_i, \theta_r, |\phi_r-\phi_i|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></li></ul></li></ul><h1 id="measuring-brdf">Measuring BRDF</h1><h2 id="motivation-of-measuring-brdf">Motivation of Measuring BRDF</h2><ul><li>Avoid need to develop / derive models<ul><li>Automatically includes all of the scattering effects present</li></ul></li><li>Can accurately render with real-world materials<ul><li>Useful for product design, special effects, …</li></ul></li></ul><h2 id="approaches">Approaches</h2><p><img src="BRDF_measure.png" alt="Measuring BRDF"></p><p><strong>General approach</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> each outgoing direction wo<br>    move light to illuminate surface <span class="hljs-keyword">with</span> a thin beam <span class="hljs-keyword">from</span> wo<br>    <span class="hljs-keyword">for</span> each incoming direction wi<br>        move sensor to be at direction wi <span class="hljs-keyword">from</span> surfac<br>        measure incident radiance<br></code></pre></td></tr></table></figure><p><strong>Improving efficiency</strong>:</p><ul><li>Isotropic surfaces reduce dimensionality from 4D to 3D</li><li>Reciprocity reduces # of measurements by half</li><li>Clever optical systems…</li></ul><h2 id="challenges">Challenges</h2><ul><li>Accurate measurements at grazing angles<ul><li>Important due to Fresnel effects</li></ul></li><li>Measuring with dense enough sampling to capture high frequency specularities</li><li>Retro-reflection</li><li>Spatially-varying reflectance.</li></ul><h2 id="representing-measured-brdf">Representing Measured BRDF</h2><p>Desirable qualities</p><ul><li>Compact representation</li><li>Accurate representation of measured data</li><li>Efficient evaluation for arbitrary pairs of directions</li><li>Good distributions available for importance sampling</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS 8803 CGA - SDF Foundation</title>
    <link href="/2025/01/16/CS8803-CGA-L02/"/>
    <url>/2025/01/16/CS8803-CGA-L02/</url>
    
    <content type="html"><![CDATA[<p>credit for Prof. Bo Zhu’s CS 8803 CGA</p><h2 id="intro">Intro</h2><p>Some shapes are not easy to be represented by triangle meshes.</p><ul><li>Fractals: A fractal shape takes a mathematical expression or recursive program as its<br>representation, which will be prohibitively expensive to convert to a mesh.</li><li>The ocean surface animation is very complicated, which involves a lot of shape merging and splitting; and its shape is changing all the time.</li><li>Procedural Terrain</li></ul><p>Interesting: <a href="https://iquilezles.org/">https://iquilezles.org/</a></p><h2 id="signed-distance-function-sdf">Signed Distance Function (SDF)</h2><h3 id="1d-distance-function">1D Distance Function</h3><h4 id="distance-and-signed-distance">Distance and Signed Distance</h4><p>Distance</p><ul><li>A scalar value measuring how far apart two points are</li><li>A distance is always positive (or zero)</li></ul><p>Signed Distance</p><ul><li>Use a ‘-’ or ‘+’ sign in front of the distance to indicate if the point is inside or outside of the interface defined by a given point in a 1D axis.</li><li>For 1D case, we assume a point is inside (‘-’) if it is on the left of the given point and outside (‘+’) if it is on the right of the given point (just our assumption!).</li></ul><h4 id="sdf-for-a-point">SDF for a point</h4><ul><li>UDF Example: d(x) = |x-1|, d(x) is called distance function; it is also called unsigned distance function (UDF) to distinguish from the signed distance function.</li><li>SDF Example: Similarly, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\phi(x) = x-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ul><p><strong>Derivatives of SDF</strong>:<br>Think of the visuals SDF to any point x on a 1d axis, it seems that we are just translating the function shape on x-axis according to x, and the function shape never changes. That is to say, the derivatives of the 1d SDFs are the same - always 1.</p><h4 id="sdf-for-a-segment">SDF for a segment</h4><p>Assume we have a segment ‘ab’ with its two endpoints a and b.</p><ul><li>If the point is inside the segment, the sign is negative; if the point is outside<br>the segment, the sign is positive.</li><li>Define the signed distance from a point ‘p’ to this segment ‘ab’ as the shortest distance to one of its two endpoints (i.e., on its boundary).<br><img src="SDF_1D_SEG.png" alt="1d segment SDF"><br><img src="SDF_1D_2SEG.png" alt="1d segment SDF"></li></ul><h4 id="summary-of-1d-sdf">Summary of 1D SDF</h4><ul><li>The sign (-/+) indicates if the given point is inside/outside the given object</li><li>‘-’ always indicates inside; ‘+’ always indicates outside</li><li>The magnitude of SDF indicates the closest distance from the point to the boundary of the object</li></ul><p>These properties also apply to higher dimensions.</p><h3 id="2d-distance-function">2D Distance Function</h3><h4 id="goal">Goal</h4><ul><li>A function to determine whether a given point is inside, outside, or on the boundary of an object</li><li>A function to provide the closest distance from the point to the circle.</li></ul><h4 id="definition">Definition</h4><ul><li>The closest distance from a point to the boundary of the object is the shortest distance between the point and any location on the object’s boundary.</li><li>Mathematically, this distance is measured along a straight line that is perpendicular to the boundary at the point where it touches.</li><li>The magnitude of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> defines the closest distance from p to the boundary of the object; the sign of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> indicates if p is outside (+) or inside (-) the object. p is on the circle iff <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> = 0</li></ul><h4 id="examples">Examples</h4><h5 id="sdf-for-circles">SDF for circles</h5><p><img src="SDF_Circle.png" alt="SDF for circles"><br>Visualize SDF for circles with isocontours.<br><img src="SDF_Circle1.png" alt="SDF for circles"></p><h4 id="sdf-derivatives">SDF Derivatives</h4><p>See the figure below calculation the gradient of 2D SDF gradient. It turns out that <strong>SDF have a gradient of length one everywhere</strong>.<br><img src="SDF_Grad.png" alt="Gradient of SDF"></p><p>PS:<br><strong>Difference Between Gradient and Derivatives</strong></p><ol><li>Derivative: A derivative is a measure of how a function changes as its input changes.<br>For a function of multiple variables (e.g., <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>), we can calculate partial derivatives <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∂</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">∂</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\partial\phi(x,y) / \partial x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">/</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">x</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∂</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">\partial\phi(x,y) / \partial y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">/</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>, which represent the rate of change of the function along thex-axis and y-axis, respectively.</li><li>Gradient: The gradient is <strong>a vector that combines all the partial derivatives of a function</strong>.<br>For <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>, the gradient is: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∂</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">∂</mi><mi>x</mi><mo separator="true">,</mo><mi mathvariant="normal">∂</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">∂</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\nabla \phi(x, y) = (\partial\phi(x,y) / \partial x, \partial\phi(x,y) / \partial y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∇</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">/</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">/</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>.<br>The gradient <strong>points in the direction of the steepest increase of the function</strong>, and <strong>its magnitude gives the rate of change in that direction</strong>.</li><li>Gradient Magnitude:<br>The magnitude of the gradient vector is the Euclidean norm:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">∂</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">∂</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∂</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">∂</mi><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">||\nabla \phi(x, y)|| = \sqrt{(\partial\phi(x,y) / \partial x)^2 + (\partial\phi(x,y) / \partial y)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣∣∇</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">∣∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.305em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">/</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">/</span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.895em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.28em" viewbox="0 0 400000 1296" preserveaspectratio="xMinYMin slice"><path d="M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305em;"><span></span></span></span></span></span></span></span></span>.</li></ol><p><strong>Why does SDF have a gradient of length one everywhere?</strong><br><img src="SDF_Grad1.png" alt="Gradient of SDF"><br>For an arbitrary point x in the 2D domain, the magnitude of its gradient always satisfies: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><mi>ϕ</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|\nabla \phi| = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣∇</span><span class="mord mathnormal">ϕ</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>. In other words, the gradient vector at any point is always a unit vector pointing in the direction where<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> increases the most. This conclusion is very important and <strong>can be generalized to an arbitrary shape</strong>!</p><h4 id="relation-between-gradient-and-closest-point">Relation between Gradient and Closest Point</h4><p>For a given point p, we can get its closest point to the surface based on its SDF value and SDF gradient. We can simply move along the gradient direction by the SDF value to get the closest point. See the figure below, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> determines the distance value, while the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\nabla \phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∇</span><span class="mord mathnormal">ϕ</span></span></span></span> (a vector) determines the direction.<br><img src="SDF_Grad_rel.png" alt="Relation between gradient and closest point"></p><p>See <a href="https://www.shadertoy.com/view/3ltSW2">https://www.shadertoy.com/view/3ltSW2</a> for circle SDF in shadertoy.</p><h4 id="general-calculation-for-simple-shapes">General Calculation for Simple Shapes</h4><p>The idea can be</p><ul><li>check which region the querying point falls into</li><li>calculate the sign and closest distance according to different regions<br><img src="SDF_calc1.png" alt="Rectangle SDF Calculation"><br><img src="SDF_calc2.png" alt="Triangle SDF Calculation"><br><img src="SDF_calc3.png" alt="Segment SDF Calculation"><br>Note that there is no ‘-’ region for a segment because it doesn’t have an ‘interior’ in 2D.</li></ul><h4 id="summary-of-2d-sdf">Summary of 2D SDF</h4><ul><li>SDF represents a signed distance from a given point p to a given shape’s surface</li><li>Plot a 2D SDF with isocontours, height fields, or color fields</li><li>For a simple primitive, such as a segment, triangle, or rectangle, we can calculate its SDF values by dividing the shape into regions and computing the value according to which region the query point falls into</li><li>Calculating SDF for an arbitrary 2D shape relies on more advanced algorithms such as fast marching and neural networks</li></ul><h3 id="3d-distance-function">3D Distance Function</h3><ul><li>The 3D extension of the 2D SDFs, by extending from the previous x and y axes in 2D to the x, y, and z axes in 3D.</li><li>The idea of constructing the 3D primitives such as sphere, box, and segment remain the same as 2D, in which we divide the domain into multiple regions and calculate the SDF according to which region the querying point falls into.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>SDF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L16-Ray Tracing 4 (Monte Carlo Path Tracing)</title>
    <link href="/2025/01/14/GAMES101-L16-RayTracing4/"/>
    <url>/2025/01/14/GAMES101-L16-RayTracing4/</url>
    
    <content type="html"><![CDATA[<h1 id="monte-carlo-integration">Monte Carlo Integration</h1><p><strong>Why</strong>: we want to solve an integral (definite integral 定积分), but it can be too difficultto solve analytically.</p><p>PS: <strong>Indefinite Integral and Definite Integral</strong></p><ul><li>Definite integral:<ul><li>It computes the net area under a curve between two specific limits (boundaries).</li><li>Notation: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_{a}^bf(x)dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3998em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.044em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span>, where a and b are the lower and upper limits of integration.</li><li>The result is a numerical value representing the total accumulation (e.g., area under the curve) between a and b.</li></ul></li><li>Indefinite integral:<ul><li>An indefinite integral represents a family of antiderivative functions of a given function.</li><li>Notation: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int f(x)dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span>, without limits of integration.</li><li>The result is a function, plus a constant of integration C, since antiderivatives differ by a constant.</li></ul></li><li>Relationship:<ul><li>A definite integral can be evaluated using an indefinite integral by applying the Fundamental Theorem of Calculus: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\int_{a}^bf(x)dx = F(b) - F(a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3998em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.044em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span>, where F(x) is the indefinite integral (antiderivative) of f(x).</li></ul></li></ul><p><strong>What &amp; How</strong>: estimate the integral of a function by averaging random samples of the function’s value.</p><p><strong>Basic Idea</strong>:</p><p>Instead of calculating the exact area under a curve or in a multidimensional space, randomly sample points within a domain.<br>Use the fraction of points that “fall under the curve” to estimate the integral.</p><p><img src="monte_carlo.png" alt="Monte Carlo Integration"></p><h1 id="path-tracing-路径追踪">Path Tracing (路径追踪)</h1><h2 id="whitted-style-ray-tracing">Whitted-style ray tracing</h2><ul><li>Always perform specular reflections /refractions</li><li>Stop bouncing at difuse surfaces</li></ul><h3 id="problems">Problems</h3><ul><li>Where should the ray be reflected for glossy materials (different from mirror materials)?</li><li>No reflections between diffuse materials? (See the figurer below, with global illumination, the left side of the taller box looks red because of the red wall, which is called color bleeding)<br><img src="CornellBox.png" alt="CornellBox"></li></ul><p>Now we know that Whitted-style ray tracing is wrong, but the rendering equation is correct. The next problem is how to calculate a definite integral over the hemisphere and perform the recursive execution.</p><h2 id="a-simple-monte-carlo-solution">A Simple Monte Carlo Solution</h2><p>Here, we temporarily ignore the emitted radiance term in the rendering equaiton. Here, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn><mi>π</mi></mrow><annotation encoding="application/x-tex">p(\omega_i) = 1/2\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span> because the solid angle corresponding to a sphere is 4pi and the solid angle corresponding to a hemisphere is 2pi.<br><img src="monte_carlo_sol1.png" alt="a simple Monte Carlo solution"></p><p>And thus, we can get a correct shading algorithm for direct illumination, as shown in the figure below. Here, BRDF is related to surface materials and lighting conditions, we can consider them as constants.<br><img src="monte_carlo_sol2.png" alt="a simple Monte Carlo solution"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">shade(p, wo):<br>    Randomly choose N directions wi~pdf<br>    Lo = <span class="hljs-number">0.0</span> <span class="hljs-comment"># Total L at P</span><br>    <span class="hljs-keyword">for</span> each wi:<br>        Trace a ray r(p, wi)<br>        <span class="hljs-keyword">if</span> ray r hit the light:<br>            Lo += (<span class="hljs-number">1</span>/N) * Li * fr * cosine / pdf(wi)<br>    <span class="hljs-keyword">return</span> Lo<br></code></pre></td></tr></table></figure><p>One more step, if a ray hits an object Q, Q will also reflects light to Point P. We can consider it as computing the direct illumination at Q. Therefore, we can get an algorithm for global illumination by simply adding a branch to the algorithm above. Here, we use -wi in shade(q, -wi) because we assume all directions are outward by default.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">shade(p, wo):<br>    Randomly choose N directions wi~pdf<br>    Lo = <span class="hljs-number">0.0</span> <span class="hljs-comment"># Total L at P</span><br>    <span class="hljs-keyword">for</span> each wi:<br>        <span class="hljs-comment"># Trace a ray from point p in direction wi.</span><br>        <span class="hljs-comment"># This checks whether the ray intersects a light source or another object in the scene.</span><br>        Trace a ray r(p, wi)<br>        <span class="hljs-keyword">if</span> ray r hit the light:<br>            Lo += (<span class="hljs-number">1</span>/N) * Li * fr * cosine / pdf(wi)<br>            <span class="hljs-comment"># Li: The radiance emitted by the light source.</span><br>            <span class="hljs-comment"># fr: The BRDF (Bidirectional Reflectance Distribution Function) at p, which defines how light reflects at the surface.</span><br>            <span class="hljs-comment"># cosine: cos(θi), the angle between the surface normal and wi (accounts for incident light angle).</span><br>            <span class="hljs-comment"># pdf(wi): Probability density of sampling direction wi.</span><br>            <span class="hljs-comment"># (1/N): Monte Carlo integration weight (averaging over N samples).</span><br>        <span class="hljs-keyword">else</span> If r hit an <span class="hljs-built_in">object</span> at q:<br>            <span class="hljs-comment"># If the ray hits another object at point q, recursively compute the light at q.</span><br>            Lo += (<span class="hljs-number">1</span>/N) * shade(q, -wi) * fr * cosine / pdf(wi)<br>            <span class="hljs-comment"># Recursively call shade() for point q, with -wi as the outgoing direction.</span><br>            <span class="hljs-comment"># This adds the indirect illumination contribution (light bouncing off other objects).</span><br>    <span class="hljs-keyword">return</span> Lo<br></code></pre></td></tr></table></figure><h2 id="problems-and-solutions">Problems and Solutions</h2><p>However, we still have problems.</p><ol><li><p>Explosion of the number of rays as the number of bounces goes up.<br><code>#rays = N^#bounces$</code><br>We notice that <code>#rays</code>increases exponentially as<code>#bounces</code>increases. However, if N (sampling number in monte carlo integration) is equal to 1,<code>#rays</code> won’t increase. So from now on, we always assume that only 1 ray is traced at each shading point:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">shade(p, wo):<br>    Randomly choose ONE directions wi~pdf<br>    Lo = <span class="hljs-number">0.0</span> <span class="hljs-comment"># Total L at P</span><br>    <span class="hljs-keyword">for</span> each wi:<br>        Trace a ray r(p, wi)<br>        <span class="hljs-keyword">if</span> ray r hit the light:<br>            Lo += (<span class="hljs-number">1</span>/N) * Li * fr * cosine / pdf(wi)<br>        <span class="hljs-keyword">else</span> If r hit an <span class="hljs-built_in">object</span> at q:<br>            Lo += (<span class="hljs-number">1</span>/N) * shade(q, -wi) * fr * cosine / pdf(wi)<br>    <span class="hljs-keyword">return</span> Lo<br></code></pre></td></tr></table></figure><p><strong>With N = 1, we have the path tracing</strong> (although there’s a lot of noise) (when N!=1 it’s called distributed ray tracing). Although it will be noisy with only one sampling, we can solve this problem by tracing more paths through each pixel and average their radiance (pseudocode as below).<br><img src="path_tracing.png" alt="path tracing with multiple paths"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ray_generation(camPos, pixel):<br>    Uniformly choose N sample positions within the pixel<br>    pixel_radiance = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> each sample <span class="hljs-keyword">in</span> the pixel:<br>        Shoot a ray r(camPos,cam_to_sample)<br>        <span class="hljs-keyword">if</span> ray rhit the scene at p<br>            pixel_radiance += <span class="hljs-number">1</span> / N * shade(p, sample_to_cam)<br>    <span class="hljs-keyword">return</span> pixel radiance<br></code></pre></td></tr></table></figure></li><li><p>The recursive algorithm will never stop - we need a base case. The dilemma is that, in the real world the light does not stop bouncing indeed. Cutting <code>#bouncing</code> == cutting energy.<br>To solve this, we use Russian Roulette (RR, 俄罗斯轮盘赌), which is all about probability.</p><ul><li>With probability 0 &lt; P &lt; 1, you are fine</li><li>With probability 1 - P, otherwise</li></ul></li></ol><p>Previously, we always shoot a ray at a shading point and get the shading result Lo.<br>Now suppose we manually set a probability P (0 &lt; P &lt; 1),</p><ul><li>with probability P, shoot a ray and return the shading result divided by P: Lo / P</li><li>with probability 1-P, don’t shoot a ray and we’ll get 0<br>In this way, we can still expect to get Lo: E = P*(Lo/P) + (1-P)*0 = Lo</li></ul><p>With RR, we get a <strong>correct</strong> path tracing method as the pseudocode below shows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">shade(p，wo):<br>    Manually specify a probability P RR<br>    Randomly select ksi <span class="hljs-keyword">in</span> a uniform dist. <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> (ksi &gt; PRR):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span><br>    Randomly choose ONE direction wi~pdf(w)<br>    Trace a ray r(p,wi)<br>    <span class="hljs-keyword">if</span> ray r hit the light:<br>        <span class="hljs-keyword">return</span> Li*fr*cosine / pdf(wi) /PRR<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ray r hit an <span class="hljs-built_in">object</span> at q:<br>        <span class="hljs-keyword">return</span> shade(q,-wi) * fr * cosine / pdf(wi) / PRR<br></code></pre></td></tr></table></figure><ol start="3"><li>After 2., we have got a correct path tracing method, but it’s not that efficient. This is because if we uniformly sample the hemisphere at a shading point and emit a lot of rays from the point, most rays will be wasted (only a few hit the light source).</li></ol><p>Monte Carlo methods allows any sampling methods, so we can sample the <strong>light</strong> rather than the shading point (therefore no rays are “wasted”).<br>Assume uniformly sampling on the light:<br>pdf = 1/A (because <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>p</mi><mi>d</mi><mi>f</mi><mi>d</mi><mi>A</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\int pdf dA = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">dfd</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>).<br>But the rendering equation integrates on the solid angle: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo>=</mo><mo>∫</mo><msub><mi>L</mi><mi>i</mi></msub><msub><mi>f</mi><mi>r</mi></msub><mi>c</mi><mi>o</mi><mi>s</mi><mi>d</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">L_o = \int L_i f_r cos d\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">cos</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span>, and monte carlo integration requires “sample on x and integrate on x”. Therefore, we need to convert the rendering equation to an integration of dA rather than dw. See the figure below, think of scalene triangle (相似三角形) and the definition of solid angle. To build a relationship between dA and dw, we can imagine we have a unit sphere (r=1), on which dw (solid angle) is equal to the area corresponding to the solid angle on the sphere surface. Also imagine another sphere, whose r = ||x’-x||, and the corresponding area on the sphere surface is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi><mi>c</mi><mi>o</mi><mi>s</mi><msup><mi>θ</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">dAcos\theta&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>. In this case, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>ω</mi><mi mathvariant="normal">/</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">d\omega/1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mord">/1</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi><mi>c</mi><mi>o</mi><mi>s</mi><msup><mi>θ</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">/</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>−</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">dAcos\theta&#x27;/||x&#x27;-x||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">/∣∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord">∣∣</span></span></span></span> represents the same solid angle, and so we got the equation.<br><img src="A_SR.png" alt="light source area and solid angle"><br>Then we can rewrite the rendering equation as follows. Now it’s an integration on the light.<br>Monte Carlo integration:</p><ul><li>“f(x)”: everything inside</li><li>PDF = 1/A<br><img src="mc_da.png" alt="rewrite"></li></ul><p>Previously, we assume the light is “accidentally” shot by uniform hemisphere sampling. Now we consider the radiance coming from two parts:</p><ul><li>light source (direct, no need to have RR)</li><li>other reflectors (indirect, RR)</li></ul><p>Finally, the pseudocode is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">shade(P，wo):<br>    <span class="hljs-comment"># Contribution from the light source.</span><br>    Uniformly sample the light at x_prime (pdf_light=<span class="hljs-number">1</span>/A)<br>    L_dir = Li * fr * cos_theta * cos_theta_prime / |x_prime-p|^<span class="hljs-number">2</span> / pdf_light<br>    <span class="hljs-comment"># Contribution from other reflectors.</span><br>    L_indir = <span class="hljs-number">0.0</span><br>    Test Russian Roulette <span class="hljs-keyword">with</span> probability P_RR<br>    Uniformly sample the hemisphere toward wi(pdf_hemi = <span class="hljs-number">1</span> / 2pi)<br>    Trace a ray r(p, wi)<br>    <span class="hljs-keyword">if</span> ray r hit a non-emitting <span class="hljs-built_in">object</span> at q:<br>        L_indir = shade(q,-wi) * fr * cos_theta / pdf_hemi / P_RR<br>    <span class="hljs-keyword">return</span> L_dir + L_indir<br></code></pre></td></tr></table></figure><ol start="4"><li>One final thing: how do we know if the sample on the light is blocked or not? We can cast a ray from the shading point p to the sampling point x at the light source, and see if this ray is blocked.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">shade(P，wo):<br>    <span class="hljs-comment"># Contribution from the light source.</span><br>    L_dir =<span class="hljs-number">0.0</span><br>    Uniformly sample the light at x_prime (pdf_light=<span class="hljs-number">1</span>/A)<br>    Shoot a ray <span class="hljs-keyword">from</span> p to x (p <span class="hljs-keyword">is</span> the shading point <span class="hljs-keyword">and</span> x <span class="hljs-keyword">is</span> the sampling point at the light source)<br>    <span class="hljs-keyword">if</span> the ray <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> blocked <span class="hljs-keyword">in</span> the middle:<br>        L_dir = Li * fr * cos_theta * cos_theta_prime / |x_prime-p|^<span class="hljs-number">2</span> / pdf_light<br>    <span class="hljs-comment"># Contribution from other reflectors.</span><br>    L_indir = <span class="hljs-number">0.0</span><br>    Test Russian Roulette <span class="hljs-keyword">with</span> probability P_RR<br>    Uniformly sample the hemisphere toward wi(pdf_hemi = <span class="hljs-number">1</span> / 2pi)<br>    Trace a ray r(p, wi)<br>    <span class="hljs-keyword">if</span> ray r hit a non-emitting <span class="hljs-built_in">object</span> at q:<br>        L_indir = shade(q,-wi) * fr * cos_theta / pdf_hemi / P_RR<br>    <span class="hljs-keyword">return</span> L_dir + L_indir<br></code></pre></td></tr></table></figure><p>Now the path tracing is finally done!</p><h2 id="a-few-further-questions">A few further questions</h2><ul><li>Uniformly sampling the hemisphere<ul><li>How? And in general, how to sample any function? (sampling)</li></ul></li><li>Monte Carlo integration allows arbitrary pdfs<ul><li>What’s the best choice? (importance sampling)</li></ul></li><li>Do random numbers matter?<ul><li>Yes! (low discrepancy sequences)</li></ul></li><li>I can sample the hemisphere and the light<ul><li>Can I combine them? Yes! (multiple importance sampling)</li></ul></li><li>The radiance of a pixel is the average of radiance on all paths passing through it<ul><li>Why? (pixel reconstruction filter)</li></ul></li><li>Is the radiance of a pixel the color of a pixel?<ul><li>No.(gamma correction, curves, color space)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L15-Ray Tracing 3 (Radiometry + BRDF + Probability Review)</title>
    <link href="/2025/01/14/GAMES101-L15-RayTracing3/"/>
    <url>/2025/01/14/GAMES101-L15-RayTracing3/</url>
    
    <content type="html"><![CDATA[<h1 id="radiometry">Radiometry</h1><ul><li>Measurement system and units for illumination.</li><li>Accurately measure the spatial properties of light<ul><li>New terms: Radiant flux, intensity, irradiance, radiance</li></ul></li><li>Perform lighting calculations in a physically correct manner</li></ul><h2 id="radiant-energy-and-flux-通量">Radiant Energy and Flux (通量)</h2><p>Radiant energy: the energy of electromagnetic radiation. It is measured in units of joules (焦耳), and denoted by the symbol: Q [J = Joule]</p><p>Radiant flux (power): the energy emitted, reflected, transmitted or received, <strong>per unit time</strong>. It’s denoted by: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Φ</mi><mo>≡</mo><mi>d</mi><mi>Q</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\Phi \equiv dQ/dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Φ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">Q</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span></span><br>[W = Watt] [lm = lumen] (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4637em;"></span><span class="mrel">≡</span></span></span></span> means “identically equal”)</p><h2 id="light-measurements">Light Measurements</h2><h3 id="radiant-intensity">Radiant Intensity</h3><p>Definition: The radiant (luminous) intensity is the power <strong>per unit solid angle (立体角)</strong> emitted by a point light source.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>≡</mo><mi>d</mi><mi mathvariant="normal">Φ</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">I(\omega) \equiv d\Phi/d\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord">Φ/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span><br>[W/sr][lm/sr = cd = candela]<br>The candela is one of the seven Sl base units.</p><h4 id="angle-and-solid-angle">Angle and Solid Angle</h4><p>Angle: ratio of subtended arc length on circle to radius</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>=</mo><mi>l</mi><mi mathvariant="normal">/</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">\theta = l/r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></li><li>Circle has 2π radians</li></ul><p>Solid angle: ratio of subtended area on sphere to radius squared</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mi>A</mi><mi mathvariant="normal">/</mi><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\Omega = A / r^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li><li>Sphere has 4n steradians (sr)</li></ul><p><strong>Differential Solid Angle</strong><br><img src="diff_sr.png" alt="dsr" title="Differential Solid Angle"><br><img src="diff_sr1.png" alt="dsr" title="Differential Solid Angle"></p><h4 id="isotropic-point-source">Isotropic Point Source</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>f</mi><mi>l</mi><mi>u</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>S</mi><mn>2</mn></msup></msub><mi>I</mi><mtext> </mtext><mi>d</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">\Phi (flux) = \int_{S^2} I \, d\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">ux</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1666em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>ϕ</mi><mi mathvariant="normal">/</mi><mn>4</mn><mi>π</mi></mrow><annotation encoding="application/x-tex">I(intensity) = \phi / 4 \pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal">in</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mord">/4</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span></p><p>Understanding: I (intensity) is the power (flux) in a specific direction.</p><h3 id="irradiance-入射">Irradiance (入射)</h3><p><img src="irradiance.png" alt="irradiance"><br>Here, A refers to effective area (projected area, the area perpendicular to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span>).<br>Also, think of solar altitude angle (太阳高度角), that’s why we have seasonal changes.</p><h3 id="radiance-出射">Radiance (出射)</h3><ul><li>Radiance is the fundamental field quantity that describes the distribution of light in an environment</li><li>Radiance is the quantity associated with a ray</li><li>Rendering is all about computing radiance<br><img src="radiance.png" alt="radiance"></li></ul><h4 id="incident-radiance-and-exiting-radiance">Incident Radiance and Exiting Radiance</h4><p>Recall:</p><ul><li>Irradiance: power per projected unit area</li><li>Intensity: power per solid angle<br>So,</li><li>Radiance: Iradiance per solid angle</li><li>Radiance: Intensity per projected unit area</li></ul><p>So, we have the concept of incident radiance and exiting radiance.</p><p><strong>Incident Radiance</strong><br><img src="in_rad.png" alt="inrad" title="incident radiance"></p><p><strong>Exiting Radiance</strong><br><img src="ex_rad.png" alt="exrad" title="exiting radiance"></p><h4 id="irradiance-vs-radiance">Irradiance vs. Radiance</h4><p><img src="irrr.png" alt="irrr" title="Irradiance vs. Radiance"></p><h1 id="bidirectional-reflectance-distribution-function-brdf-双向反射分布函数">Bidirectional Reflectance Distribution Function (BRDF, 双向反射分布函数)</h1><p>BRDF defines the relationship between incoming and outgoing light directions with the corresponding radiance and irradiance.</p><p><img src="BRDF1.png" alt="Reflection at a Point"><br>As in the figure above, the incoming irradiance is computed as:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>E</mi><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">dE(\omega_i) = L_i(\omega_i)cos(\theta_i)d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>Here,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_i(\omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: Incoming radiance.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cos(\theta_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: Accounts for the angle between the surface normal N and the incoming light direction.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: Solid angle of the incoming light.</p><p>Then, the irradiance is reflected to outgoing directions w, producing differential radiance <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dL_r(x, \omega_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p><h2 id="brdf-function">BRDF Function</h2><p><img src="BRDF2.png" alt="BRDF"><br>According to the figure above, the BRDF <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>−</mo><mo>&gt;</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(\omega_i -&gt; \omega_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> describes how much of the incoming radiance from direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, is reflected toward direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">\omega_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</p><p>Mathematically, the BRDF is defined as:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><msub><mi>E</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow></mfrac><mspace width="1em"><mo fence="false" stretchy="true" minsize="3em" maxsize="3em">[</mo><mfrac><mn>1</mn><mrow><mi>s</mi><mi>r</mi></mrow></mfrac><mo fence="false" stretchy="true" minsize="3em" maxsize="3em">]</mo></mspace></mrow><annotation encoding="application/x-tex">f_r(\omega_i \rightarrow \omega_r) = \frac{dL_r(\omega_r)}{dE_i(\omega_i)} = \frac{dL_r(\omega_r)}{L_i(\omega_i) \cos \theta_i d\omega_i} \quad \Bigg[\frac{1}{sr}\Bigg]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="delimsizing size4">[</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">sr</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="delimsizing size4">]</span></span></span></span></span></span></p><p>Here,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">f_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: Ratio of outgoing radiance to incoming irradiance.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>s</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">1/sr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.02778em;">sr</span></span></span></span>: Ensures the result is in terms of energy per unit area, per unit solid angle.</p><p>Key ldea: The BRDF depends on the incoming direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, outgoing direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">\omega_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, and the material properties of the surface.</p><p><img src="BRDF3.png" alt="BRDF" title="Reflectance Integral over the Hemisphere"></p><p>The figurer above shows an integral form. To compute the total outgoing radiance <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_r(p, \omega_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> at a point p in direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">\omega_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, we integrate over all incoming directions <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> on the hemisphere <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">H^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_r (p, \omega_r) = \int_{H^2} f_r(p, \omega_i \rightarrow \omega_r) L_i (p, \omega_i) \cos \theta_i d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2719em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.3895em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>Here,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(p, \omega_i \rightarrow \omega_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: BRDF at point p.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_i(p, \omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: Incoming radiance.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cos(\theta_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: Accounts for the projection of the incoming light on the surface.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: Differential solid angle of incoming directions.</p><p>Practical Use: This integral is essential for rendering realistic lighting by computing how much light is reflected toward the camera or any other outgoing direction.</p><h2 id="the-rendering-equation">The Rendering Equation</h2><h3 id="equation">Equation</h3><p><img src="rendering_eq.png" alt="the rendering equation"><br>To generalize the reflection equation, we add an emission term <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_e(p, \omega_o)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> to it. This accounts for surfaces that can emit light (e.g., light sources such as the sun, lamps, or glowing objects). The new equation is called the Rendering Equation.</p><p>Here,<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_o(p, \omega_o)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: Outgoing Radiance at point p in direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. This is what is observed by the camera or the eye.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_e(p, \omega_o)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: Emitted Radiance at point p in direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. This term is nonzero only for surfaces that emit light, such as light sources.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∫</mo><msup><mi mathvariant="normal">Ω</mi><mo>+</mo></msup></msub></mrow><annotation encoding="application/x-tex">\int_{\Omega^+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.136em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">Ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7027em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span></span></span></span>: Integration over the hemisphere of incoming directions <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="normal">Ω</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">\Omega^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7713em;"></span><span class="mord"><span class="mord">Ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span>. The hemisphere corresponds to all directions <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> above the surface.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_i(p, \omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: Incoming Radiance at point p from direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. This light may come from other surfaces or light sources.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>−</mo><mo>&gt;</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(p, \omega_i -&gt; \omega_o)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: BRDF, describing how light is reflected from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">\omega_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n \cdot \omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: Geometric Term, which accounts for the angle between the surface normal n and the incoming direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. It represents how much of the incoming light contributes to the surface irradiance.</p><h3 id="understanding">Understanding</h3><p><img src="rendering_eq_integral.png" alt="rendering_eq_integral" title="integral form"><br><img src="rendering_eq_linearop.png" alt="rendering_eq_linearop" title="Linear Operator Equation"><br><img src="rendering_eq_solL.png" alt="rendering_eq_solL" title="Solve for L"><br>Introduce global illumination (全局光照).<br><img src="rendering_eq_multiillum.png" alt="rendering_eq_multiillum" title="Understand multiple illuminations"><br><img src="rendering_eq_shadingraster.png" alt="rendering_eq_shadingraster" title="Shading in rasterization"></p><h1 id="probability-review">Probability Review</h1><h2 id="random-variables">Random Variables</h2><p>X: random variable. Represents a distribution of potential values.<br>X ~ p(X): probability density function (PDF). Describes relative probability of a random process choosing value.</p><p>A function Y of a random variable X is also a randomvariable:<br>X ~ p(x)<br>Y = f(X)<br>Expected value of a function of a random variable:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">[</mo><mi>Y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mo>∫</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">E[Y] = E[f(X)] = \int f(x)p(x)dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></p><h2 id="expected-value-of-random-variables">Expected Value of Random Variables</h2><p>The average value that one obtains if repeatedly drawing samples from the random distribution.<br>X drawn from distribution with:<br>n discrete values xi<br>with probabilities pi<br>Expected value of X: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo>∑</mo><msub><mi>x</mi><mi>i</mi></msub><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">E(X) = \sum x_ip_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="pdf">PDF</h2><p><img src="PDF.png" alt="PDF"></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L13-Ray Tracing 1 + L14-Ray Tracing 2 (Whitted-Style ray tracing)</title>
    <link href="/2025/01/12/GAMES101-L13-RayTracing1/"/>
    <url>/2025/01/12/GAMES101-L13-RayTracing1/</url>
    
    <content type="html"><![CDATA[<h1 id="why-ray-tracing">Why Ray Tracing</h1><p>Rasterization couldn’t handle global effects well</p><ul><li>(Soft) shadows</li><li>Especially when the light bounces more than once</li><li>Rasterization is fast, but quality is relatively low</li><li>Ray tracing is accurate, but is very slow.<ul><li>Rasterization: real-time, ray tracing: offline</li><li>~10K CPU core hours to render one frame in production</li></ul></li></ul><h1 id="light-ray">Light Ray</h1><ol><li>Light travels in straight lines (though this is wrong)</li><li>Light rays do not “collide” with each other if they cross(though this is still wrong)</li><li>Light rays travel from the light sources to the eye (but the physics is invariant under path reversal -reciprocity).</li></ol><h1 id="ray-casting">Ray Casting</h1><ol><li>Generate an image by casting one ray per pixel</li><li>Check for shadows by sending a ray to the light<br>In the figure below, first generate eye ray, and then shading pixels.<br><img src="pinhole.png" alt="pinhole" title="pinhole model"></li></ol><h2 id="recursive-ray-tracing">Recursive Ray Tracing</h2><p>Adding up each ray’s shading result in the corresponding pixel (assume perfect reflection).<br><img src="recursive_raytracing.png" alt="recursive ray tracing" title="recursive ray tracing"></p><h2 id="ray-surface-intersection">Ray-Surface Intersection</h2><p><img src="RayEquation.png" alt="ray equation" title="ray equation"><br>The objective is to calculate the t when the ray reach the surface.<br><img src="ray_inter_sphere.png" alt="ray intersect sphere" title="ray intersect sphere"><br><img src="ray_inter_sphere1.png" alt="ray intersect sphere" title="ray intersect sphere"><br>And similarly we can calculate the t for intersection with a general implicit surface.<br>Ray: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mo>+</mo><mi>t</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">r(t) = o + td</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mo>=</mo><mi>t</mi><mo>&lt;</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">0 &lt;= t &lt; \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6542em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span><br>General implicit surface p: f(p) = 0<br>Substitute ray equation: f(o+td) = 0<br>Solve for real, positive roots</p><p><strong>Ray Intersection with Explicit Surface</strong><br>PS: Ray method to check if a point is inside/outside a close shape/object (works in both 2d and 3d)</p><ul><li>if the number of intersections is odd, the point must be inside.</li><li>if the number of intersection is even, the point must be outside.</li></ul><p>Triangle is in a plane, so the problem can be converted to ray intersection with a plane, and then check if the intersection point is within the triangle.</p><p>We can define a plane with a normal vector and a point passing the plane, and write it as an equation: ax + by + cz + d = 0.<br><img src="plane_eq.png" alt="plane equation" title="plane equation"><br>And so we can calculate the ray’s intersection with plane, and then check if the intersection is within the triangle.</p><p>We also have a faster method to compute the ray’s intersection with a triangle directly, which is called the Möller Trumbore Algorithm. Here we use barycentric coordinate to represent the point in the plane. As long as all barycentric coordinates are positive, we assure that the point is inside the triangle.<br><img src="MT_Algo.png" alt="MT" title="MT"></p><h2 id="performance-challenge">Performance Challenge</h2><p>Simple ray-scene intersection exhaustively tests ray-intersection with every object to find the closest hit (with minimum t), which can be very slow.<br>Naive algorithm = #pixels x #objects (x #bounces)</p><h2 id="accelerate-ray-tracing">Accelerate Ray Tracing</h2><p>What if we have a complex scene with a lot of triangles? Accelerating ray tracing is important.</p><h3 id="bounding-volume">Bounding Volume</h3><ul><li>Quick way to avoid intersections: bound complex object with a simple volume</li><li>Object is fully contained in the volume, so if it doesn’t hit the volume, it doesn’t hit the object</li><li>Test Bounding volume first, then test object if it hits</li></ul><p>Understanding: box is the intersection of 3 pairs of slabs (3 组相对的平面围成一个 box)<br>Specifically:<br>We often use an Axis-AlignedBounding Box (AABB)(轴对齐包围盒)<br>i.e. any side of the BB is along either x, y, or zaxis</p><p><strong>Why use AABB?</strong><br>In this case when calculating the t parameter of a ray we avoid dot product with the normal vector of the plane (we can find an axis perpendicular to the plane directly), so that improve computation efficiency. Here, a ray is represented as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>o</mi><mo>+</mo><mi>t</mi><mo>⋅</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">r(t) = o + t \cdot d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>.<br><img src="aabb.png" alt="AABB" title="why aabb"></p><h4 id="ray-intersection-with-aabb">Ray Intersection with AABB</h4><p><img src="ray_intersect_aabb.png" alt="Ray Intersection with AABB" title="Ray Intersection with AABB"></p><p>Recall: a box (3D)= three pairs of infinitely large slabs<br>Key ideas</p><ul><li>The ray enters the box only when it enters all pairs of slabs</li><li>The ray exits the box as long as it exits any pair of slabs</li><li>For each pair, calculate the tmin and tmax (negative is fine)</li><li>For the 3D box, t_enter= max{tmin}, t_exit = min{tmax}</li><li>If t_enter &lt; t_exit, we know the ray stays a while in the box (so they must intersect!)</li></ul><p>However, ray is not a line, it’s single directed. And so we should check whether t is negative for physical correctness.</p><ul><li>If t_exit &lt; 0?<ul><li>The box is “behind&quot; the ray - no intersection!</li></ul></li><li>If t_exit &gt;= 0 and t_enter &lt; 0?<ul><li>The ray’s origin is inside the box - have intersection!</li></ul></li></ul><p>In summary, ray and AABB intersect iff (当且仅当)<br>t_enter &lt; t_exit &amp;&amp; texit &gt;= 0</p><h3 id="uniform-spatial-partitions-grids">Uniform Spatial Partitions (Grids)</h3><h4 id="steps">Steps</h4><ol><li>Preprocess - build acceleration grids</li></ol><ul><li>Find bounding box</li><li>Create grids in the box</li><li>Store each object in overlapping cells</li></ul><ol start="2"><li>Ray - Scene Intersection<br>Step through grid in ray traversal order. Not traversing all grids one by one, instead we can traverse the grid like the method we use to draw a line.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">For each grid cell<br>    Test intersection <span class="hljs-keyword">with</span> <span class="hljs-built_in">all</span> objects stored at that cell <span class="hljs-comment"># if the cell doesn&#x27;t contain objects, skip it</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="effect">Effect</h4><p>Grid Resolution?</p><ul><li>One grid: No speedup.</li><li>Too many cells: Inefficiency due to extraneous grid traversal.</li><li>Heuristic results: <span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 1: #̲cells = Constan…">#cells = Constant * #objs</span>, C is aproximately equivalent to 27 in 3D</li></ul><h4 id="reflection">Reflection</h4><p>When uniform grids succeed?<br>Grids work well on large collections of objects that are distributed evenly in size and space.<br>Otherwise (“Teapot in a stadium” problem), grids fail.</p><h3 id="spatial-partitions">Spatial Partitions</h3><h4 id="examples">Examples</h4><ul><li>Oct-Tree 八叉树</li><li>KD-Tree</li><li>BSP-Tree</li></ul><h4 id="kd-tree">KD-Tree</h4><p>Given a complex scene, we construct a KD-Tree first then perform ray intersection.</p><p><strong>Data Structure</strong></p><p><img src="KTTree.png" alt="KT" title="KD"></p><ul><li>Internal nodes store<ul><li>split axis: x-, y-, or z-axis</li><li>split position: coordinate of split plane along axis</li><li>children: pointers to child nodes</li></ul></li><li>No objects are stored in internal nodes</li><li>Leaf nodes store<ul><li>list of objects</li></ul></li></ul><p>After constructing the KD-tree, we traverse the KD-Tree. If a cell is passed by the ray and is a leaf node, test intersection with all objects within it.</p><p><strong>KD-Tree Reflection</strong></p><ul><li>Given a bbox, it’s hard to check if a triangle intersects with the bbox.</li><li>Redundant storage of objects in multiple leaf nodes if an object overlaps several cells.</li></ul><h3 id="object-partitions-amp-bounding-volume-hierarchy-bvh">Object Partitions &amp; Bounding Volume Hierarchy (BVH)</h3><p>To solve the problems in KT-Tree, we use BVH.</p><h4 id="building-bvh">Building BVH</h4><ul><li>Find bounding box</li><li>Recursively split set of objects in two subsets</li><li>Recompute the bounding box of the subsets</li><li>Stop when necessary</li><li>Store objects in each leafnode<br><img src="BVH.png" alt="BVH" title="BVH"></li></ul><h4 id="building-bvh-strategies">Building BVH - Strategies</h4><ul><li><p>How to subdivide a node?</p><ul><li>Choose a dimension to split<br>Heuristic #1: Always choose the longest axis in node<br>Heuristic #2: Split node at location of median object (given n elements we can find the ith largest elements in O(n) with quick select algorithm)</li></ul></li><li><p>Termination criteria?</p><ul><li>Heuristic: stop when node contains few elements</li></ul></li></ul><p>PS: QuickSelect Algorithm Steps:</p><ol><li>Choose a Pivot:</li></ol><ul><li>Select a random pivot element from the array (or use strategies like picking the last element).</li></ul><ol start="2"><li>Partition the Array:</li></ol><ul><li>Rearrange the array such that all elements less than the pivot are on the left, and all elements greater than the pivot are on the right.</li><li>Track the position p of the pivot after partitioning.</li></ul><ol start="3"><li>Recursive Search:</li></ol><ul><li>If p is equal to i (zero-based index for the i-th largest element), the pivot is the answer.</li><li>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">i&lt;p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>, recurse into the left subarray (elements smaller than the pivot) 递归进入左子列.</li><li>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>&gt;</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">i&gt;p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>, recurse into the right subarray (elements larger than the pivot, adjusting i accordingly).</li></ul><ol start="4"><li>Base Case:</li></ol><ul><li>If the array has only one element, return it as the result.</li></ul><h4 id="data-structure">Data Structure</h4><p>Internal nodes store:</p><ul><li>Bounding box</li><li>Children: pointers to child nodes</li></ul><p>Leaf nodes store</p><ul><li>Bounding box</li><li>List of objects</li></ul><p>Nodes represent subset of primitives in scene</p><ul><li>All objects in subtree</li></ul><h4 id="pseudo-code">Pseudo Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">Intersect</span>(Ray ray，BVH node)&#123;<br>  <span class="hljs-keyword">if</span>(ray misses node.bbox)<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span>(node is a leaf node)&#123;<br>    test intersection with all objs;<br>    <span class="hljs-keyword">return</span> closest intersection;<br>  &#125;<br>  hit1 = <span class="hljs-built_in">Intersect</span>(ray,node.child1);<br>  hit2 = <span class="hljs-built_in">Intersect</span>(ray,node.child2);<br>  <span class="hljs-keyword">return</span> the closer of hitl,hit2;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="strengths">Strengths</h4><ol><li>It assures that each triangle will only be stored in one bbox.</li><li>BBoxes are computed based on triangles, so triangles are completely contained within the bboxes. That is to say, there’s no need to concern calculate intersections between triangles and bboxes.</li><li>KD-Trees are static structures, meaning that rebuilding or updating them for dynamic scenes (scenes with moving objects) is computationally expensive. In modern ray tracing applications like real-time rendering in games, dynamic or animated scenes are common. Alternatives like Bounding Volume Hierarchies (BVH) are more flexible and efficient because they allow incremental updates and refitting without rebuilding the entire structure.</li><li>KD-Trees do not handle coherent rays (like those generated by primary rays or shadow rays in ray tracing) as efficiently as BVH. This is because KD-Trees subdivide space rigidly, which can result in more traversal steps for coherent rays. BVH, with its bounding volumes, can encapsulate large regions of space, allowing coherent rays to skip traversal of unnecessary regions more effectively.</li></ol><p>BVH is now the de-facto standard in ray tracing because it is more flexible and efficient for ray traversal, especially for scenes with complex geometries or animations.</p><h4 id="spatial-vs-object-partition">Spatial vs. Object Partition</h4><p><strong>Spatial partition</strong> (e.g.KD-tree)</p><ul><li>Partition space into non-overlapping regions</li><li>An object can be containedin multiple regions</li></ul><p><strong>Object partition</strong> (e.g. BVH)</p><ul><li>Partition set of objects into disjoint subsets</li><li>Bounding boxes for each set may overlap in space</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L10-Geometry 1 + L11-Geometry 2 + L12-Geometry 3 (implicit/explicit geometry + shadow mapping)</title>
    <link href="/2025/01/10/GAMES101-L10-Geometry1/"/>
    <url>/2025/01/10/GAMES101-L10-Geometry1/</url>
    
    <content type="html"><![CDATA[<h1 id="implicit-representation-of-geometry">Implicit representation of geometry</h1><p>Based on classifying points. Describe geometry with relationships or conditions without providing the exact set of points.<br>Points satisfy some specified relationship.<br>E.g. sphere: all points in 3D, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><msup><mi>z</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^2 + y^2 + z^2 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span><br>More generally, f(x,y,z) = 0</p><ul><li>Sampling can be hard</li><li>Inside / outside can be easy</li></ul><h2 id="more-implicit-representations">More implicit representations</h2><ol><li>Algebraic Surfaces<br>Surface is zero set of a polynomial in x, y, z.</li><li>Constructive Solid Geometry (构造实体几何)<br><img src="CSG.png" alt="CSG" title="CSG"></li><li>Distance function<br>Instead of Booleans, gradually blend surfaces together using distance functions (giving minimum distance (could be signed distance -&gt; SDF) from anywhere to object). To restore the original geometry, just figure out the positions where SDF == 0.</li><li>Level Set (水平集) Methods<br><img src="levelset.png" alt="levelset" title="levelset"><br>(think of contour lines 等高线)</li><li>Fractals (分型)<ul><li>Exhibit self-similarity, detail at all scales (recursively)</li><li>“Language” for describing natural phenomena</li><li>Hard to control shape!</li></ul></li></ol><h2 id="pros">Pros:</h2><ul><li>compact description (e.g., a function) saves memory</li><li>certain queries easy (inside object, distance to surface)</li><li>good for ray-to-surface intersection</li><li>for simple shapes, exact description / no sampling error</li><li>easy to handle changes in topology (e.g., fluid)</li></ul><h1 id="explicit-representation-of-geometry">Explicit representation of geometry</h1><p>All points are given directly or via parameter mapping (generally, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi>R</mi><mn>2</mn></msup><mo>→</mo><msup><mi>R</mi><mn>3</mn></msup><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>→</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f : R^2 → R^3; (u, v)→(x, y, z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>)</p><ul><li>Sampling is easy (just plug in (u, v) to get the point (x, y, z))</li><li>Inside / outside can be hard</li></ul><h2 id="more-explicit-representations">More explicit representations</h2><ol><li>Polygon meshes<ul><li>Store vertices &amp; polygons (often triangles or quads)</li><li>Easier to do processing / simulation, adaptive sampling</li><li>More complicated data structures</li><li>Perhaps most common representation in graphics</li><li>The Wavefront Object File (.obj) Format<ul><li>Commonly used in Graphics research</li><li>Just a text file that specifies vertices, normals, texture coordinates and their connectivities</li></ul></li></ul></li><li>Bezier surfaces</li><li>subdivision surfaces</li><li>NURBS</li><li>point clouds<ul><li>Easiest representation: list of points (x,y,z)</li><li>Easily represent any kind of geometry</li><li>Useful for LARGE datasets (&gt;&gt;1 point/pixel)</li><li>Often converted into polygon mesh</li><li>Difficult to draw in undersampled regions</li></ul></li></ol><h2 id="bezier-curves">Bezier Curves</h2><p>The curve must start at (pass) p0 and end at (pass) p3. The tangent line at p0 passes p1 (the first control point) and the tagent line at p3 passes p2 (the second control point).</p><h3 id="de-casteljau-algorithm">de Casteljau Algorithm</h3><p>Consider given three points to draw a quadratic Bezier (二次贝塞尔). The key is to determine the point the curve passes at each moment t in [0, 1] to form the curve.</p><p>First, insert two points in each edge using linear interpolation.<br><img src="bz1.png" alt="bz" title="1"><br>Repeat recursively.<br><img src="bz2.png" alt="bz" title="2"><br>Run the same algorithm for every t in [0, 1].<br><img src="bz3.png" alt="bz" title="3"></p><p>Similarly, given four points to draw a Bezier curve. Each time we decrease the number of edges and points we considered, until there’s only two points and one edge on which we can determine a point at t.<br><img src="bz4.png" alt="bz" title="4"></p><h3 id="algebraic-formula">Algebraic Formula</h3><p>Note: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>b</mi><mn>0</mn></msub><mo>+</mo><mi>t</mi><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo>−</mo><msub><mi>b</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mo>&gt;</mo><msub><mi>b</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>t</mi><mo stretchy="false">)</mo><msub><mi>b</mi><mn>0</mn></msub><mo>+</mo><mi>t</mi><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_0(t) = b_0 + t(b_1-b_0) =&gt; b_0(t) = (1-t)b_0 + tb_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br><img src="bz_alge1.png" alt="ba-a" title="eg"><br>In general, it’s like binomial distribution. This equation also works for 3d points.<br><img src="bz_alge2.png" alt="ba-a" title="general equations"></p><p>Think of Binomial Probability Mass Function (PMF)<br>The probability of getting exactly k successes in n trials is given by the formula:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>=</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>n</mi><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding="application/x-tex">P(X=k) = \binom{n}{k}p^k(1-p)^{n-k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7454em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></p><p>Where:<br>P(X=k): Probability of k successes in n trials.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>n</mi><mi>k</mi></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mi>n</mi><mo stretchy="false">!</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">!</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\binom{n}{k} = n!/(k!(n-k)!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7454em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">!</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)!)</span></span></span></span>: Binomial coefficient, representing the number of ways to choose k successes from n trials.<br>p: Probability of success.<br>1−p: Probability of failure.</p><p><img src="bz_alge3.png" alt="ba-a" title="Bernstein Polynomials"></p><h3 id="properties">Properties</h3><ul><li>Interpolates endpoints<ul><li>For cubic Bézier: b(0) = b_0; b(1) = b_3</li></ul></li><li>Tangent to end segments<ul><li>Cubic case: b’(0) = 3(b_1-b_0); b’(1) = 3(b_3-b_2)</li></ul></li><li>Affine transformation property<ul><li>Transform curve by transforming control points</li><li>However, for projection (3d-&gt;2d) it’s not invariant.</li></ul></li><li>Convex hull property<ul><li>Curve is within convex hull of control points</li></ul></li></ul><h3 id="piecewise-bezier-curves">Piecewise Bezier Curves</h3><p>Instead use multiple points to create high-order Bezier curves directly, we chain many low-order Bezier curves. Piecewise cubic Bezier (given four points) curves is most common.</p><p>PS: C0 and C1 continuity.<br>PPS: To review splines, see CS7496 Computer Animation GT.</p><h2 id="bezier-surface">Bezier Surface</h2><p><img src="bsurf.png" alt="bs" title="Bezier surface"></p><p><img src="bsurf1.png" alt="bs" title="Bezier surface"></p><h2 id="mesh-operations">Mesh Operations</h2><ol><li>Mesh subdivision (upsampling)<ul><li>increase resolution</li></ul></li><li>Mesh simplification (downsampling)<ul><li>decrease resolution</li><li>try to preserve shape / appearance</li></ul></li><li>Mesh regularization<ul><li>modify sample distribution to improve quality</li></ul></li></ol><h3 id="subdivision">Subdivision</h3><p>Common subdivision rule for triangle meshes.</p><ul><li>First, create more triangles (vertices)</li><li>Second, tune their positions</li></ul><h4 id="loop-subdivision-loop-is-the-name-of-the-author">Loop subdivision (Loop is the name of the author)</h4><p>It is based on the idea of recursively refining the mesh by splitting each triangle into smaller triangles and adjusting the positions of the vertices to produce a smoother surface.</p><p><strong>Steps in Loop Subdivision:</strong></p><ol><li>Split Each Edge (Edge Split):<br>For each edge in the mesh, a new vertex (called a “child vertex”) is added at the midpoint of the edge.<br>This step effectively splits each triangle into four smaller triangles.</li><li>Create New Faces:<br>After splitting the edges, each triangle is divided into four smaller triangles.<br>The process connects the new midpoints with the old vertices to form the new faces.</li><li>Adjust Vertex Positions:<br>Old (Parent) Vertices:<br>Existing vertices are repositioned to improve smoothness. Their new positions are computed as a weighted average of their neighboring vertices.<br>New (Child) Vertices:<br>The new vertices added at the edge midpoints are also repositioned. Their positions are computed as a weighted average of the two endpoints of the edge and the neighboring vertices of those endpoints.</li></ol><h4 id="catmull-clark-subdivision">Catmull-Clark subdivision</h4><p>This is for <strong>general meshes</strong> - what if the meshes are not triangles?<br><img src="catmull_clark.png" alt="catmull_clark" title="catmull_clark"></p><p>Assume that we have n non-quad faces (非四边形面) and m extrodinary points. See the figure below, after the first division, there are m+n extrodinary points and 0 non-quad faces. This is to say, the first catmull-clark subdivision clear all non-quad faces and increase extrodinary points accordingly. Then in the folloing subdivisions, the number of non-quad faces won’t increase.<br><img src="catmull_clark1.png" alt="catmull_clark" title="catmull_clark first subdivision"></p><p>Catmull-Clark update rule.<br><img src="catmull_clark2.png" alt="catmull_clark" title="catmull_clark update rule"></p><h3 id="simplification">Simplification</h3><h4 id="edge-collapse-边坍缩">edge collapse （边坍缩）</h4><p>Key idea:<br>Find the optimal position of the new vertex so that the the quadric error is minimized.<br><img src="edge_collapse.png" alt="edge collapse" title="edge collapse"></p><p>Iteratively collapse edges.<br>Which edges? Assign score with quadric error metric*</p><ul><li>approximate distance to surface as sum of distances to planes containing triangles</li><li>iteratively collapse edge with smallest score (use heap / priority queue, collapse an edge and update the affected edges accordingly)</li><li>greedy algorithm… great results!<br>(Garland &amp; Heckbert 1997)</li></ul><h1 id="shadow-mapping">Shadow Mapping</h1><h2 id="basics">Basics</h2><ul><li>An lmage-space Algorithm</li><li>No knowledge of scene’s geometry during shadow computation</li><li>Must deal with aliasing artifacts</li><li>Key idea: the points NOT in shadow must be seen both by the light and by the camera</li></ul><h2 id="steps">Steps</h2><ol><li>Render from light source</li></ol><ul><li>Record a depth image of the scene from the light source (look at the scene from the light source)</li></ul><ol start="2"><li>Render from eye</li></ol><ul><li>record a standard image (with depth) from eye</li></ul><ol start="3"><li>Project to light</li></ol><ul><li><strong>Project visible points in eye view back to light source</strong></li><li>After reprojected, if the corresponding depths in the depth image recorded at the light source is the same as the depth recorded at eye, the point is visible.</li><li>After reprojected, if depths from light and eye are not the same. This point is blocked.</li></ul><h2 id="problems-with-shadow-maps">Problems with shadow maps</h2><ul><li>Hard shadows (point lights only)<br><img src="softshadow.png" alt="hsshadow" title="hard shadow vs. soft shadow"><br>As shown in the figurer, only when the light source has volumn can we get soft shadows.</li><li>Quality depends on shadow map resolution(general problem with image-based techniques)</li><li>Involves equality comparison of floating point depthvalues means issues of scale, bias, tolerance</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L07-Shading 1 + L08-Shading 2 + L09-Shading 3 (illumination, shading 着色, graphics pipeline, and texture mapping)</title>
    <link href="/2025/01/07/GAMES101-L07-Shading1/"/>
    <url>/2025/01/07/GAMES101-L07-Shading1/</url>
    
    <content type="html"><![CDATA[<h1 id="shading-the-process-of-applying-a-material-to-an-object">Shading - the process of applying a material to an object</h1><h2 id="a-simple-shading-model-blinn-phong-reflectance-model">A Simple Shading Model (Blinn-Phong Reflectance Model)</h2><h3 id="shading-is-local">Shading is local</h3><p>Compute light reflected toward camera at a spacific shading point.</p><p>Inputs:</p><ul><li>Viewer direction, v</li><li>Surface normal, n</li><li>Light direction, l (for each of many lights)</li><li>Surface parameters(color, shininess, …)</li></ul><p>Note:</p><ul><li>v, n, l are all unit vectors.</li><li>shading != shadow. No shadow will be generated.</li></ul><h3 id="diffuse-reflection">Diffuse Reflection</h3><ul><li>Light is scattered uniformly in all directions</li><li>Surface color is the same for all viewing directions</li></ul><p>The amount of light (energy) a shading point gets depends on:</p><ul><li>The angle between l and n.<br><img src="diffusion_reflection.png" alt="Diffusion Reflection" title="Lambert's cosin law"></li><li>Distance from point source of light.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mi>π</mi><mi>I</mi><mo>=</mo><mn>4</mn><mi>π</mi><msup><mi>r</mi><mn>2</mn></msup><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">4 \pi I = 4 \pi r^2 I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> (the law of conservation of energy)<br><img src="diffusion_reflection2.png" alt="Diffusion Reflection" title="Energy decreases as distance increases"></li></ul><p>So, the equation for diffusion reflection should be as:<br><img src="diffusion_reflection3.png" alt="Diffusion Reflection" title="Lambertian (diffuse) shading"><br>If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">k_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 1, all energy will be reflected. If <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">k_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0, all energy will be absorbed (no evergy reflected, black).</p><h3 id="specular-term-高光项">Specular term (高光项)</h3><ul><li>Intensity depends on view direction.</li><li>Bright near mirror reflection direction.<br>If the view direction is close to the mirror reflection direction, we get the specular term.</li></ul><p>Here, the Blinn-Phong convert “V close to mirror direction” to “half vector near normal” for calculation convenience. That is to say, to check if we can see the specular term, we just need to measure how “near” unit vectors are by dot product.<br><img src="specular_term.png" alt="Specular term" title="Specular term"><br>Use exponent p because specular can be seen only when the unit vectors are close enough (p can be 100 - 200 in practice).<br><img src="specular_term2.png" alt="Specular term" title="Cosin power plot"></p><h3 id="ambient-term-环境光">Ambient term (环境光)</h3><ul><li>Shading that does not depend on anything</li><li>Add constant color to account for disregarded illumination and fill in black shadows</li><li>This is approximate / fake!<br><img src="ambient_term.png" alt="Ambient term" title="Ambient term"></li></ul><h3 id="summary">Summary</h3><p>L (Blinn-Phong reflection) = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>a</mi></msub><mo>+</mo><msub><mi>L</mi><mi>s</mi></msub><mo>+</mo><msub><mi>L</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">L_a + L_s + L_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="shading-frequencies">Shading Frequencies</h2><ol><li>Flat shading</li></ol><ul><li><strong>Triangle</strong> face is flat, so one normal vector</li><li>Not good for smooth surfaces</li></ul><ol start="2"><li>Gouraud shading</li></ol><ul><li>Interpolate colors from <strong>vertices</strong> (三角形顶点) across triangle</li><li>Each vertex has anormal vector</li></ul><ol start="3"><li>Phong shading</li></ol><ul><li>Interpolate normal vectors across each triangle</li><li>Compute full shading model at each <strong>pixel</strong></li><li>Not the Blinn-Phong Reflectance Model</li></ul><p>In fact, although usually Phong shading provides better shading effect, it not always works. The shading effect is also affected by the number of faces. If there are more smaller faces, flat shading can also provide good effect (see below).<br><img src="shading_frequency.png" alt="Shading frequency" title="Shading frequency"></p><p><strong>Methods</strong></p><ol><li>How to define / calculate per-vertex normal vector?</li></ol><ul><li>Best to get vertex normals fromthe underlying geometry, e.g. consider a sphere</li><li>Otherwise have to infer vertex normals from triangle faces<br>Simple scheme: average surrounding face normals <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>v</mi></msub><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>N</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>N</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">N_v = \sum_iN_i / ||\sum_iN_i||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.162em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/∣∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.162em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣∣</span></span></span></span><br>Improved scheme: weighted average surround face normals considering face areas</li></ul><ol start="2"><li>How to define / calculate per-pixel normal vector?</li></ol><ul><li>Barycentric interpolation (introducing soon) of vertex normals</li><li>Normalize the interpolated directions</li></ul><h1 id="graphics-real-time-rendering-pipeline">Graphics (Real-time Rendering) Pipeline</h1><p><img src="GP1.png" alt="Graphics Pipeline" title="Graphics Pipeline"></p><h2 id="shader-program-着色器">Shader program (着色器)</h2><ul><li>Program vertex and fragment processing stages.</li><li>Describe operation on a single vertex (or fragment).</li><li>Shader function executesonce per fragment.</li><li>Outputs color of surfaceat the current fragment’s screen sample position.</li></ul><h2 id="gpus-graphics-pipeline-implementation">GPUs - Graphics Pipeline Implementation</h2><p>Specialized processors for executing graphics pipeline computations.</p><h1 id="texture-mapping">Texture Mapping</h1><p>(think of in map progection in GIS)<br>Each triangle vertex is assigned a texture coordinate (u, v).<br><img src="tt_mapping.png" alt="tt_mapping" title="uv coordinates"><br>u and v are always ranged in [0, 1]</p><p>Texture can be used multiple times, so designing tilable texture is important.</p><h2 id="interpolation-across-triangles-barycentric-coordinates-重心坐标">Interpolation Across Triangles: Barycentric Coordinates (重心坐标)</h2><ul><li>Why do we want to interpolate?<ul><li>Specify values at vertices</li><li>Obtain smoothly varying values across triangles</li></ul></li><li>What do we want to interpolate?<ul><li>Texture coordinates, colors, normal vectors, …(any attribute)</li></ul></li></ul><h3 id="barycentric-coordinates">Barycentric Coordinates</h3><p><strong>Definition</strong><br>It defines a coordinate system to locate points with triangle vertices. If all coordinates are positive, the point must be inside the triangle.<br><img src="BarycentricCoordinates.png" alt="BC" title="Barycentric Coordinates"><br>And so, intuitively we can get the representations of each vertex.<br><img src="BarycentricCoordinates1.png" alt="BC" title="Barycentric Coordinates"></p><p><strong>Calculation</strong><br>Each coordinate can be calculated based on the area of the triangle corresponding to each vertex.<br><img src="BarycentricCoordinates2.png" alt="BC" title="Proportional to area"><br>And then if the three inside triangles’ areas are equivalent, we get the centroid of the triangle, where the coordinate is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1/3, 1/3, 1/3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1/3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1/3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1/3</span><span class="mclose">)</span></span></span></span>.<br><img src="BarycentricCoordinates3.png" alt="BC" title="Centroid"><br>Also, we can calculate the barycentric coordinate for any point. No need to remember the equation.<br><img src="BarycentricCoordinates4.png" alt="BC" title="Calculation"></p><p><strong>Interpolation</strong><br>Finally, interpolate any attribute based on barycentric coordinates.<br><img src="BarycentricCoordinates5.png" alt="BC" title="Interpolation"><br>Note: Barycentric coordinates are not invariant under projection, so if we need to perform interpolation for 3d objects attributes, we should use 3d coordinates of the triangle vertices. For example, when interpolating z values, since the triangles have been projected onto 2d screen, we need to perform an inverse transform to get the 3d coordinates again and do the calculation.</p><h2 id="applying-texture">Applying Texture</h2><h3 id="simpie-texture-mapping-diffuse-color">Simpie Texture Mapping: Diffuse Color</h3><p>Usually a pixel’s center</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> each rasterized screen sample (x,y):<br>  (u,v) = evaluate texture coordinate at (x,y) <span class="hljs-comment"># Usually a pixel&#x27;s center</span><br>  texcolor = texture.sample(u,v) <span class="hljs-comment"># Using barycentric coordinates</span><br>  <span class="hljs-comment"># set sample&#x27;s color to texcolor</span><br>  <span class="hljs-comment"># Here the texcolor usually refers the diffuse albedo Kd(recall the Blinn-Phong reflectance model)</span><br></code></pre></td></tr></table></figure><h3 id="texture-magnification">Texture Magnification</h3><p><strong>What if the texture is too small?</strong></p><p>Texture magnification occurs when a texture image is stretched over a surface, and the texture’s resolution is smaller than the resolution of the rendered object. This means there are fewer texels (texture pixels) in the texture than screen pixels in the rendered object. As a result, the rendering process must decide how to fill in the extra pixel information for the surface.</p><p><strong>Key Problems in Texture Magnification</strong></p><ol><li><p>Pixel-Texel Mapping:<br>When the screen space is sampled, each pixel may correspond to a fractional texel or may span multiple texels.<br>Since texels are discrete, this results in gaps or blocky artifacts.</p></li><li><p>Artifacts:<br>Pixelation: The texture can appear blocky if texels are simply enlarged to fill multiple screen pixels (nearest-neighbor interpolation).<br>Blurriness: Using linear filtering may smooth the texture too much, losing detail.</p></li></ol><p><strong>Solutions</strong></p><ol><li><p>Bilinear Filtering</p><ul><li>Description:<ul><li>Interpolates between the colors of the four nearest texels to compute a smooth color.</li></ul></li><li>Advantages:<ul><li>Reduces blockiness and provides smoother results.</li></ul></li><li>Disadvantages: - Blurs the texture, especially when magnified a lot.</li></ul></li></ol><p><img src="BilinearInterpolation.png" alt="BilinearInterpolation" title="Bilinear Interpolation"><br><img src="BilinearInterpolation1.png" alt="BilinearInterpolation" title="Bilinear Interpolation"><br><img src="BilinearInterpolation2.png" alt="BilinearInterpolation" title="Bilinear Interpolation"></p><ol start="2"><li>Bicubic Filtering<ul><li>Description:<ul><li>Uses more neighboring texels (16 or more) and applies cubic interpolation for smoother transitions.</li></ul></li><li>Advantages:<ul><li>Produces high-quality results with less blurriness.</li></ul></li><li>Disadvantages:<ul><li>More computationally expensive.</li></ul></li></ul></li></ol><h3 id="texture-minification">Texture Minification</h3><p><strong>What if the texture is too large?</strong></p><p>When the texture is too large (i.e., the resolution of the texture is much higher than the resolution of the rendered object on the screen), the graphics pipeline must handle texture minification, where multiple texels map to a single screen pixel.</p><p><strong>Problems with Large Textures</strong></p><ol><li><p>Information Loss:<br>Many texels contribute to the color of a single screen pixel, leading to a loss of detail.<br>Without proper filtering, this can result in <strong>aliasing artifacts</strong>, such as shimmering or moiré patterns, especially when the camera moves or rotates.</p></li><li><p>Memory and Performance:<br>High-resolution textures require significant memory and processing power.<br>Sampling and filtering large textures for every pixel can be computationally expensive.</p></li></ol><p><strong>Solution</strong></p><ol><li><p>Mipmapping (allows fast, approximate, <strong>square</strong> range queries)</p><ul><li><p>Description:</p><ul><li>Mipmaps are <strong>precomputed</strong>, downscaled versions of the original texture, stored in a chain.<br>For example, if the original texture is 1024×1024, mipmaps will include textures of size 512×512, 256×256, 128×128, and so on, down to 1×1.<br>During rendering, the GPU selects the appropriate mipmap level based on the distance or size of the object on screen.<br><img src="mipmap.png" alt="mipmap" title="mipmap"></li></ul></li><li><p>Advantages:</p><ul><li>Reduces aliasing by using appropriately sized textures for minification.<br>Improves performance by avoiding sampling from unnecessarily high-resolution textures.</li></ul></li><li><p>Disadvantages:</p><ul><li>Requires additional memory to store mipmaps (about 33% extra because every next level’s required memory is 1/4 of the last level).<br><img src="mipmap1.png" alt="mipmap" title="mipmap storage overhead"></li></ul></li><li><p>Gradient Calculation for Level Selection:<br>In the left part of the figure below, the texture space (u, v) is mapped to the screen space (x, y) using derivatives like du/dx, du/dy, etc. Here, du/dx, du/dy, dv/dx, and dv/dy are partial derivatives that represent the rate of change of the texture coordinates (u, v) with respect to screen space coordinates (x, y). For example, du/dx is the rate at which the u-coordinate (horizontal texture coordinate) changes as you move horizontally (x) in the screen space. Large derivatives (e.g., ∣du/dx∣ or ∣dv/dy∣) mean many texels map to one screen pixel, indicating minification.<br>The Lod (Level of Detail) value D is determined based on the maximum gradient L. L represents how many texels (texture pixels) map to a single screen pixel. A higher L means significant minification, so lower-resolution mipmaps are used to approximate the texture. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>L</mi></mrow><annotation encoding="application/x-tex">D = log_2L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">L</span></span></span></span>: Determines which mipmap level to use for sampling.<br><img src="mipmap2.png" alt="mipmap" title="how gradients determine the appropriate mipmap level for sampling based on the pixel-to-texel ratio"></p></li><li><p>Bilinear Filtering Within Levels:<br>In each mipmap level (e.g., Level D or D+1), bilinear interpolation is applied. This means the four nearest texels in the mipmap contribute to the color of the pixel on the screen.<br>Trilinear Interpolation Across Levels:<br>If D is not an integer, the rendering system performs linear interpolation between two mipmap levels (e.g., D and D+1). The final color is a weighted average of the bilinear results from both mipmap levels.<br><img src="mipmap3.png" alt="mipmap" title="how bilinear and trilinear interpolation smooth the transition between levels"></p></li></ul></li><li><p>Anisotropic Filtering (各向异性过滤)</p><ul><li>Description:<br>Mipmap can only do square range queries, but anisotropic filtering considers the distortion caused by the viewing angle (e.g., foreshortening) and adjusts texel sampling accordingly.<br><img src="anisotropic_filtering.png" alt="anisotropic_filtering" title="anisotropic filtering"></li><li>Advantages:<br>Improves texture sharpness when viewed at oblique angles.</li><li>Disadvantages:<br>Adds computational overhead.</li><li>Ripmaps and summed area tables<ul><li>Can look up axis-alignedrectangular zones.</li><li>Diagonal footprint is still a problem.</li></ul></li><li>EWA filtering<ul><li>Use multiple lookups</li><li>Weighted average</li><li>Mipmap hierarchy still helps</li><li>Can handle irregular footprints</li></ul></li></ul></li></ol><h2 id="practical-use-of-texture">Practical use of texture</h2><p>In modern GPUs, <strong>texture = memory + range query</strong> (filtering)</p><ul><li>General method to bring data to fragment calculationsMany applications</li></ul><p>Many applications:</p><ul><li>Environment lighting (environment map: spherical map - record environment light in a sphere, cube map)</li><li>Store microgeometry</li><li>Procedural textures</li><li>Solid modeling</li><li>Store precomputed shading</li><li>Volume rendering</li><li>…</li></ul><h3 id="bump-mapping">Bump mapping</h3><ul><li><p>Textures doesn’t have to only represent colors</p></li><li><p>What if it stores the height / normal?</p></li><li><p>Bump/normal mapping (凹凸/法线贴图)</p></li><li><p>Fake the detailed geometry</p></li><li><p>As the figure below shows, we didn’t change the geometry itself, instead we use some fake normals to create illumination changes, so that it looks like there are a lot of bumps.<br><img src="BumpNormal_mapping.png" alt="normal mapping" title="Normal Mapping"></p></li><li><p>Adding surface detail without adding more triangles</p></li><li><p>Perturb (扰动) surface normal per pixel (for shading computations only)</p></li><li><p>“Height shift” per texel defined by a texture</p></li></ul><p><strong>How to modify normal vector?</strong></p><ul><li><p>How to perturb the normal (flatland)</p><ul><li>First obtain the tangent line here (1, dp), and the tangent line is rotated 90° to obtain the normal.<br><img src="bump_mapping.png" alt="bump mapping" title="flatland-perturb normal"></li></ul></li><li><p>How to perturb the normal (3d)</p><ul><li>Two tangents are computed by moving a point one unit in each of the two directions x and y. Subsequently, the two tangents form a plane, which is cross-multiplied to obtain the new normal vector.<br><img src="bump_mapping1.png" alt="bump mapping" title="3d-perturb normal"></li></ul></li></ul><p>Note that the above methods are in local coordinates, so that the original normal is (0,1) or (0,0,1). We can calculate the perturbed normal in this local coordinates and convert it to world coordinate space later.</p><h3 id="displacement-mapping-位移贴图">Displacement mapping (位移贴图)</h3><ul><li>a more advanced approach</li><li>Uses the same texture as in bumping mapping</li><li>Actually moves the vertices</li></ul><p>Unlike bump mapping, which only simulates surface detail by modifying how light interacts with it, displacement mapping alters the underlying surface geometry itself. For each point (vertex) on the surface, the displacement map is sampled, and the vertex’s position is moved (displaced) along the surface normal by an amount proportional to the map’s value.</p><h3 id="3d-procedural-noise-solid-modeling">3D Procedural Noise + Solid Modeling</h3><p>Procedural noise is a mathematical method for generating pseudo-random patterns in 3D space that can be used to create natural effects like wood grain, marble, clouds, and terrain. Solid modeling is the representation of 3D objects with full volumetric and geometric information. It goes beyond surface models (which only represent the shell) to include the interior structure of objects.<br>n solid modeling, 3D procedural noise is often used as a modifier to shape or texture the solid object. For instance:</p><ul><li>Adding procedural noise to a sphere to create a bumpy or irregular surface.</li><li>Using noise to carve out caves or tunnels in a volumetric model of a terrain.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L06-Rasterization 2 (Antialiasing 反走样 and Z-Buffering)</title>
    <link href="/2025/01/06/GAMES101-L06-Rasterization2/"/>
    <url>/2025/01/06/GAMES101-L06-Rasterization2/</url>
    
    <content type="html"><![CDATA[<h1 id="sampling-artifacts-瑕疵">Sampling Artifacts (瑕疵)</h1><ul><li>Jaggies - sampling in space</li><li>Moire Patterns (摩尔纹) - undersampling images</li><li>Wagon wheel effect - sampling in time</li></ul><p>root cause: signals are changing too fast (high frequency) but sampled too slowly.</p><h1 id="antialiasing-idea-blurring-pre-filtering-before-sampling">Antialiasing idea - Blurring (pre-filtering) Before Sampling</h1><p><img src="pre_filter.png" alt="pre filter" title="Pre-filter for antialiasing"><br>Note antialiased edges in rasterized trianglewhere pixel values take intermediate values.</p><h2 id="how-aliases-are-created">How Aliases are Created</h2><h3 id="aliases">Aliases</h3><p>The <strong>Fourier series</strong> represents a periodic function as a sum of sines and cosines (or complex exponentials). This decomposition shows how a function can be expressed as a combination of simple harmonic components. The <strong>Fourier transform</strong> generalizes the Fourier series to analyze non-periodic functions or signals. It <strong>decomposes a signal into its frequency components</strong>, showing how much of each frequency is present in the signal.<br><img src="fourier_transform.png" alt="fourier transform" title="Fourier Transform"><br>Higer frequencies needs faster sampling.<br><img src="freq_sampling.png" alt="frequencies and sampling" title="Frequencies and Sampling"></p><p>Two frequencies that are indistinguishable at a given sampling rate are called “<strong>aliases</strong>”.</p><h3 id="filtering">Filtering</h3><p><strong>Filtering</strong>: getting rid of certain frequencies.<br>Filtering = Convolution = Average</p><p>Convolution in the spatial domain is equal to multiplicationin the frequency domain, and vice versa</p><ul><li>Option 1:<br>Filter by convolution in the spatial domain.</li><li>Option 2:<br>Transform to frequency domain (Fourier transform). Multiply by Fourier transform of convolution kernel. Transform back to spatial domain (inverse Fourier).</li></ul><h3 id="summary">Summary</h3><p>Sampling = Repeating Frequency Contents<br>Aliasing = Mixed Frequency Contents<br>Aliasing occurs when a signal or image contains high-frequency details that are inadequately sampled.</p><h2 id="how-to-reduce-aliasing-errors">How to Reduce Aliasing Errors</h2><ul><li>Option 1: Increase sampling rate<br>Essentially increasing the distance between replicas in the Fourier domain.<br>Higher resolution displays, sensors, framebuffers…<br>But: costly &amp; may need very high resolution</li><li>Option 2: Antialiasing<br>Making Fourier contents “narrower” before repeating, i.e. <strong>Filtering out high frequencies before sampling</strong>.</li></ul><p>See the two figures below. The horizontal axis in the figure represents frequency, with 0 Hz at the center. Moving away from the center represents higher frequencies. Fs/2 and -Fs/2 represent the Nyquist frequency (see explanation below), the highest frequency that can be represented accurately for a sampling rate Fs. Initially, as shown in the first figure, mixed frequencies caused aliases. In the second figure, if we remove the high frequencies, the mixed part no longer exists, anti-aliasing achieved.</p><p><img src="mixed_freq.png" alt="mixed part" title="Initial mixed part"><br><img src="after_lowpass_filter.png" alt="after low pass filter" title="After low pass filter"></p><p>PS: Nyquist-Shannon Sampling Theorem<br>To accurately represent a signal, the sampling rate must be at least twice the highest frequency in the signal. This threshold is called the Nyquist frequency:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mrow><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></msub><mo>&gt;</mo><mo>=</mo><mn>2</mn><msub><mi>f</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{sampling} &gt;= 2f_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">am</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">pl</span><span class="mord mathnormal mtight">in</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>If this condition is not met, aliasing occurs.</p><p>PPS: If sampled first, low-frequency information will be aliased.</p><h2 id="a-practical-pre-filter">A Practical Pre-Filter</h2><p>Solution:</p><ul><li>Convolve f(x,y) by a 1-pixel box-blur<br>Recall: convolving =filtering= averaginge</li><li>Then sample at every pixel’s center</li></ul><p><img src="practical_antialiasing_tri.png" alt="Antialiasing Example" title="Antialiasing Example"></p><h1 id="antialiasing-by-supersampling-multisample-anti-aliasing-msaa">Antialiasing by Supersampling - Multisample Anti-Aliasing (MSAA)</h1><ol><li>Take <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>×</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">N \times N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> samples in each pixel.<br><img src="MSAA1.png" alt="MSAA1" title="MSAA1"></li><li>Average the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>s</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">N /times N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord mathnormal">t</span><span class="mord mathnormal">im</span><span class="mord mathnormal">es</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> samples inside each pixel.<br><img src="MSAA2.png" alt="MSAA2" title="MSAA2"><br><img src="MSAA3.png" alt="MSAA3" title="MSAA3"></li></ol><p>In practice, industry don’t use regularly spaced samples, instead they place samples based on a predefined sampling pattern, to use less samples getting the same effect as more samples.</p><h1 id="other-anti-aliasing-techniques">Other Anti-Aliasing Techniques</h1><ul><li>FXAA (Fast Aproximate AA)</li><li>TAA (Temporal AA)</li></ul><h1 id="super-resolution-super-sampling">Super resolution / Super Sampling</h1><ul><li>From low resolution to high resolution</li><li>Essentially still “not enough samples” problem</li><li>DLSS (Deep Learning Super Sampling) to “guess” the missing part</li></ul><h1 id="z-buffer-深度缓存">Z-Buffer (深度缓存)</h1><ul><li>Store current min. z-value for each sample (pixel)</li><li>Needs an additional buffer for depth values</li><li>frame buffer stores color values</li><li>depth buffer (z-buffer) stores depth</li></ul><p>IMPORTANT: For simplicity we suppose z is always positive (smallerz -&gt; closer, larger z -&gt; further).</p><p>Initialize depth buffer to <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \infinity at position 1: \̲i̲n̲f̲i̲n̲i̲t̲y̲">\infinity</span>.</p><p>During rasterization:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (each triangle T)<br>  <span class="hljs-keyword">for</span> (each <span class="hljs-built_in">sample</span> (x,y,z) in T)<br>    <span class="hljs-keyword">if</span> (z &lt; zbuffer[x,y])  <span class="hljs-comment">// closest sample so far</span><br>      framebuffer[x,y] = rgb;<span class="hljs-comment">// update color</span><br>      zbuffer[x,y] = z;  <span class="hljs-comment">// update depth</span><br>    <span class="hljs-keyword">else</span><br>      ;  <span class="hljs-comment">// do nothing, this sample is occluded</span><br></code></pre></td></tr></table></figure><ul><li><strong>Complexity</strong>: O(n) for n triangles (assuming constant coverage).</li><li>Drawing triangles in different orders won’t affect the result of z-buffer.</li><li>Z-buffer is the most important visibility algorithmeImplemented in hardware for all GPUs.</li><li>Z-buffer cannot handle transparent objects, they need special methods.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L05-Rasterization 1 (Triangles)</title>
    <link href="/2025/01/06/GAMES101-L05-Rasterization1/"/>
    <url>/2025/01/06/GAMES101-L05-Rasterization1/</url>
    
    <content type="html"><![CDATA[<h1 id="triangles-fundamental-shape-primitives">Triangles - fundamental shape primitives</h1><ul><li><p>Most basic polygon</p><ul><li>Break up other polygons</li></ul></li><li><p>Unique properties</p><ul><li>Guaranteed to be planar</li><li>Well-defined interior</li><li>Well-defined method for interpolating values atvertices over triangle (barycentric interpolation)</li></ul></li></ul><h1 id="sampling-a-function">Sampling a Function</h1><p>Evaluating a function at a point is sampling. We can discretize a function by sampling.</p><p>Rasterization = Sample a 2D Indicator Function</p><p>Example (to rasterize a triangle):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;xmaX;++X)<br>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> yy &lt;ymax; ++y)<br>  &#123;<br>    image[x][y]<span class="hljs-built_in">inside</span>(tri + <span class="hljs-number">0.5</span>x + <span class="hljs-number">0.5</span>y); <span class="hljs-comment">// can use cross product to check</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>In the example above, we can use an axis-aligned bounding box (aabb) to avoid checking all pixels on the screen. Or we can use incremental triangle traversal.<br><img src="incremental_traverse.png" alt="Incremental Traversal" title="Incremental Traversal"></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L03-Transformation</title>
    <link href="/2025/01/01/GAMES101-L03-Transformation/"/>
    <url>/2025/01/01/GAMES101-L03-Transformation/</url>
    
    <content type="html"><![CDATA[<h1 id="common-transformation-matrices">Common Transformation Matrices</h1><ol><li>Scale Matrix (non-uniform)<br>Essence: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>s</mi><mi>x</mi></msub><mi>x</mi><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><msub><mi>s</mi><mi>y</mi></msub><mi>y</mi></mrow><annotation encoding="application/x-tex">x&#x27;(x_{prime}) = s_xx, y&#x27; = s_yy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.038em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> =&gt; (represent in matrices)<br>“non-uniform” scaling means that the scaling factors applied to the x-axis (sx) and y-axis (sy) are not equal.<br><img src="scale_mat.png" alt="scale mat" title="Scale Matrix"></li><li>Reflection Matrix<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>x</mi><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x&#x27;(x_{prime}) = -x, y&#x27; = y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.038em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></li><li>Shear Matrix<br><img src="shear_mat.png" alt="shear mat" title="Shear Matrix"></li><li>Rotation Matrix<br>Without spacific instructions, default center is origin and default rotating direction is counter clock-wise.<br><img src="rotate_mat.png" alt="rotate mat" title="Rotation Matrix"><br>For rotation matrix <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>, if we want an inverse rotation (from the same center rotating the same degree in a different direction), the new rotation matrix should be <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> (by the definition of inverse transforms). In addition, if we apply <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">-\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> to the rotation matrix of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>, we will find that the new rotation matrix can also be reprensented as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">M^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>. That is to say, for a rotation matrix <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>M</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">M^{-1} = M^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>.</li></ol><p><strong>Summary</strong><br>Above transformations can be represented in linear combinations. Linear transformations = Matrices (in the same dim as the transformed object).</p><h1 id="homogeneous-coordinates-齐次坐标">Homogeneous Coordinates (齐次坐标)</h1><h2 id="why-introduce-homogeneous-coordinates">Why introduce homogeneous coordinates</h2><p>Considering translations, which can be represented as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>y</mi><mo>+</mo><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">x&#x27;(x_{prime}) = x + t_x, y&#x27; = y + t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.038em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>, they cannot be represented simply using a 2d matrix. However, we don’t want to treat translation as a special case, so we introduce homogeneous coordinates, to represent adding a constant.<br><img src="homo_coords.png" alt="Homo Coords" title="Solution: Homogeneous Coordinates"><br>As shwon in the figure above, why are the representations of points and vectors different? This is because vectors are translation invariant. Adding a 0 instead of 1 at the end is to protext vectors from changing caused by translations. In this case, if we use a translation matrix to multiply the vector, the vector will remain unchanged.</p><h2 id="definitions">Definitions</h2><p><img src="homo_coords_2.png" alt="Homo Coords" title="Homogeneous Coordinates"><br>In the context of homogeneous coordinates, Point + Point representation the midpoint between the two points.</p><h1 id="affine-transformations-仿射变换">Affine Transformations (仿射变换)</h1><p>Use affine transformations to combine linear transformations and translations. Note that when using affine transformations the last row is always <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 0, 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> (only applied to affine transformations, for projection transformations the last row has other meanings) and the last column is always <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">[t_x, t_y, 1]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1274em;vertical-align:-0.2861em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>. And the top left four elements represents the linear transformations.<br><img src="affine_map.png" alt="Affine Map" title="Affine Map"></p><h1 id="inverse-transformations-逆变换">Inverse Transformations (逆变换)</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> is the inverse of transform <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> in both a matrix and geometric sense. Imagin we use matrix <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> to transform a point, to revert it to the original state, we apply <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> to the point.</p><h1 id="composing-transformations">Composing Transformations</h1><p>Compose simple transforms to form a complex transform. Transform ordering matters. <strong>Note that matrices are applied from right to left</strong>. Matrices don’t have the communative law but have the associative law, so we can multiplie all the transform matrices to get one composite matrix.<br><img src="compose_transform.png" alt="Compose Transform" title="Compose Transform"><br><img src="compose_transform_2.png" alt="Compose Transform" title="Compose Transform"></p><h1 id="3d-transform">3D Transform</h1><p>Similarly, in 3D Transforms, vectors are translation invariant.<br><img src="3d_transform.png" alt="3D Transform" title="3D Transform"></p><p>We use a <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">4 \times 4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span> matrix to represent 3d affine transforms. For 3d <strong>affine</strong> transforms, the last row is always <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 0, 0, 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>, the last row is always <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>z</mi></msub><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">[t_x, t_y, t_z, 1]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1274em;vertical-align:-0.2861em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>, while the left top <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">3 \times 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> matrix represents the 3D linear transforms. Note that for an affine matrix (both 2d and 3d), if we decompose the matrix, it should be applying linear transform first, and then the translation.<br><img src="3d_transform_2.png" alt="3D Transform Matrix" title="3D Transform Matrix"></p><p>3D rotations are similar to 2D rotations, except for the rotation about y axis. This is because <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>y</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>z</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>x</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{y} = \vec{z} \times \vec{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7973em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2077em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>.<br><img src="3d_rotation.png" alt="3D rotation" title="3D Rotation"></p><p>For complex rotations, we can decompose them to rations about each axis.<br><img src="3d_rotation_general.png" alt="3d rotation general" title="complex 3D rotation"></p><p>A more general method for 3d rotation is Rodrigues’ ratation formula (axis n passes origin by default).<br><img src="Rodrigues'RotationRule.png" alt="Rodrigues'RotationRule" title="Rodrigues'RotationRule"></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES 101 L02-Review of Linear Algebra</title>
    <link href="/2024/12/31/GAMES101-L02-LinearAlgebra/"/>
    <url>/2024/12/31/GAMES101-L02-LinearAlgebra/</url>
    
    <content type="html"><![CDATA[<h1 id="vectors">Vectors</h1><h2 id="definition">Definition</h2><p>No absolute starting position; direction and length; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>B</mi><mo>⃗</mo></mover><mo>−</mo><mover accent="true"><mi>A</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AB} = \vec{B} - \vec{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">A</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.0966em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>.</p><p>Magnitude (length) of vector: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">||\vec{a}||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">∣∣</span></span></span></span></p><h2 id="unit-vector">Unit Vector</h2><p>Unit Vector: used to represent directions; length = 1; normalize vector to get a unit vector by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>^</mo></mover><mo>=</mo><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mi mathvariant="normal">/</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\hat{a} = \vec{a} / ||\vec{a}||</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">/∣∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">∣∣</span></span></span></span>.</p><h2 id="vector-addition">Vector Addition</h2><p><img src="vec_add.png" alt="vec add" title="Vector Addition"></p><h2 id="cartesian-coordinates">Cartesian Coordinates</h2><p>X and Y can be any (usually orthogonal units) vectors.<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">A</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{A} = \begin{pmatrix} x \\ y \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="bold">A</mi><mi>T</mi></msup><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{A}^T = \begin{pmatrix} x &amp; y \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathbf">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi mathvariant="bold">A</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>=</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">||\mathbf{A}|| = \sqrt{x^2 + y^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣∣</span><span class="mord mathbf">A</span><span class="mord">∣∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.2822em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9178em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.28em" viewbox="0 0 400000 1296" preserveaspectratio="xMinYMin slice"><path d="M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2822em;"><span></span></span></span></span></span></span></span></span></p><h2 id="vector-manipulation">Vector Manipulation</h2><h3 id="dot-scalar-product">Dot (scalar) Product</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>=</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\vec{a} \cdot \vec{b} = ||\vec{a}||||\vec{b}||cos\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9774em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2274em;vertical-align:-0.25em;"></span><span class="mord">∣∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">∣∣∣∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">∣∣</span><span class="mord mathnormal">cos</span><span class="mord">Θ</span></span></span></span></p><p><img src="vec_dot_prod.png" alt="Dot Product Properties" title="Dot Product Properties"><br><img src="vec_dot_prod_coords.png" alt="Dot Product by Coordinates" title="Dot Product by Coordinates"></p><p><strong>Use:</strong></p><ol><li>Find angle between two vectors(e.g.cosine of angle between light source and surface);</li><li>Find projection of one vector on another;</li><li>Decompose a vector;</li><li>Measure how close two vectors are;</li><li>Determine backward / forward.<br><img src="forward_backward.png" alt="Measure how close two vectors are and Determine backward / forward" title="Measure how close two vectors are and Determine backward / forward"><br>In the figure above, consider <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span> as the base (forward), if another vector’s dot product with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span> is positive, we consider these two vectors have approximately the same directions. Also, if the vectors are all unit vectors, when the result of dot product is closer to 1, we cosider these two vectors closer.</li></ol><h3 id="cross-vector-product">Cross (vector) Product</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>=</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\vec{a} \times \vec{b} = ||\vec{a}||||\vec{b}||sin\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7973em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9774em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2274em;vertical-align:-0.25em;"></span><span class="mord">∣∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">∣∣∣∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mord">∣∣</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord">Θ</span></span></span></span><br>Cross product is orthogonal to two initial vectors; Direction determined by right-hand rule (four fingers rotating from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>, thumb pointing to the result)(OpenGL uses left-hand coordinate sys); Useful in constructing coordinate systems.<br><img src="vec_cross_prod.png" alt="Vector Cross Product Properties" title="Vector Cross Product Properties"><br><img src="vec_cross_prod_formula.png" alt="Cross Product formula" title="Cross Product formula"></p><p><strong>Use:</strong></p><ol><li>Determine left / right (more exactly, counter clock-wise or clock-wise)</li><li>Determine inside / outside<br><img src="cross_prod_checkpos.png" alt="cross product checkpos" title="Use Cross Product to check if a point is inside/outside a convex polygon"><br>Peform cross product between P and each edge vector, if the results are all positive or all negative, the point is inside the triangle; otherwise it’s outside the triangle.</li></ol><h3 id="orthonormal-coordinate-frames">Orthonormal Coordinate Frames</h3><p><img src="ortho_coord_frame.png" alt="ortho coord frames" title="Orthonormal Coordinate Frames"></p><h1 id="matrices">Matrices</h1><h2 id="definations">Definations</h2><p>Arrays of numbers<br>Adding and multiplication by a scalar: element by element<br>Multiplication by another matrix: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>M</mi><mo>×</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>N</mi><mo>×</mo><mi>P</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>M</mi><mo>×</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(M \times N)(N \times P) = (M \times P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>. Element (i, j) in the product is the dot product or row i from A and column j from B.</p><h2 id="properties">Properties</h2><ul><li>Non-communative: AB != BA</li><li>Associative and distributive:<ul><li>(AB)C = A(BC)</li><li>A(B+C) = AB + AC</li><li>(A+B)C = AC + BC</li></ul></li></ul><h2 id="matrix-vector-multiplication">Matrix Vector Multiplication</h2><ul><li>Treat vector as a column matrix</li><li>Used to transform points</li></ul><h3 id="vector-multiplication-in-matrix">Vector Multiplication in Matrix</h3><p><img src="vec_multiplication_in_mat.png" alt="vec_multiplication_in_mat" title="Vector Multiplication in Matrix"></p><h2 id="matrix-transpose">Matrix Transpose</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo>=</mo><msup><mi>B</mi><mi>T</mi></msup><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">(AB)^T = B^TA^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></p><h2 id="identity-matrix-and-inverse">Identity Matrix and Inverse</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>A</mi><mo>=</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">AA^{-1} = A^{-1}A = I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>B</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(AB)^{-1} = B^{-1}A^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Graphics</category>
      
      <category>GAMES</category>
      
    </categories>
    
    
    <tags>
      
      <tag>graphics</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 多线程</title>
    <link href="/2024/12/30/multi-threads/"/>
    <url>/2024/12/30/multi-threads/</url>
    
    <content type="html"><![CDATA[<h1 id="processes-amp-threads">Processes &amp; Threads</h1><h2 id="definition">Definition:</h2><p>Process (进程): A program in execution. It has its own memory space. 进程是一个程序的执行过程，进程之间相互独立，每个进程有自己的栈、堆、存储以及数据。操作系统为每个进程分配一个进程控制块（PCB）来管理进程。</p><p>Thread: A smaller unit of a process that can run independently. Threads within a process share the same memory space. 操作系统为每个线程分配一个线程控制块和栈。<strong>线程之间共享全局和堆的数据，每个线程有自己的栈数据</strong>。</p><p>C++ Support: C++ supports multithreading through the <thread> library introduced in C++11.</thread></p><h2 id="key-differences">Key Differences:</h2><table><thead><tr><th>Aspect</th><th>Process</th><th>Thread</th></tr></thead><tbody><tr><td>Memory</td><td>Independent memory space</td><td>Shared memory space</td></tr><tr><td>Overhead</td><td>High (context switching)</td><td>Low (context switching)</td></tr><tr><td>Communication</td><td>Inter-process communication (IPC)</td><td>Shared memory within the process</td></tr><tr><td>Creation Speed</td><td>Slower</td><td>Faster</td></tr></tbody></table><h2 id="ltthreadgt"><code>&lt;thread&gt;</code></h2><p><code>thread(F&amp;&amp; f, Args&amp;&amp;... args);</code><br>使用这个构造函数来创建线程，它的<em>第一个参数是线程要执行的函数</em>，也就是这个线程的入口函数（线程函数）。线程函数也可以是函数对象、Lambda 对象、类成员函数等可调用的对象。如果 f 是函数对象、Lambda 对象、静态类成员函数等可调用对象，那么<em>Args 中的所有参数是传递给可调用对象的实参</em>。如果第一个参数是类的非静态成员函数，那么<em>Args 中的第一个参数是用于调用这个成员函数的类对象地址，剩余的参数是传递给成员函数的实参</em>。</p><p>在线程中线程函数 f 的返回值会被忽略，所以<strong>要获得返回值，需要使用按引用传递的参数()；也可以将返回值存储在类对象的数据成员中或者使用 promise 对象</strong>。</p><p>当创建并执行了一个线程后，需要等待这个线程执行完毕才可以结束程序。这个<strong>等待</strong>过程可以通过调用线程对象的 <strong>join</strong> 函数来实现。调用这个函数就会<strong>等待这个线程执行完毕后在这里汇合</strong>。代码执行过程中进入的这种等待状态叫做阻塞。另一种情况，如果在调用 join 之前线程已经执行完毕，那么 join 函数会直接返回而不会进入等待状态。在调用 join 函数时，线程对象的状态必须是<strong>joinable</strong>。也就是说这个线程对象代表的是一个正在执行的线程，或者是执行完毕但是未被合并的线程。我们可以用 joinable 函数来判断一个线程对象是否是可以合并的。只有当 joinable 返回 True 时，调用 join 函数才不会抛出异常。</p><p>一个 thread 对象以下情况下是不能被合并的：</p><ol><li>使用默认构造函数初始化了线程对象。由于没有提供线程的函数，也没有创建可执行的线程，所以这种线程对象只是个空壳。这种对象的用途是通过移动赋值运算符从一个临时右值对象或者一个被移动的对象获得一个可执行的线程。（PS: std::thread() thread 线程对象只能移动赋值或者移动构造，而不能够拷贝构造和拷贝赋值。这样保证了每个 thread 的对象只能代表唯一的一个执行线程）</li><li>join()完成的线程。因为一个线程只能被合并一次。</li><li>detach()后的线程。调用 detach 函数后，被分离的线程自己在后台运行，主线程不再对它拥有控制权，因此也不能再合并。</li><li>被移动的线程对象。使用移动构造，或者移动赋值被移动过的对象不再有可执行的线程，因此也不能被合并。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">threadFunction</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Thread function executing\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t</span><span class="hljs-params">(threadFunction)</span></span>;  <span class="hljs-comment">// Create a thread</span><br>    t.<span class="hljs-built_in">join</span>();  <span class="hljs-comment">// Wait for the thread to finish</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Main function\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="线程间通信-inter-thread-communication-itc">线程间通信 (Inter-Thread Communication, ITC)</h1><p>C++ 进行线程间通信方法。</p><h2 id="共享内存与互斥锁-shared-memory-with-mutexes">共享内存与互斥锁 (Shared Memory with Mutexes)</h2><ul><li><strong>机制</strong>: 这是最基础的通信方式。线程通过读写共享的内存区域（例如，全局变量、堆上分配的对象）来交换信息。为了防止数据竞争和保证数据一致性，对共享内存的访问通常需要使用互斥锁 (<code>std::mutex</code>, <code>std::recursive_mutex</code>, <code>std::shared_mutex</code> 等) 进行同步。</li><li><strong>用途</strong>: 适用于线程间需要共享复杂数据结构或状态的场景。不过，它本身不提供“通知”机制，线程需要主动检查或配合其他同步原语。</li><li><strong>关键点</strong>: 必须非常小心地管理锁的粒度和生命周期，以避免死锁和性能瓶颈。</li></ul><h2 id="条件变量-condition-variables-stdcondition_variable-stdcondition_variable_any">条件变量 (Condition Variables - <code>std::condition_variable</code>, <code>std::condition_variable_any</code>)</h2><ul><li><strong>机制</strong>: 条件变量允许<strong>一个或多个线程等待某个条件变为真</strong>。它通常与互斥锁一起使用，以保护共享的条件状态。当一个线程<strong>改变了条件状态</strong>后，它可以通知 (<code>notify_one()</code> 或 <code>notify_all()</code>) 正在等待的线程。等待的线程在被唤醒后会重新检查条件。</li><li><strong>用途</strong>: 非常适合实现<strong>生产者-消费者模式、任务队列</strong>、或任何需要“等待某事发生”的场景。</li><li><strong>关键点</strong>: 等待条件变量时必须持有锁，并且通常在循环中检查条件以处理“伪唤醒”(spurious wakeups)。<code>std::condition_variable</code> 仅能与 <code>std::unique_lock&lt;std::mutex&gt;</code> 一起工作，而 <code>std::condition_variable_any</code> 可以与任何满足基本锁要求的锁类型一起工作。</li></ul><h2 id="promise-和-future-stdpromise-stdfuture">Promise 和 Future (<code>std::promise</code>, <code>std::future</code>)</h2><ul><li><strong>机制</strong>: 这对组合提供了一种<strong>单向的、一次性的</strong>通信方式，用于从一个线程（“生产者”或设置 promise 的一方）向另一个线程（“消费者”或持有 future 的一方）传递一个值或异常。<code>std::promise</code> 用于设置值，<code>std::future</code> 用于异步地获取该值（<code>get()</code> 方法会阻塞直到值可用）。</li><li><strong>用途</strong>: 非常适合获取异步任务的返回值，或者当一个线程需要等待另一个线程完成某个特定计算并返回结果时。</li><li><strong>关键点</strong>: <code>std::future::get()</code> 只能调用一次。如果任务抛出异常，该异常会被存储并在调用 <code>get()</code> 时重新抛出。</li></ul><h2 id="打包任务-stdpackaged_task">打包任务 (<code>std::packaged_task</code>)</h2><ul><li><strong>机制</strong>: <code>std::packaged_task</code> 包装一个<strong>可调用</strong>对象（如函数、lambda 表达式），并允许其结果通过 <code>std::future</code> 进行异步访问。可以将 <code>std::packaged_task</code> 看作是可调用对象与其未来结果之间的桥梁。</li><li><strong>用途</strong>: 当你需要将一个任务的执行与获取其结果解耦时，例如在线程池中执行任务并稍后获取结果。</li><li><strong>关键点</strong>: 创建 <code>packaged_task</code> 后，可以获取其 <code>future</code>，然后可以将任务本身传递给另一个线程执行。</li></ul><h2 id="异步调用-stdasync">异步调用 (<code>std::async</code>)</h2><ul><li><strong>机制</strong>: <code>std::async</code> 是一个更高级别的工具，用于<strong>异步地运行一个函数（或可调用对象），并返回一个 <code>std::future</code> 来获取其结果</strong>。它可以自动管理线程的创建和执行（根据启动策略，如 <code>std::launch::async</code> 或 <code>std::launch::deferred</code>）。</li><li><strong>用途</strong>: 方便地启动后台任务并获取其结果，而无需手动管理线程和 promise/future 对。</li><li><strong>关键点</strong>: <code>std::async</code> 的行为（是否在新线程中立即执行）取决于启动策略。返回的 <code>std::future</code> 的析构函数可能会阻塞，直到异步操作完成（这取决于 <code>std::async</code> 的启动方式和 <code>future</code> 是否被引用）。</li></ul><h2 id="原子操作-stdatomiclttgt">原子操作 (<code>std::atomic&lt;T&gt;</code>)</h2><ul><li><strong>机制</strong>: <code>std::atomic</code> 模板类提供了对<strong>简单数据类型</strong>（如整数、布尔值、指针）的原子操作，这些操作是不可分割的，可以避免数据竞争，并且通常比使用互斥锁更轻量级。</li><li><strong>用途</strong>: 用于实现无锁数据结构、线程安全的计数器、标志位等。它们可以作为更复杂同步原语的构建块。</li><li><strong>关键点</strong>: 需要仔细考虑内存序 (<code>std::memory_order</code>) 以确保正确的同步行为和可见性，这比使用锁要复杂。</li></ul><h2 id="信号量-semaphores-stdcounting_semaphore-stdbinary_semaphore-c20">信号量 (Semaphores - <code>std::counting_semaphore</code>, <code>std::binary_semaphore</code> C++20)</h2><ul><li><strong>机制</strong>: 信号量维护一个内部计数器。<code>acquire()</code> (或 <code>P</code> 操作、<code>wait</code>) 会减少计数器（如果<strong>计数器为零则阻塞</strong>），<code>release()</code> (或 <code>V</code> 操作、<code>signal</code>) 会增加计数器（并可能唤醒等待的线程）。二元信号量计数器只能是 0 或 1，行为类似轻量级锁或事件。</li><li><strong>用途</strong>: <strong>控制对一组有限资源的访问</strong>（计数信号量），或者作为简单的线程间信号通知机制（二元信号量）。</li><li><strong>关键点</strong>: C++20 标准引入，提供了标准化的信号量实现。</li></ul><h2 id="闩锁-stdlatch-c20">闩锁 (<code>std::latch</code> - C++20)</h2><ul><li><strong>机制</strong>: 闩锁是一种同步原语，允许任意数量的线程阻塞，直到一个内部计数器减为零。一旦计数器达到零，它就不能被重置，所有等待的线程都会被释放。</li><li><strong>用途</strong>: 用于一次性的同步点，例如等待多个工作线程完成其初始化阶段，然后主线程或其他线程才能继续。</li><li><strong>关键点</strong>: 是一种“一次性”的屏障。</li></ul><h2 id="屏障-stdbarrier-c20">屏障 (<code>std::barrier</code> - C++20)</h2><ul><li><strong>机制</strong>: 屏障允许多个线程在某个执行点上互相等待，直到指定数量的线程都到达该屏障。到达后，屏障可能会执行一个可选的“完成阶段”函数，然后所有线程被释放以继续执行。屏障可以被重用。</li><li><strong>用途</strong>: 用于需要多个线程在算法的某个阶段同步的场景，例如在并行计算的迭代步骤之间。</li><li><strong>关键点</strong>: 与 latch 不同，屏障是<strong>可以重置和重用</strong>的。</li></ul><h1 id="promise-amp-future">Promise &amp; Future</h1><h2 id="definition">Definition:</h2><p>Promise: A provider of a value or exception for a shared state.<br>Future: An object to retrieve the value of a shared state provided by a promise.</p><h2 id="use">Use:</h2><p>Synchronizing threads.<br>Retrieving a result computed asynchronously.</p><h3 id="promise">promise</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> &gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">promise</span>;<br>(<span class="hljs-number">1</span>) (since C+<span class="hljs-number">+11</span>)<br><span class="hljs-keyword">template</span>&lt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> &gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">promise</span>&lt;R&amp;&gt;;<br>(<span class="hljs-number">2</span>) (since C+<span class="hljs-number">+11</span>)<br><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">promise</span>&lt;<span class="hljs-type">void</span>&gt;;<br>(<span class="hljs-number">3</span>) (since C+<span class="hljs-number">+11</span>)<br></code></pre></td></tr></table></figure><ol><li>Base template. 可以用于两个线程之间按照值传递结果。</li><li>Non-void specialization, used to communicate objects between threads. 引用模板可以用于两个线程之间<br>按照引用来传递结果。</li><li>void specialization, used to communicate stateless events. 用于两个线程间发送任务完成的信号而不传递任何数据。</li></ol><p><strong>Constructor</strong><br><code>Promise()</code> promise 的默认构造函数，它会创建一个<strong>共享状态对象 Shared State</strong>。在实际的实现中，使用<code>shared_ptr</code>来封装这个 Shared State 对象，共享状态对象<strong>用于存放要设置的值或异常</strong>。<br><code>Promise(promise&amp;&amp; x)</code> 移动构造函数，可以在创建对象的时候将被移动对象 X 的共享状态转移过去。为了保证关联的共享状态的唯一性，promise 类删除了拷贝构造和拷贝复制。</p><p><strong>Getting the result</strong><br><code>get_future</code> | returns a future associated with the promised result (public member function). 用于创建一个 future 对象。创建时，使用 promise 对象中的共享状态对象作为初始化参数来构造 future 对象，这样<strong>新创建的 future 对象内部也会有一个指向共享状态对象的 shared_ptr 指针</strong>。<strong>future 对象和 promise 对象是一对一的关系，所以只能调用 get_future 函数一次。更确切的说是一个共享状态，只能用于创建一个 future 对象。</strong></p><p><strong>Setting the result</strong><br><code>set_value</code> | sets the result to specific value (public member function). 用来设置共享状态对象中的值并将其中的状态设置为就绪状态。<br><code>set_value_at_thread_exit</code> | sets the result to specific value while delivering the notification only at thread exit (public member function).<br><code>set_exception</code> | sets the result to indicate an exception (public member function).<br><code>set_exception_at_thread_exit</code> | sets the result to indicate an exception while delivering the notification only at thread exit (public member function)</p><h3 id="future">future</h3><p><strong>Member Function</strong><br><code>share</code> | transfers the shared state from <code>*this</code> to a <code>shared_future</code> and returns it (public member function)</p><p><strong>Getting the result</strong><br><code>get</code> | returns the result (public member function). 用于获得结果。如果与 future 关联的共享状态处于未就绪状态，那么这个调用就会阻塞。一直等到共享状态变为就绪这个函数才会返回结果值。</p><p><strong>State</strong><br><code>valid</code> | checks if the future has a shared state (public member function)<br><code>wait</code> | waits for the result to become available (public member function). wait 则是等待状态就绪。当共享状态变为就绪后这个函数返回，这时再调用 get 函数则会直接获得结果。<br><code>wait_for</code> | waits for the result, returns if it is not available for the specified timeout duration (public member function). 等待一定的时间。<br><code>wait_until</code> | waits for the result, returns if it is not available until specified time point has been reached<br>(public member function). 等待到指定的时刻。</p><p>wait_for 和 wait_until 的返回值都是状态码，包括 ready, timeout，deferred 这三种枚举值。其中 ready 是共享状态就绪，timeout 是超时，而 deffered 是共享状态中含有延缓执行的函数，也就是只有在显式请求时才会执行的函数。</p><h2 id="mechanism">Mechanism:</h2><p>Promise sets a value (or exception).<br>Future retrieves the value.</p><h2 id="explanation">Explanation</h2><p>在 C++中,promise 和 future 这两个类为线程之间提供了一种简单的通信机制。<em>一个线程可以通过 promise 设置值或者异常，而另一个线程可以通过 future 来获得这个值或者异常</em>。promise 和 future 实现通信的核心是类对象 Shared State，它提供的函数可以保证线程同步的情况下实现对状态和结果的设置和获取。一对 promise 和 future 对象共享了一个 Shared State 对象。promise 通过 Shared State 对象设置状态和结果，而 future 则通过 Shared State 对象获得状态和结果。promise 和 future 常用于生产者消费者模式或者发送接收模式的应用场景中，发送者提供结果而接收者等待并获得结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">compute_pi</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">long</span> num_steps, std::promise&lt;<span class="hljs-type">double</span>&gt;&amp;&amp; promise)</span> </span>&#123;<br>    <span class="hljs-type">double</span> sum = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> i = <span class="hljs-number">0</span>; i &lt; num_steps; ++i) &#123;<br>        <span class="hljs-type">double</span> x = (i + <span class="hljs-number">0.5</span>) / num_steps;<br>        sum += <span class="hljs-number">4.0</span> / (<span class="hljs-number">1.0</span> + x * x);<br>    &#125;<br>    promise.<span class="hljs-built_in">set_value</span>(sum / num_steps);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">(std::future&lt;<span class="hljs-type">double</span>&gt;&amp;&amp; receiver)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Computed value of PI: &quot;</span> &lt;&lt; receiver.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> N_STEPS = <span class="hljs-number">1000000000</span>;<br>    std::thread th1, th2;<br><br>    &#123;<br>        std::promise&lt;<span class="hljs-type">double</span>&gt; promise;<br>        <span class="hljs-keyword">auto</span> receiver = promise.<span class="hljs-built_in">get_future</span>();<br>        th1 = std::<span class="hljs-built_in">thread</span>(compute_pi, N_STEPS, std::<span class="hljs-built_in">move</span>(promise)); <span class="hljs-comment">// 使用移动语义，对象被销毁后不妨碍后续线程执行</span><br>        th2 = std::<span class="hljs-built_in">thread</span>(display, std::<span class="hljs-built_in">move</span>(receiver));<br>    &#125;<br><br>    th<span class="hljs-number">1.</span><span class="hljs-built_in">join</span>();<br>    th<span class="hljs-number">2.</span><span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**使用 future 对象获得结果只能使用一次，这样只能让一个线程获得结果。如果需要让多个线程获得结果，就要使用 shared_future。**shared_future 可以通过两种方式获得：第一种是直接定义一个 shared_future 对象，使用 promise.get_future 函数返回的 future 值作为初始化参数。另一种是通过 future 对象的 shared 函数，将其转换为 shared_future，这时原有的 future 对象不能再使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::shared_future&lt;<span class="hljs-type">double</span>&gt;;<br><span class="hljs-built_in">shared_future</span>(promise.<span class="hljs-built_in">get_future</span>());<br><br><span class="hljs-keyword">auto</span> shared_future = future.<span class="hljs-built_in">share</span>();<br></code></pre></td></tr></table></figure><p>shared_future 和 future 的不同：一个 future 对象只能与一个共享状态对象关联，所以必须通过移动或者引用的方式使用，而 shared_future 对象可以多个同时共享状态，所以它可以采用拷贝的方式使用</p><h1 id="mutex-amp-lock-互斥-amp-锁">Mutex &amp; Lock （互斥 &amp; 锁）</h1><h2 id="intro">Intro:</h2><p>在多线程程序中，当多个线程对同一个数据对象进行访问，并且至少有一个线程在写数据时，会产生数据竞争。但是多个线程同时读取同一个数据对象时没有数据竞争。C++中，所有的运算如果没有声明是原子操作，就默认为非原子操作。也就是在多线程的情况下这个操作对数据的访问可能会被中断，数据会被其他线程访问。因此当多个线程同时访问同一个对象，并进行非原子的写操作时，就可能因为产生数据竞争而导致错误的结果。互斥量 mutex 则是提供了一种同步机制，允许多个线程安全地访问共享对象。从 C++11 开始，提供了 std::mutex 来实现互斥。</p><h2 id="definition">Definition:</h2><p>Mutex (Mutual Exclusion): A synchronization primitive to protect shared data from concurrent access.<br>Lock: Manages mutex locking and unlocking automatically.</p><h2 id="common-mutex-types">Common Mutex Types:</h2><p>std::mutex: Basic mutex.<br>std::recursive_mutex: Allows the same thread to lock multiple times.<br>std::timed_mutex: Allows timed lock attempts.</p><p><strong>Common functions</strong><br><code>lock</code> | locks the mutex, blocks if the mutex is not available (public member function). 用于锁定这个互斥量，也就是获得这个互斥量。如果互斥量已经被其他线程锁定，就会进入阻塞状态，直到被解锁、释放后才能够再次锁定。<br><code>try_lock</code> | tries to lock the mutex, returns if the mutex is not available (public member function). 试图锁定这个互斥量。该函数会立即返回。如果成功锁定这个互斥量则返回值为 true，否则为 false。注意,即使返回 false 值，也不保证互斥量正在被其他线程锁定。<br><code>unlock</code> | unlocks the mutex (public member function)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inc</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      在m_count++语句前调用counter_mutex.lock,在其后调用counter_mutex.unlock。对这条语句中要修改的资源进行保护，以保证同一时间只有一个线程可以修改m_count，也就是当一个线程执行了lock这条语句时要么获得这个互斥量执行后面的语句，要么进入阻塞状态等待互斥量的释放。被保护的这段代码叫做Critical Section, 临界区也就是多个线程或进程都会执行的一段代码这段代码会访问共享资源，例如内存、文件等。</span><br><span class="hljs-comment">      */</span><br>        counter_mutex.<span class="hljs-built_in">lock</span>();<br>        m_count++;<br>        counter_mutex.<span class="hljs-built_in">unlock</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_count; &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::mutex counter_mutex;<br>    <span class="hljs-type">int</span> m_count = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    Counter counter;<br>    <span class="hljs-keyword">auto</span> increase = [](Counter&amp; counter) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; ++i) counter.<span class="hljs-built_in">inc</span>();<br>    &#125;;<br><br>    <span class="hljs-function">std::thread <span class="hljs-title">th1</span><span class="hljs-params">(increase, std::ref(counter))</span></span>;<br>    <span class="hljs-function">std::thread <span class="hljs-title">th2</span><span class="hljs-params">(increase, std::ref(counter))</span></span>;<br><br>    th<span class="hljs-number">1.</span><span class="hljs-built_in">join</span>();<br>    th<span class="hljs-number">2.</span><span class="hljs-built_in">join</span>();<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Final count: &quot;</span> &lt;&lt; counter.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lock-types">Lock Types:</h2><p>实际应用中，单独使用 mutex，在函数返回抛出异常等情况下容易出现未释放互斥量的问题。为了避免这种情况发生，通常将 mutex 结合 lock_guard, scoped_lock, unique_lock 来使用。</p><h3 id="stdlock_guard-c11">std::lock_guard (C++11)</h3><p>Automatically locks and unlocks a mutex. It’s a RAII (Resource Acquisition Is Initialization) wrapper to manage a single mutex lock within a scope.</p><ul><li>Automatically locks the provided mutex upon construction.</li><li>Automatically unlocks the mutex when the lock_guard object goes out of scope.</li></ul><p>lock_guard 简化后的代码如下。它的私有成员是一个 mutex 引用，构造函数在使用一个 mutex 对象初始化后直接调用它的 lock 函数，来试图获得这个互斥量。而在析构函数中会通过 unlock 函数来释放掉这个互斥量。lock_guard 中还有一个构造函数，用于接管一个已经被当前线程锁定的 mutex，也就是初始化时不再调用它的 lock 函数，而只是负责在析构时释放这个 mutex。另外拷贝构造和拷贝赋值都被删除了也就是 lock_guard 是不能被拷贝的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Mutex&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">lock_guard</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">lock_guard</span><span class="hljs-params">(Mutex&amp; m)</span> : m_mutex(m) &#123;</span><br>        m_mutex.<span class="hljs-built_in">lock</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">lock_guard</span>(Mutex&amp; m, <span class="hljs-type">adopt_lock_t</span>) <span class="hljs-keyword">noexcept</span> : <span class="hljs-built_in">m_mutex</span>(m) &#123;&#125;<br><br>    ~<span class="hljs-built_in">lock_guard</span>() &#123;<br>        m_mutex.<span class="hljs-built_in">unlock</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">lock_guard</span>(<span class="hljs-type">const</span> lock_guard&amp;) = <span class="hljs-keyword">delete</span>;<br>    lock_guard&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> lock_guard&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">private</span>:<br>    Mutex&amp; m_mutex;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如下修改前面的代码例子加入 lock_guard，在 inc 函数中创建了 lock_guard 局部对象 lock，它的构造函数直接调用了 mutex 的 lock 函数。要么会获得这个互斥量继续执行，要么阻塞等待资源的释放。当 inc 函数执行完毕后（离开作用域），这个 lock_guard 对象会自动销毁，销毁时在析构函数中，调用 mutex 的 unlock 函数释放互斥量。通过这种 RAII 资源获取及初始化的方式来使用 mutex，一来简化了使用，避免多次调用 lock 函数产生死锁；更重要的是，当离开作用域出现异常，函数返回时 mutex 可以随着自动对象的销毁而自动解锁，不会有忘记解锁的情况发生。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inc</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-function">std::lock_guard <span class="hljs-title">lock</span><span class="hljs-params">(counter_mutex)</span></span>;<br>        m_count++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-function">std::lock_guard <span class="hljs-title">lock</span><span class="hljs-params">(counter_mutex)</span></span>;<br>        <span class="hljs-keyword">return</span> m_count;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::mutex counter_mutex;<br>    <span class="hljs-type">int</span> m_count = <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="stdunique_lock-c11">std::unique_lock (C++11)</h3><p>Flexible locking mechanism with manual lock/unlock support. It’s a flexible RAII-style lock for single mutex. It offers additional features over std::lock_guard, such as deferred locking, timed locking, and the ability to transfer ownership.</p><ul><li>Can lock a mutex on construction or leave it unlocked (deferred lock).</li><li>Provides manual lock/unlock control.</li><li>Can adopt an already locked mutex (adopt lock).</li><li>Useful for complex locking scenarios or timed operations.</li></ul><p>lock | locks (i.e., takes ownership of) the associated mutex (public member function)<br>try_lock | tries to lock (i.e., takes ownership of) the associated mutex without blocking (public member function)<br>try_lock_for | attempts to lock (i.e., takes ownership of) the associated TimedLockable mutex, returns if the mutex has been unavailable for the specified time duration (public member function)<br>try_lock_until | tries to lock (i.e., takes ownership of) the associated TimedLockable mutex, returns if the mutex has been unavailable until specified time point has been reached (public member function)<br>unlock | unlocks (i.e., releases ownership of) the associated mutex (public member function)</p><p>Modify the previous code and use unique_lock instead.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increase</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">std::unique_lock <span class="hljs-title">lock</span><span class="hljs-params">(counter_mutex, std::defer_lock)</span></span>;<br>        <span class="hljs-keyword">while</span> (n--)<br>        &#123;<br>            lock.<span class="hljs-built_in">lock</span>();<br>            m_count++;<br>            lock.<span class="hljs-built_in">unlock</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">std::unique_lock <span class="hljs-title">lock</span><span class="hljs-params">(counter_mutex)</span></span>;<br>        <span class="hljs-keyword">return</span> m_count;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::mutex counter_mutex;<br>    <span class="hljs-type">int</span> m_count = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    Counter counter;<br>    <span class="hljs-keyword">auto</span> increase = [](Counter &amp;counter)<br>    &#123;<br>        counter.<span class="hljs-built_in">increase</span>(<span class="hljs-number">10000</span>);<br>    &#125;;<br>    <span class="hljs-function">std::thread <span class="hljs-title">th1</span><span class="hljs-params">(increase, std::ref(counter))</span></span>;<br>    <span class="hljs-function">std::thread <span class="hljs-title">th2</span><span class="hljs-params">(increase, std::ref(counter))</span></span>;<br><br>    th<span class="hljs-number">1.</span><span class="hljs-built_in">join</span>();<br>    th<span class="hljs-number">2.</span><span class="hljs-built_in">join</span>();<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;counter=&quot;</span> &lt;&lt; counter.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>timed_mutex 比 mutex 类多了两个, try_lock_for 和 try_until。try_lock_for 是在指定时长内获得 mutex 的所有权，而 try_until 是在指定时刻前获得 mutex 的所有权。当这两个函数返回值为 true 时，表明获得 mutex 可以安全访问共享资源，否则获得 mutex 失败。与 try_lock 一样,返回 false 不意味着 mutex 当前被其他线程占有。</p><h3 id="stdlock-c11">std::lock (C++11)</h3><p>It’s a utility function used to acquire multiple locks simultaneously without the risk of deadlock.</p><ul><li>Ensures atomic locking of all mutexes provided as arguments.</li><li>Prevents deadlock by acquiring locks in a consistent order internally.</li><li>Does not manage the lifetime of the locks. You must manually unlock the mutexes.</li></ul><h3 id="stdscope_lock-c17">std::scope_lock (C++17)</h3><p>The class scoped_lock is a mutex wrapper that provides a convenient RAII-style mechanism for owning zero or more mutexes for the duration of a scoped block.</p><p>When a scoped_lock object is created, it attempts to take ownership of the mutexes it is given. When control leaves the scope in which the scoped_lock object was created, the scoped_lock is destructed and the mutexes are released. If several mutexes are given, deadlock avoidance algorithm is used as if by std::lock.</p><p>The scoped_lock class is <strong>non-copyable</strong>.</p><ul><li>Locks multiple mutexes in a single call.</li><li>Uses std::lock internally to avoid deadlock.</li><li>Automatically unlocks all mutexes when the scoped_lock object goes out of scope.</li><li>Preferred over manually using std::lock and std::lock_guard for multiple mutexes.</li></ul><h3 id="stdshared_lock-c17">std::shared_lock (C++17)</h3><p>A RAII-style lock object used to manage shared (read) locks on a std::shared_mutex.<br>Note:<br>std::shared_mutex (C++17) is a synchronization primitive that allows multiple readers or one writer at a time:</p><ul><li><p>Multiple threads can simultaneously acquire a shared (read) lock.</p></li><li><p>Only one thread can acquire an exclusive (write) lock, and it blocks all shared locks while holding the mutex.<br>Use Cases:</p><ul><li>Suitable when there’s frequent read access and infrequent write access to shared resources.</li><li>Example: Configurations, caches, or datasets that are often read but rarely modified</li></ul></li><li><p>Provides automatic locking of the std::shared_mutex on construction.</p></li><li><p>Automatically unlocks the mutex when the shared_lock object goes out of scope.</p></li><li><p>Can defer locking (std::defer_lock), adopt an already locked mutex (std::adopt_lock), or attempt a timed lock (std::try_to_lock).</p></li><li><p>std::unique_lock is for exclusive locks, while std::shared_lock is for shared(read) locks.</p></li></ul><p>Example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;shared_mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br>std::shared_mutex sharedMutex; <span class="hljs-comment">// Shared mutex</span><br><span class="hljs-type">int</span> sharedResource = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reader</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    <span class="hljs-function">std::shared_lock&lt;std::shared_mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(sharedMutex)</span></span>; <span class="hljs-comment">// Acquire shared (read) lock</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Reader &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot; reads value: &quot;</span> &lt;&lt; sharedResource &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-comment">// Lock is automatically released when `lock` goes out of scope</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">writer</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>    <span class="hljs-function">std::unique_lock&lt;std::shared_mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(sharedMutex)</span></span>; <span class="hljs-comment">// Acquire exclusive (write) lock</span><br>    sharedResource += <span class="hljs-number">1</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Writer &quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot; modifies value to: &quot;</span> &lt;&lt; sharedResource &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-comment">// Lock is automatically released when `lock` goes out of scope</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;std::thread&gt; threads;<br><br>    <span class="hljs-comment">// Spawn writer threads</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i) &#123;<br>        threads.<span class="hljs-built_in">emplace_back</span>(writer, i + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Spawn reader threads</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>        threads.<span class="hljs-built_in">emplace_back</span>(reader, i + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; t : threads) &#123;<br>        t.<span class="hljs-built_in">join</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="deadlock-and-livelock">Deadlock and Livelock</h2><h3 id="deadlock">Deadlock</h3><p>A deadlock occurs when two or more threads or processes are waiting for each other to release resources, and none of them can proceed.</p><p>In a single thread, locking the same mutex multiple times could lead to a deadlock (replace the mutex with std::recursive_mutex can solve the problem in this solution, unlock the same times to finally release it).</p><p>In the example below, thread 1 locks mutex1 and waits for mutex2, while thread 2 locks mutex2 and waits for mutex1. This causes a deadlock (use RAII methods, automatically manage the mutex with unique_lock, lock_guard, etc. When calling std::lock(), even though the order of input mutex is different, we can still avoid deadlocks because of the special algorithm inside std::lock.).</p><p>Another solution is that when we need to lock / unlock several mutex, lock / unlock them in different orders can also lead to deadlock.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><br>std::mutex mutex1, mutex2;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thread1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock1</span><span class="hljs-params">(mutex1)</span></span>;<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">50</span>));  <span class="hljs-comment">// Simulate work</span><br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock2</span><span class="hljs-params">(mutex2)</span></span>;  <span class="hljs-comment">// Wait for mutex2</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thread2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock2</span><span class="hljs-params">(mutex2)</span></span>;<br>    std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">50</span>));  <span class="hljs-comment">// Simulate work</span><br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock1</span><span class="hljs-params">(mutex1)</span></span>;  <span class="hljs-comment">// Wait for mutex1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t1</span><span class="hljs-params">(thread1)</span></span>;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t2</span><span class="hljs-params">(thread2)</span></span>;<br><br>    t<span class="hljs-number">1.</span><span class="hljs-built_in">join</span>();<br>    t<span class="hljs-number">2.</span><span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="solutions-to-deadlocks">Solutions to deadlocks</h4><ol><li>Consistent Lock Ordering: Always acquire locks in the same order.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thread1</span><span class="hljs-params">()</span> </span>&#123;<br>    std::<span class="hljs-built_in">lock</span>(mutex1, mutex2);  <span class="hljs-comment">// lock both mutexes without deadlock</span><br>    <span class="hljs-comment">// make sure both already-locked mutexes are unlocked at the end of scope</span><br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock1</span><span class="hljs-params">(mutex1, std::adopt_lock)</span></span>;<br>    <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock2</span><span class="hljs-params">(mutex2, std::adopt_lock)</span></span>;<br><br>    <span class="hljs-comment">// equivalent approach:</span><br>    <span class="hljs-comment">//  std::unique_lock&lt;std::mutex&gt; lock1&#123;from.m, std::defer_lock&#125;;</span><br>    <span class="hljs-comment">//  std::unique_lock&lt;std::mutex&gt; lock2&#123;to.m, std::defer_lock&#125;;</span><br>    <span class="hljs-comment">//  std::lock(lock1, lock2);</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Use std::lock for Multiple Locks: std::lock locks all mutexes atomically, avoiding deadlock.</li><li>Timeout Mechanisms: Use std::timed_mutex or std::unique_lock to limit wait time for locks.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (mutex<span class="hljs-number">1.</span><span class="hljs-built_in">try_lock_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">100</span>))) &#123;<br>    <span class="hljs-keyword">if</span> (mutex<span class="hljs-number">2.</span><span class="hljs-built_in">try_lock_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">100</span>))) &#123;<br>        <span class="hljs-comment">// Critical section</span><br>        mutex<span class="hljs-number">2.</span><span class="hljs-built_in">unlock</span>();<br>    &#125;<br>    mutex<span class="hljs-number">1.</span><span class="hljs-built_in">unlock</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>Avoid Nested Locks: Minimize locking multiple mutexes simultaneously.</li></ol><h4 id="solutions-to-deadlocks-based-on-coffman-conditions">Solutions to deadlocks based on Coffman Conditions</h4><p><strong>为什么会出现死锁？</strong></p><p>死锁的发生通常需要同时满足以下四个条件，也就是著名的“科夫曼条件”（Coffman conditions）：</p><ol><li><strong>互斥 (Mutual Exclusion)</strong>: 至少有一个资源必须以非共享模式持有。也就是说，一次只有一个线程可以使用该资源。如果其他线程请求该资源，则请求线程必须等待，直到资源被释放。这对于锁来说是基本特性。</li><li><strong>占有并等待 (Hold and Wait)</strong>: 一个线程必须至少持有一个资源，并且正在等待获取其他线程当前持有的额外资源。线程不会释放已持有的资源，直到它获得所有它需要的资源。</li><li><strong>不可抢占 (No Preemption)</strong>: 资源不能被强制从持有它的线程中抢占。资源只能由持有它的线程在完成任务后自愿释放。</li><li><strong>循环等待 (Circular Wait)</strong>: 必须存在一组等待线程 {T0, T1, …, Tn}，其中 T0 正在等待 T1 持有的资源，T1 正在等待 T2 持有的资源，…，Tn-1 正在等待 Tn 持有的资源，而 Tn 正在等待 T0 持有的资源。这就形成了一个等待环路。</li></ol><p>只有当这四个条件同时满足时，死锁才可能发生。</p><p><strong>如何避免死锁？</strong></p><p>避免死锁的策略通常是尝试破坏上述四个条件中的至少一个：</p><ol><li><p><strong>破坏互斥条件</strong>:</p><ul><li><strong>思路</strong>: 如果资源可以共享，那么就不会因为争抢而产生死锁。</li><li><strong>实践</strong>: 对于某些资源，这可能是可行的，例如，只读数据。可以使用读写锁 (<code>std::shared_mutex</code>) 允许多个线程同时读取。然而，许多资源本身就是互斥的（例如，对一个共享变量的写操作），所以这个条件往往不能轻易破坏。</li></ul></li><li><p><strong>破坏占有并等待条件</strong>:</p><ul><li><strong>思路</strong>: 不允许线程在持有一个或多个资源的同时，去请求其他资源。</li><li><strong>实践</strong>:<ul><li><strong>一次性获取所有资源</strong>: 线程在开始执行前，一次性获取其所需的所有资源。如果无法一次性获取所有资源，则不获取任何资源，并等待。这在 C++ 中可以通过 <code>std::lock(mutex1, mutex2, ...)</code> 函数来实现，它会以避免死锁的方式尝试锁定所有给定的互斥体。</li><li><strong>释放已持有资源再请求</strong>: 如果线程已经持有某些资源，并且需要请求新的资源但无法立即获得，它可以先释放当前持有的所有资源，然后再重新尝试获取所有需要的资源。这种方式可能会导致活锁或性能问题。</li></ul></li></ul></li><li><p><strong>破坏不可抢占条件</strong>:</p><ul><li><strong>思路</strong>: 如果一个线程持有一些资源，并请求另一个不能立即分配给它的资源，则该线程可以释放其当前持有的所有资源。或者，操作系统可以从某个线程那里抢占资源分配给更高优先级的线程。</li><li><strong>实践</strong>:<ul><li><strong>主动释放</strong>: 线程可以使用 <code>try_lock</code> 或带超时的锁 (<code>std::timed_mutex</code>)。如果无法获得所需的锁，它可以释放已有的锁，然后稍后重试。</li><li><strong>系统抢占</strong>: 在用户态 C++ 编程中，直接实现资源抢占比较困难，这更多是操作系统层面的机制。</li></ul></li></ul></li><li><p><strong>破坏循环等待条件</strong>:</p><ul><li><strong>思路</strong>: 通过对资源（通常是锁）的请求施加一个顺序，来避免形成等待环路。</li><li><strong>实践</strong>:<ul><li><strong>锁序法 (Lock Ordering / Resource Hierarchy)</strong>: 这是最常用和最有效的避免死锁的方法之一。为所有锁分配一个唯一的全局顺序（或层级）。所有线程都必须按照这个预定义的顺序来获取锁。例如，如果有两个锁 L1 和 L2，规定所有线程必须先获取 L1 再获取 L2。这样就不会出现一个线程持有 L1 等待 L2，而另一个线程持有 L2 等待 L1 的情况。</li><li><strong><code>std::lock</code> 函数</strong>: 如前所述，<code>std::lock</code> 内部也采用了避免循环等待的策略（通常是基于尝试锁定和回退，或者内部排序）。</li></ul></li></ul></li></ol><p><strong>其他策略:</strong></p><ul><li><strong>死锁检测与恢复 (Deadlock Detection and Recovery)</strong>: 这种策略允许死锁发生，然后系统检测到死锁，并采取措施恢复（例如，终止一个或多个死锁的线程，或者回滚操作）。这在数据库系统中比较常见，但在通用的 C++ 应用中较少直接实现，因为恢复的代价可能很高。</li><li><strong>使用更高级别的并发抽象</strong>: 例如，使用任务、future、线程池等，它们内部可能已经处理了许多底层的同步问题。</li></ul><h3 id="livelock">Livelock</h3><p>A livelock occurs when threads or processes are not blocked but keep changing states in response to each other, without making progress. In contrast to deadlock, threads are actively running but stuck in a loop of retries.</p><p>In the example below, threads keep trying to acquire locks but back off and retry, never entering the critical section.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><br>std::mutex mutex1, mutex2;<br><span class="hljs-type">bool</span> thread1Failed = <span class="hljs-literal">false</span>, thread2Failed = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thread1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (!thread1Failed) &#123;<br>        <span class="hljs-keyword">if</span> (mutex<span class="hljs-number">1.</span><span class="hljs-built_in">try_lock</span>()) &#123;<br>            std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">50</span>));  <span class="hljs-comment">// Simulate work</span><br>            <span class="hljs-keyword">if</span> (mutex<span class="hljs-number">2.</span><span class="hljs-built_in">try_lock</span>()) &#123;<br>                <span class="hljs-comment">// Critical section</span><br>                mutex<span class="hljs-number">2.</span><span class="hljs-built_in">unlock</span>();<br>                mutex<span class="hljs-number">1.</span><span class="hljs-built_in">unlock</span>();<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mutex<span class="hljs-number">1.</span><span class="hljs-built_in">unlock</span>();  <span class="hljs-comment">// Release and retry</span><br>                thread1Failed = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// Simulate conflict resolution</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thread2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (!thread2Failed) &#123;<br>        <span class="hljs-keyword">if</span> (mutex<span class="hljs-number">2.</span><span class="hljs-built_in">try_lock</span>()) &#123;<br>            std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-number">50</span>));  <span class="hljs-comment">// Simulate work</span><br>            <span class="hljs-keyword">if</span> (mutex<span class="hljs-number">1.</span><span class="hljs-built_in">try_lock</span>()) &#123;<br>                <span class="hljs-comment">// Critical section</span><br>                mutex<span class="hljs-number">1.</span><span class="hljs-built_in">unlock</span>();<br>                mutex<span class="hljs-number">2.</span><span class="hljs-built_in">unlock</span>();<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mutex<span class="hljs-number">2.</span><span class="hljs-built_in">unlock</span>();  <span class="hljs-comment">// Release and retry</span><br>                thread2Failed = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// Simulate conflict resolution</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t1</span><span class="hljs-params">(thread1)</span></span>;<br>    <span class="hljs-function">std::thread <span class="hljs-title">t2</span><span class="hljs-params">(thread2)</span></span>;<br><br>    t<span class="hljs-number">1.</span><span class="hljs-built_in">join</span>();<br>    t<span class="hljs-number">2.</span><span class="hljs-built_in">join</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="solutions-to-livelocks">Solutions to livelocks</h4><ol><li>Exponential Backoff: Introduce randomized delays or exponential backoff to reduce collisions.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::this_thread::<span class="hljs-built_in">sleep_for</span>(std::chrono::<span class="hljs-built_in">milliseconds</span>(<span class="hljs-built_in">rand</span>() % <span class="hljs-number">100</span>));<br></code></pre></td></tr></table></figure><ol start="2"><li>Avoid Priority Inversion: Ensure fairness by avoiding situations where higher-priority tasks constantly preempt lower-priority ones.</li><li>Resource Allocation Algorithms: Implement algorithms like Banker’s Algorithm for resource allocation.</li><li>Detect and Break the Loop: Add a limit to retries or use a monitor thread to detect repeated retries and resolve the conflict.</li></ol><h1 id="reference">Reference</h1><p><a href="https://www.bilibili.com/video/BV19tC3YvEAd/?spm_id_from=333.788.videopod.sections&amp;vd_source=33a663db754f5be8d9abe7f36a2c46bd">https://www.bilibili.com/video/BV19tC3YvEAd/?spm_id_from=333.788.videopod.sections&amp;vd_source=33a663db754f5be8d9abe7f36a2c46bd</a><br><a href="https://en.cppreference.com/w/cpp/thread/thread">https://en.cppreference.com/w/cpp/thread/thread</a><br><a href="https://en.cppreference.com/w/cpp/thread/future">https://en.cppreference.com/w/cpp/thread/future</a><br><a href="https://en.cppreference.com/w/cpp/thread/promise">https://en.cppreference.com/w/cpp/thread/promise</a><br><a href="https://en.cppreference.com/w/cpp/thread/mutex">https://en.cppreference.com/w/cpp/thread/mutex</a><br><a href="https://www.cs.yale.edu/homes/aspnes/pinewiki/Deadlock.html">https://www.cs.yale.edu/homes/aspnes/pinewiki/Deadlock.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Programming</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>threads</tag>
      
      <tag>mutex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/29/hello-world/"/>
    <url>/2024/12/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
